{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"迷途的羔羊","url":"https://mitudegaoyang.github.io"},"pages":[{"title":"摄影","date":"2017-11-01T10:46:50.000Z","updated":"2017-11-01T10:48:55.000Z","comments":true,"path":"摄影/index.html","permalink":"https://mitudegaoyang.github.io/摄影/index.html","excerpt":"","text":"我在哪"}],"posts":[{"title":"白帽子讲Web安全","slug":"白帽子讲Web安全","date":"2017-11-06T10:01:47.000Z","updated":"2017-11-07T09:36:38.000Z","comments":true,"path":"2017/11/06/白帽子讲Web安全/","link":"","permalink":"https://mitudegaoyang.github.io/2017/11/06/白帽子讲Web安全/","excerpt":"","text":"第一章 我的安全世界观1.5 安全三要素 机密性：要求保护数据内容不能泄露，加密是常见手段 完整性：要求保护数据是完整的、未被篡改的。常见的保证一致性手段是数字签名 可用性：要求保护资源是“随需而得”的 1.6 如何实施安全评估 资产等级划分 威胁分析 风险分析 确认解决方案 1.6.2 威胁分析 STRIDE模型 威胁 定义 对应的安全属性 Spoofing(伪装) 冒充他人身份 认证 Tampering(篡改) 修改数据或代码 完整性 Repudiation(抵赖) 否认做过的事情 不可抵赖性 InformationDisclosure(信息泄露) 机密信息泄露 机密性 Denial of Service(拒绝服务) 拒绝服务 可用性 Elevation of Privilege(提升权限) 未经授权获得许可 授权 1.6.3 风险分析 DREAD模型 等级 高(3) 中(2) 低(1) Damage Potential 获取完全验证权限: 执行管理员操作: 非法上传文件 泄露敏感信息 泄露其他信息 Reproducibility 攻击者可以随意再次攻击 攻击者可以重复攻击 但有时间限制 攻击者难以重复攻击过程 Exploitability 初学者在短期内能掌握攻击方法 熟练地攻击者才能完成此次攻击 漏洞利用条件非常苛刻 Affeeted users 所有用户 默认配置 关键用户 部分用户 非默认配置 极少数用户 匿名用户 Discoverability 漏洞明显 攻击条件很容易获得 有私有区域 部分人能看到 需要深入挖掘漏洞 发现该漏洞极其困难","categories":[],"tags":[{"name":"读书会","slug":"读书会","permalink":"https://mitudegaoyang.github.io/tags/读书会/"}]},{"title":"奥森美图","slug":"奥森美图","date":"2017-10-31T09:56:48.000Z","updated":"2017-11-01T10:36:26.000Z","comments":true,"path":"2017/10/31/奥森美图/","link":"","permalink":"https://mitudegaoyang.github.io/2017/10/31/奥森美图/","excerpt":"","text":"","categories":[],"tags":[{"name":"相册","slug":"相册","permalink":"https://mitudegaoyang.github.io/tags/相册/"}]},{"title":"UI-Grid 简介","slug":"UI-Grid-简介","date":"2017-10-31T08:57:17.000Z","updated":"2017-10-31T10:02:09.000Z","comments":true,"path":"2017/10/31/UI-Grid-简介/","link":"","permalink":"https://mitudegaoyang.github.io/2017/10/31/UI-Grid-简介/","excerpt":"","text":"原文：101 intro to UI-Grid UI-Grid 3.0 (原 ng-grid)是一个不依赖于其他AngularJS，完全独立的 angular 表格系统。它围绕表格的核心设计模块和功能，功能的分层就像是angular的模型和指令。这些让它的核心代码小而精，并且能让你使用它来实现复杂的功能。 在核心模块中，可以获得： 虚拟的行和列，视图中可见的行和列才会显示 绑定单元格一系列属性和方法 列的排序有三种状态：Asc, Desc, None 列的过滤 使用自定义模板更改页眉和单元格内容 i18nService 允许标记翻译 在这个例子中，我们创建了最基本的表格。方法如下： 引入uiGrid的js和css 123&lt;link rel=&quot;styleSheet&quot; href=&quot;release/ui-grid.min.css&quot;/&gt;&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/release/ui-grid.min.js&quot;&gt;&lt;/script&gt; 依赖注入 1var app = angular.module(&apos;app&apos;, [&apos;ui.grid&apos;]); 或者使用 1var app = angular.module(&apos;app&apos;, [require(&apos;angular-ui-grid&apos;)]); 添加css样式 1234.myGrid &#123; width: 500px; height: 250px; &#125; $scope中添加数组对象 1234$scope.myData = [ &#123; &quot;firstName&quot;: &quot;Cox&quot;, &quot;lastName&quot;: &quot;Carney&quot;... 使用ui-grid指令并指定json数据到引用的data属性上123&lt;div ng-controller=&quot;MainCtrl&quot;&gt; &lt;div ui-grid=&quot;&#123; data: myData &#125;&quot; class=&quot;myGrid&quot;&gt;&lt;/div&gt;&lt;/div&gt; index.html12345678910111213141516171819&lt;!doctype html&gt;&lt;html ng-app=&quot;app&quot;&gt; &lt;head&gt; &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-touch.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular-animate.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://ui-grid.info/docs/grunt-scripts/csv.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://ui-grid.info/docs/grunt-scripts/pdfmake.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://ui-grid.info/docs/grunt-scripts/vfs_fonts.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/release/ui-grid.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/release/ui-grid.css&quot;&gt;&lt;/script&gt; &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div ng-controller=&quot;MainCtrl&quot;&gt; &lt;div id=&quot;grid1&quot; ui-grid=&quot;&#123; data: myData &#125;&quot; class=&quot;grid&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; main.css 1234.grid &#123; width: 500px; height: 250px;&#125; app.js 12345678910111213141516171819202122232425var app = angular.module(&apos;app&apos;, [&apos;ngTouch&apos;, &apos;ui.grid&apos;]);app.controller(&apos;MainCtrl&apos;, [&apos;$scope&apos;, function ($scope) &#123; $scope.myData = [ &#123; &quot;firstName&quot;: &quot;Cox&quot;, &quot;lastName&quot;: &quot;Carney&quot;, &quot;company&quot;: &quot;Enormo&quot;, &quot;employed&quot;: true &#125;, &#123; &quot;firstName&quot;: &quot;Lorraine&quot;, &quot;lastName&quot;: &quot;Wise&quot;, &quot;company&quot;: &quot;Comveyer&quot;, &quot;employed&quot;: false &#125;, &#123; &quot;firstName&quot;: &quot;Nancy&quot;, &quot;lastName&quot;: &quot;Waters&quot;, &quot;company&quot;: &quot;Fuelton&quot;, &quot;employed&quot;: false &#125;];&#125;]);","categories":[],"tags":[]},{"title":"项目建立手册","slug":"项目建立手册","date":"2017-10-26T13:14:40.000Z","updated":"2017-10-31T09:47:07.000Z","comments":true,"path":"2017/10/26/项目建立手册/","link":"","permalink":"https://mitudegaoyang.github.io/2017/10/26/项目建立手册/","excerpt":"","text":"blog.io 本项目基于hexo+github结构创建 一、安装步骤1. 创建新文件夹，并执行命令安装Hexo：执行如下命令安装Hexo： 1sudo npm install -g hexo 初始化hexo 1hexo init 生成静态页面 1hexo generate（hexo g也可以） 启动本地服务，进行文章预览调试 1hexo server 浏览器输入http://localhost:4000 2. 在github上创建仓库，并保存本地 注意：建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法例如：【mitudegaoyang.github.io】 3. 将Hexo全部内容复制进上一步创建的文件夹中，并提交仓库4. 配置Github仓库现在我们需要_config.yml文件，来建立关联 翻到最下面，改成我这样子的 1234567deploy: type: git repo: git@github.com:mitudegaoyang/mitudegaoyang.github.io.git branch: master 然后执行命令： 1npm install hexo-deployer-git --save 注意：网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。 忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。 5. 执行配置命令：1hexo deploy 然后再浏览器中输入http://mitudegaoyang.github.io/就行了，我的github的账户叫mitudegaoyang,把这个改成你github的账户名就行了 6. 部署步骤每次部署的步骤，可按以下三步来进行。 12345hexo cleanhexo generatehexo deploy 7. 一些常用命令：12345678910111213hexo new&quot;postName&quot; #新建文章hexo new page&quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 8. 报错总结：1ERROR Deployer not found: git 或者 ERROR Deployer not found: github 解决方法： npm install hexo-deployer-git –save 如发生报错： ERROR Process failed: layout/.DS_Store , 那么进入主题里面layout和_partial目录下，使用删除命令： rm-rf.DS_Store 1ERROR Plugin load failed: hexo-server 原因： Besides,utilities are separated into a standalone module.hexo.util is not reachable anymore. 解决方法，执行命令： sudo npm install hexo-server 执行命令hexo server， 提示：Usage: hexo …. 原因： 我认为是没有生成本地服务 解决方法，执行命令： npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server 原文链接","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://mitudegaoyang.github.io/tags/随笔/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-10-26T12:50:29.000Z","updated":"2017-10-26T12:50:29.000Z","comments":true,"path":"2017/10/26/hello-world/","link":"","permalink":"https://mitudegaoyang.github.io/2017/10/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}