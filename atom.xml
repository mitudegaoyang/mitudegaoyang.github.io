<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Hexo</title>
  
  
  <link href="https://www.gaotianyang.top/atom.xml" rel="self"/>
  
  <link href="https://www.gaotianyang.top/"/>
  <updated>2025-04-25T14:14:30.649Z</updated>
  <id>https://www.gaotianyang.top/</id>
  
  <author>
    <name>迷途的羔羊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿那亚</title>
    <link href="https://www.gaotianyang.top/archives/202504195f6ce854/"/>
    <id>https://www.gaotianyang.top/archives/202504195f6ce854/</id>
    <published>2025-04-19T12:59:51.000Z</published>
    <updated>2025-04-25T14:14:30.649Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/04/23/pEIuZ2q.jpg" alt="首屏图"></p><a id="more"></a><p><img src="https://s21.ax1x.com/2025/04/21/pE5NpcQ.jpg" alt="-1033"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5tvh8.jpg" alt="-1034"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5NS1g.jpg" alt="-1035"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5tz9S.jpg" alt="-1036"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5tjtf.jpg" alt="-1037"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5N9Xj.jpg" alt="-1038"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5NPns.jpg" alt="-1039"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5NF7q.jpg" alt="-1040"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dngS.jpg" alt="-1041"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dujg.jpg" alt="-1042"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dMuQ.jpg" alt="-1043"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dQBj.jpg" alt="-1044"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dYCV.jpg" alt="-1045"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5dlHs.jpg" alt="-1046"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5d3En.jpg" alt="-1047"></p><p><img src="https://s21.ax1x.com/2025/04/21/pE5d8Nq.jpg" alt="-1048"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInUEQ.jpg" alt="-1049"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInd4s.jpg" alt="-1050"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInYDS.jpg" alt="-1051"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIntHg.jpg" alt="-1052"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInaNj.jpg" alt="-1053"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIn0Cn.jpg" alt="-1054"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInDg0.jpg" alt="-1055"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEInB3q.jpg" alt="-1056"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuk5j.jpg" alt="-1057"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuEPs.jpg" alt="-1058"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuFaQ.jpg" alt="-1059"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuiVg.jpg" alt="-1060"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuCqS.jpg" alt="-1061"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuVGn.jpg" alt="-1062"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuZ2q.jpg" alt="-1063"></p><p><img src="https://s21.ax1x.com/2025/04/23/pEIuex0.jpg" alt="-1064"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8tPO.jpg" alt="-1065"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8NGD.jpg" alt="-1066"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8Ga6.jpg" alt="-1067"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8JIK.jpg" alt="-1068"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8URe.jpg" alt="-1069"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8axH.jpg" alt="-1070"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo80sA.jpg" alt="-1071"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEo8wMd.jpg" alt="-1072"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEoYzes.jpg" alt="-1073"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEoYqW8.jpg" alt="-1074"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEoYOSS.jpg" alt="-1075"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEoYjyQ.jpg" alt="-1076"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEoYvLj.jpg" alt="-1077"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEotSwn.jpg" alt="-1078"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEotpoq.jpg" alt="-1079"></p><p><img src="https://s21.ax1x.com/2025/04/24/pEotCF0.jpg" alt="-1080"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEooufP.jpg" alt="-1081"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEoonYt.jpg" alt="-1082"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEooZTA.jpg" alt="-1083"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEooMSf.jpg" alt="-1084"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEooVwd.jpg" alt="-1085"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEoomFI.jpg" alt="-1086"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEooQl8.jpg" alt="-1087"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/04/23/pEIuZ2q.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="阿那亚" scheme="https://www.gaotianyang.top/tags/%E9%98%BF%E9%82%A3%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>通州大运河森林公园</title>
    <link href="https://www.gaotianyang.top/archives/20250405c64dd9b3/"/>
    <id>https://www.gaotianyang.top/archives/20250405c64dd9b3/</id>
    <published>2025-04-05T14:48:09.000Z</published>
    <updated>2025-04-25T13:53:20.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/04/07/pEcvd9U.jpg" alt="首屏图"></p><a id="more"></a><p><img src="https://s21.ax1x.com/2025/04/07/pEcv0c4.jpg" alt="大运河一隅-0839"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvUhT.jpg" alt="正午阳光-0840"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvw3F.jpg" alt="蓝天上的白色铅笔线-0841"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvd9U.jpg" alt="淡淡的划过-0842"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvNNV.jpg" alt="好像竞相追逐着-0843"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvBjJ.jpg" alt="春风拂面-0844"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvru9.jpg" alt="红艳艳-0845"></p><p><img src="https://s21.ax1x.com/2025/04/07/pEcvsBR.jpg" alt="花儿开的争奇斗艳-0846"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYRmD.jpg" alt="大运河水静静流淌-0847"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgY4kd.jpg" alt="郁郁葱葱的树木-0848"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYfTH.jpg" alt="河边的码头-0849"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYW0e.jpg" alt="远处林立的高楼-0850"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYgOO.jpg" alt="江景房-0851"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgY5tA.jpg" alt="碧波荡漾-0852"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYIfI.jpg" alt="天气好好-0853"></p><p><img src="https://s21.ax1x.com/2025/04/08/pEgYTpt.jpg" alt="清风徐来-0854"></p><p><img src="https://s21.ax1x.com/2025/04/25/pEool6S.jpg" alt="春的气息扑面而来-0855"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/04/07/pEcvd9U.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="通州大运河森林公园" scheme="https://www.gaotianyang.top/tags/%E9%80%9A%E5%B7%9E%E5%A4%A7%E8%BF%90%E6%B2%B3%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>screen的使用</title>
    <link href="https://www.gaotianyang.top/archives/2025040169ea2648/"/>
    <id>https://www.gaotianyang.top/archives/2025040169ea2648/</id>
    <published>2025-04-01T13:28:39.000Z</published>
    <updated>2025-04-01T14:20:45.844Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/01/pE8qB5j.jpg" alt="首屏图"></p><!--首屏图备用![首屏图](https://s21.ax1x.com/2025/03/01/pE8qgMV.jpg)![首屏图](https://s21.ax1x.com/2025/03/01/pE8qy2q.jpg)![首屏图](https://s21.ax1x.com/2025/03/01/pE8q6x0.jpg)![首屏图](https://s21.ax1x.com/2025/03/01/pE8qsGn.jpg)--><a id="more"></a><h2 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h2><p><code>screen</code>是一个全屏窗口管理器，可以在一个物理终端上创建多个全屏窗口，并且可以在这些窗口之间进行切换。它主要用于在远程服务器上运行长时间的任务，即使网络连接中断，任务也可以继续运行。</p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="安装-screen"><a href="#安装-screen" class="headerlink" title="安装 screen"></a>安装 screen</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 Debian/Ubuntu 系统上</span></span><br><span class="line">sudo apt-get install screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 CentOS/RHEL 系统上</span></span><br><span class="line">sudo yum install screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 macOS 上</span></span><br><span class="line">brew install screen</span><br></pre></td></tr></table></figure><h3 id="screen-的配置文件说明"><a href="#screen-的配置文件说明" class="headerlink" title="screen 的配置文件说明"></a>screen 的配置文件说明</h3><p>可以通过 <code>~/.screenrc</code> 文件自定义 screen 行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置默认滚动缓冲区大小</span><br><span class="line">defscrollback 1000</span><br><span class="line"></span><br><span class="line"># 启用状态栏显示</span><br><span class="line">hardstatus alwayslastline &quot;%&#123;= kw&#125;%-w%&#123;=b bw&#125;%n %t%&#123;-b fw&#125;%+w&quot;</span><br><span class="line"></span><br><span class="line"># 自动启动多窗口模式</span><br><span class="line">startup_message off</span><br></pre></td></tr></table></figure><p>通过编辑 <code>~/.screenrc</code> 文件，用户可以定制 screen 的外观和功能。</p><h3 id="启动一个新的-screen-会话"><a href="#启动一个新的-screen-会话" class="headerlink" title="启动一个新的 screen 会话"></a>启动一个新的 screen 会话</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S &lt;session_name&gt;</span><br></pre></td></tr></table></figure><p>示例：启动一个名为 mysession 的会话。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S mysession</span><br></pre></td></tr></table></figure><h3 id="重新连接到一个已有的-screen-会话"><a href="#重新连接到一个已有的-screen-会话" class="headerlink" title="重新连接到一个已有的 screen 会话"></a>重新连接到一个已有的 screen 会话</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r &lt;session_name&gt;</span><br></pre></td></tr></table></figure><p>示例：重新连接到名为 mysession 的会话。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r mysession</span><br></pre></td></tr></table></figure><h3 id="分离当前-screen-会话"><a href="#分离当前-screen-会话" class="headerlink" title="分离当前 screen 会话"></a>分离当前 screen 会话</h3><p>按下 <code>Ctrl+A</code> 然后按 <code>D</code> 键，可以将当前会话分离，但不会终止会话中的任务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+A D</span><br></pre></td></tr></table></figure><h3 id="列出所有-screen-会话"><a href="#列出所有-screen-会话" class="headerlink" title="列出所有 screen 会话"></a>列出所有 screen 会话</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure><p>这将显示所有正在运行的会话及其状态。</p><h3 id="终止一个-screen-会话"><a href="#终止一个-screen-会话" class="headerlink" title="终止一个 screen 会话"></a>终止一个 screen 会话</h3><p>在会话中输入 <code>exit</code> ，或者按下 <code>Ctrl+D</code> ，可以终止当前会话。</p><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="创建新窗口"><a href="#创建新窗口" class="headerlink" title="创建新窗口"></a>创建新窗口</h3><p>按下 <code>Ctrl+A</code> 然后按 <code>C</code> 键，可以在当前会话中创建一个新的窗口。</p><h3 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h3><p>按下 <code>Ctrl+A</code> 然后按数字键（如 0 到 9），可以快速切换到对应的窗口。<br>按下 <code>Ctrl+A</code> 然后按 “ “ 键，可以列出所有窗口并选择切换。</p><h3 id="重命名当前窗口"><a href="#重命名当前窗口" class="headerlink" title="重命名当前窗口"></a>重命名当前窗口</h3><p>按下 <code>Ctrl+A</code> 然后按 <code>A</code> 键，可以为当前窗口重命名，方便识别。</p><h3 id="查看会话日志"><a href="#查看会话日志" class="headerlink" title="查看会话日志"></a>查看会话日志</h3><p>启用日志记录功能，可以将屏幕输出保存到文件中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+A H</span><br></pre></td></tr></table></figure><h3 id="复制模式"><a href="#复制模式" class="headerlink" title="复制模式"></a>复制模式</h3><p>按下 <code>Ctrl+A</code> 然后按 <code>[</code> 键，进入复制模式，可以滚动和复制屏幕内容。</p><h3 id="发送命令到后台运行"><a href="#发送命令到后台运行" class="headerlink" title="发送命令到后台运行"></a>发送命令到后台运行</h3><p>如果需要在后台运行某个命令，可以结合 <code>screen</code> 和 <code>-d</code> <code>-m</code> 参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -dmS &lt;session_name&gt; &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p>示例：在后台运行 <code>ping</code> 命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -dmS ping_test ping www.google.com</span><br></pre></td></tr></table></figure><p>示例：在后台运行定时任务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -dmS cronjob bash -c <span class="string">&quot;while true; do echo &#x27;Hello World&#x27;; sleep 60; done&quot;</span></span><br></pre></td></tr></table></figure><h3 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h3><p>实现多人协作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用多用户模式</span></span><br><span class="line">Ctrl+A :multiuser on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加其他用户访问权限</span></span><br><span class="line">Ctrl+A :acladd &lt;username&gt;</span><br></pre></td></tr></table></figure><h2 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h2><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><table><thead><tr><th>命令/快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>screen</code></td><td>启动一个新的 screen 会话。</td></tr><tr><td><code>screen -S &lt;name&gt;</code></td><td>创建一个命名的新会话（例如 <code>screen -S mysession</code>）。</td></tr><tr><td><code>screen -r</code></td><td>恢复最近分离（detached）的会话。</td></tr><tr><td><code>screen -r &lt;name/pid&gt;</code></td><td>恢复指定名称或 PID 的会话（例如 <code>screen -r mysession</code>）。</td></tr><tr><td><code>screen -ls</code></td><td>列出所有已存在的 screen 会话（包括分离和附着的）。</td></tr><tr><td><code>screen -X -S &lt;name&gt; quit</code></td><td>强制终止指定会话（不进入会话直接关闭）。</td></tr><tr><td><code>Ctrl+A d</code></td><td><strong>分离当前会话</strong>（Detach），返回原终端，会话在后台运行。</td></tr><tr><td><code>Ctrl+A :quit</code></td><td>关闭当前会话并终止所有窗口。</td></tr></tbody></table><h3 id="窗口（Window）操作"><a href="#窗口（Window）操作" class="headerlink" title="窗口（Window）操作"></a>窗口（Window）操作</h3><table><thead><tr><th>快捷键/命令</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl+A c</code></td><td>创建一个新窗口（Create）。</td></tr><tr><td><code>Ctrl+A n</code></td><td>切换到下一个窗口（Next）。</td></tr><tr><td><code>Ctrl+A p</code></td><td>切换到上一个窗口（Previous）。</td></tr><tr><td><code>Ctrl+A 0-9</code></td><td>直接切换到第 0-9 个窗口。</td></tr><tr><td><code>Ctrl+A &quot;</code></td><td>列出所有窗口，可交互选择。</td></tr><tr><td><code>Ctrl+A A</code></td><td>重命名当前窗口。</td></tr><tr><td><code>Ctrl+A k</code></td><td>关闭（Kill）当前窗口。</td></tr><tr><td><code>Ctrl+A \</code></td><td>终止所有窗口并关闭当前会话。</td></tr></tbody></table><h3 id="分屏（Region-Split）"><a href="#分屏（Region-Split）" class="headerlink" title="分屏（Region/Split）"></a>分屏（Region/Split）</h3><table><thead><tr><th>快捷键/命令</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl+A S</code></td><td>水平分割当前区域（Split horizontally）。</td></tr><tr><td><code>Ctrl+A</code></td><td>垂直分割当前区域（Split vertically，需注意键盘布局）。</td></tr><tr><td><code>Ctrl+A Tab</code></td><td>切换焦点到下一个区域。</td></tr><tr><td><code>Ctrl+A X</code></td><td>关闭当前焦点所在的区域。</td></tr><tr><td><code>Ctrl+A Q</code></td><td>关闭所有区域，仅保留当前焦点区域。</td></tr></tbody></table><h3 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h3><table><thead><tr><th>快捷键/命令</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl+A ?</code></td><td>查看所有快捷键帮助。</td></tr><tr><td><code>Ctrl+A [</code></td><td>进入<strong>复制模式</strong>（可滚动屏幕内容，按 <code>Esc</code> 退出）。</td></tr><tr><td><code>Ctrl+A ]</code></td><td>粘贴复制模式中选中的内容。</td></tr><tr><td><code>Ctrl+A H</code></td><td>开启/关闭当前窗口的日志记录（保存到 <code>screenlog.n</code> 文件）。</td></tr><tr><td><code>Ctrl+A :scrollback 1000</code></td><td>设置屏幕回滚行数为 1000（调整缓冲区大小）。</td></tr><tr><td><code>Ctrl+A x</code></td><td>锁定会话（需输入用户密码解锁）。</td></tr><tr><td><code>Ctrl+A :sessionname &lt;name&gt;</code></td><td>重命名当前会话。</td></tr></tbody></table><h3 id="多用户共享会话"><a href="#多用户共享会话" class="headerlink" title="多用户共享会话"></a>多用户共享会话</h3><table><thead><tr><th>命令/快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>screen -x</code></td><td>加入一个已存在的会话（多人共享同一会话）。</td></tr><tr><td><code>Ctrl+A :multiuser on</code></td><td>启用多用户模式。</td></tr><tr><td><code>Ctrl+A :acladd &lt;user&gt;</code></td><td>允许指定用户访问当前会话（需 root 权限）。</td></tr></tbody></table><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>使用命名会话：为每个会话指定有意义的名字，便于管理和识别。</li><li>定期检查会话状态：使用 screen -ls 查看是否有未关闭的会话。</li><li>避免意外分离：如果网络中断或终端关闭，可以通过 screen -r 重新连接到会话。</li><li>善用多窗口功能：在一个会话中创建多个窗口，分别运行不同的任务。</li><li>启用日志记录：对于重要的任务，启用日志功能以便后续分析。</li></ul><h3 id="示例流程"><a href="#示例流程" class="headerlink" title="示例流程"></a>示例流程</h3><ul><li>创建并命名会话</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S mywork</span><br></pre></td></tr></table></figure><ul><li>分离会话</li></ul><p>按下 <code>Ctrl+A d</code> 返回原终端。</p><ul><li>恢复会话</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r mywork</span><br></pre></td></tr></table></figure><ul><li>创建新窗口</li></ul><p>在会话中按下 <code>Ctrl+A c</code>，然后通过 <code>Ctrl+A n/p</code> 切换窗口。</p><ul><li>分屏操作</li></ul><p>按下 <code>Ctrl+A S</code> 水平分屏，用 <code>Ctrl+A Tab</code> 切换区域。</p><h2 id="常见问题解答（FAQ）"><a href="#常见问题解答（FAQ）" class="headerlink" title="常见问题解答（FAQ）"></a>常见问题解答（FAQ）</h2><ul><li><p>Q: 如何解决 screen 无法恢复会话的问题？</p><ul><li><p>A: 如果 screen -r 提示无法恢复会话，可能是会话已经终止或被占用。可以尝试以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen -ls <span class="comment"># 查看所有会话</span></span><br><span class="line">screen -r &lt;session_name&gt; <span class="comment"># 恢复指定会话</span></span><br><span class="line">screen -dr &lt;session_name&gt; <span class="comment"># 强制分离并恢复会话</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Q: 如何退出复制模式？</p><ul><li>A: 在复制模式下，按下 Esc 键即可退出。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>掌握这些命令后，可以高效管理终端任务，尤其适合长时间运行进程或远程服务器操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/01/pE8qB5j.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;
&lt;!--
首屏图备用
![首屏图](https://s21.ax1x.com/2025/03/01/pE8qgMV.jpg)
![首屏图](https://s21.ax1x.com/2025/03/01/pE8qy2q.jpg)
![首屏图](https://s21.ax1x.com/2025/03/01/pE8q6x0.jpg)
![首屏图](https://s21.ax1x.com/2025/03/01/pE8qsGn.jpg)
--&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="screen" scheme="https://www.gaotianyang.top/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>中国美术馆</title>
    <link href="https://www.gaotianyang.top/archives/20250330918e3ed1/"/>
    <id>https://www.gaotianyang.top/archives/20250330918e3ed1/</id>
    <published>2025-03-30T13:11:20.000Z</published>
    <updated>2025-04-03T14:16:55.764Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/04/01/pEyJs1S.jpg" alt="首屏图"></p><a id="more"></a><p><img src="https://s21.ax1x.com/2025/04/01/pEyJs1S.jpg" alt="中国美术馆-0687"></p><p><img src="https://s21.ax1x.com/2025/04/01/pEyJy6g.jpg" alt="甘肃丝路艺术珍品展-0688"></p><p><img src="https://s21.ax1x.com/2025/04/01/pEyJgmj.jpg" alt="剪纸-蛇盘兔-0691"></p><p><img src="https://s21.ax1x.com/2025/04/01/pEyJBff.jpg" alt="蛇盘兔多子多福(石榴)-0689"></p><p><img src="https://s21.ax1x.com/2025/04/01/pEyJ6XQ.jpg" alt="蛇盘兔辈辈福(金钱儿)-0690"></p><p><img src="https://s21.ax1x.com/2025/04/01/pEyJ20s.jpg" alt="中岳采种-0692"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqjaD.jpg" alt="华山松韵图-0693"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqLqK.jpg" alt="雁北悬空寺-0694"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqXVO.jpg" alt="空中楼阁-0695"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqqr6.jpg" alt="塔林夜战-0696"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyq7x1.jpg" alt="岳麓山-0697"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqvIe.jpg" alt="泰山一角-0698"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyqzPH.jpg" alt="华山风景-0699"></p><p><img src="https://s21.ax1x.com/2025/04/02/pEyLSGd.jpg" alt="华山-0700"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6l4TP.jpg" alt="岱宗旭日-0701"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lhwt.jpg" alt="灵岩寺·暮塔林晚照-0702"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lfeI.jpg" alt="嵩岳秋艳-0703"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lROA.jpg" alt="华山风景-0704"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lIFf.jpg" alt="老广东，小生活-0705"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6loY8.jpg" alt="盖新屋-0706"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lTfS.jpg" alt="妇人和三个孩子-0707"></p><p><img src="https://s21.ax1x.com/2025/04/03/pE6lHSg.jpg" alt="社会主义新农村——美丽乡村-0708"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/04/01/pEyJs1S.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="中国美术馆" scheme="https://www.gaotianyang.top/tags/%E4%B8%AD%E5%9B%BD%E7%BE%8E%E6%9C%AF%E9%A6%86/"/>
    
  </entry>
  
  <entry>
    <title>官庄公园2025</title>
    <link href="https://www.gaotianyang.top/archives/202503238f4f5613/"/>
    <id>https://www.gaotianyang.top/archives/202503238f4f5613/</id>
    <published>2025-03-23T13:17:14.000Z</published>
    <updated>2025-03-25T14:03:24.679Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/25/pEDABSU.jpg" alt="首屏图-665"></p><a id="more"></a><p>今天和夫人一起来官庄公园踏青，我们悠然的步行在公园的游览道路上，欣赏着周围的各色美景，有盛开的桃花，有一簇一簇的小野花野草。来到公园的湖边，湖水在阳光下波光粼粼，仿佛一面巨大的镜子，倒映着蓝天白云和岸边的垂柳。这幅画面让人感到宁静而美好。</p><p><img src="https://s21.ax1x.com/2025/03/25/pEDAdYV.jpg" alt="鱼儿欢畅-648"></p><p>湖中的鱼儿们正在欢快地游动。它们时而跃出水面，时而成群结队地穿梭于水草之间。这些小生灵为平静的湖面增添了几分灵动与生机。一条大红鲤鱼，它的鳞片在阳光下闪烁着金色的光芒，显得格外耀眼。</p><p><img src="https://s21.ax1x.com/2025/03/25/pEDAYes.jpg" alt="大红鲤-651"></p><p>不远处，一群绿头鸭正在湖面上嬉戏。它们有的低头觅食，有的扑腾翅膀溅起水花，还有的悠闲地漂浮在水面上。偶尔，它们会与水中的鱼儿互动，形成一幅和谐的生态画卷。</p><p><img src="https://s21.ax1x.com/2025/03/25/pEDAtwn.jpg" alt="绿头鸭与鱼-654"></p><p><img src="https://s21.ax1x.com/2025/03/25/pEDAwWT.jpg" alt="红与绿-655"></p><p>循着湖边，我们缓步前行，偶然间发现一对优雅的黑天鹅。它们的羽毛乌黑发亮，长长的脖子弯曲成优美的弧线。黑天鹅静静地站在湖面上，宛如两件艺术品，令人不忍打扰。</p><p><img src="https://s21.ax1x.com/2025/03/25/pEDADlF.jpg" alt="黑天鹅-657"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/25/pEDABSU.jpg&quot; alt=&quot;首屏图-665&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="官庄公园" scheme="https://www.gaotianyang.top/tags/%E5%AE%98%E5%BA%84%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>中国印刷博物馆</title>
    <link href="https://www.gaotianyang.top/archives/2025031567b7ec68/"/>
    <id>https://www.gaotianyang.top/archives/2025031567b7ec68/</id>
    <published>2025-03-15T11:11:46.000Z</published>
    <updated>2025-03-15T12:37:12.908Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/15/pEa6uMF.jpg" alt="首屏图-630"></p><a id="more"></a><p>中国印刷博物馆是位于北京市大兴区的一座博物馆，旁边紧邻着中国印刷学院。</p><p><img src="https://s21.ax1x.com/2025/03/15/pEa6mxU.jpg" alt="中国印刷博物馆-631"></p><p>使用传统印刷工艺，体验印制年化的过程，体现了印刷在文化传承中的应用。</p><p><img src="https://s21.ax1x.com/2025/03/15/pEa6Kr4.jpg" alt="印刷生肖图-626"></p><p>这是印刷制版后的效果图。</p><p><img src="https://s21.ax1x.com/2025/03/15/pEa63I1.jpg" alt="制版-627"></p><p>馆内陈列的各种印刷机器，展示了不同时期的印刷设备和技术发展。</p><p><img src="https://s21.ax1x.com/2025/03/15/pEa6e2T.jpg" alt="放满印刷机器的展厅-628"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/15/pEa6uMF.jpg&quot; alt=&quot;首屏图-630&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="中国印刷博物馆" scheme="https://www.gaotianyang.top/tags/%E4%B8%AD%E5%9B%BD%E5%8D%B0%E5%88%B7%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    
  </entry>
  
  <entry>
    <title>Python项目规划与工具</title>
    <link href="https://www.gaotianyang.top/archives/20250309726318bf/"/>
    <id>https://www.gaotianyang.top/archives/20250309726318bf/</id>
    <published>2025-03-09T14:50:57.000Z</published>
    <updated>2025-04-01T14:19:24.905Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/01/pE8q0aQ.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-7：项目规划与工具">返回</a></p><h2 id="1-项目结构规划"><a href="#1-项目结构规划" class="headerlink" title="1. 项目结构规划"></a>1. 项目结构规划</h2><p><a href="/archives/202502214537ccef/#Day-7：项目规划与工具">返回</a></p><h2 id="2-使用版本控制（git）"><a href="#2-使用版本控制（git）" class="headerlink" title="2. 使用版本控制（git）"></a>2. 使用版本控制（<code>git</code>）</h2><p><a href="/archives/202502214537ccef/#Day-7：项目规划与工具">返回</a></p><h2 id="3-虚拟环境（venv）"><a href="#3-虚拟环境（venv）" class="headerlink" title="3. 虚拟环境（venv）"></a>3. 虚拟环境（<code>venv</code>）</h2><p><a href="/archives/202502214537ccef/#Day-7：项目规划与工具">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>创建一个虚拟环境并安装 Flask。</li><li>初始化一个 <code>git</code> 仓库并提交代码。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/01/pE8q0aQ.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="项目规划与工具" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E5%88%92%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    
    <category term="项目结构规划" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%A7%84%E5%88%92/"/>
    
    <category term="使用版本控制git" scheme="https://www.gaotianyang.top/tags/%E4%BD%BF%E7%94%A8%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6git/"/>
    
    <category term="虚拟环境venv" scheme="https://www.gaotianyang.top/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83venv/"/>
    
  </entry>
  
  <entry>
    <title>Python面向对象编程</title>
    <link href="https://www.gaotianyang.top/archives/20250307a70bebd8/"/>
    <id>https://www.gaotianyang.top/archives/20250307a70bebd8/</id>
    <published>2025-03-07T14:50:44.000Z</published>
    <updated>2025-03-01T15:06:02.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/01/pE8qwVg.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-5-6：面向对象编程（OOP）">返回</a></p><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1. 类与对象"></a>1. 类与对象</h2><p><a href="/archives/202502214537ccef/#Day-5-6：面向对象编程（OOP）">返回</a></p><h2 id="2-属性与方法"><a href="#2-属性与方法" class="headerlink" title="2. 属性与方法"></a>2. 属性与方法</h2><p><a href="/archives/202502214537ccef/#Day-5-6：面向对象编程（OOP）">返回</a></p><h2 id="3-继承与多态"><a href="#3-继承与多态" class="headerlink" title="3. 继承与多态"></a>3. 继承与多态</h2><p><a href="/archives/202502214537ccef/#Day-5-6：面向对象编程（OOP）">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个简单的类，表示一个学生（属性：姓名、成绩；方法：计算平均分）。</li><li>编写一个类，表示一个银行账户（属性：余额；方法：存款、取款）。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/01/pE8qwVg.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="面向对象编程" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    <category term="类与对象" scheme="https://www.gaotianyang.top/tags/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="属性与方法" scheme="https://www.gaotianyang.top/tags/%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    
    <category term="继承与多态" scheme="https://www.gaotianyang.top/tags/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Python模块与库</title>
    <link href="https://www.gaotianyang.top/archives/2025030562adce42/"/>
    <id>https://www.gaotianyang.top/archives/2025030562adce42/</id>
    <published>2025-03-05T14:50:18.000Z</published>
    <updated>2025-03-03T14:46:55.246Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/01/pE8qrPs.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-3-4：模块与库">返回</a></p><h2 id="1-导入模块（import）"><a href="#1-导入模块（import）" class="headerlink" title="1. 导入模块（import）"></a>1. 导入模块（<code>import</code>）</h2><h3 id="1-1-模块导入（import）简明解释"><a href="#1-1-模块导入（import）简明解释" class="headerlink" title="1.1. 模块导入（import）简明解释"></a>1.1. 模块导入（<code>import</code>）简明解释</h3><p><strong>用途</strong>：</p><ul><li><strong>代码复用</strong>：将功能封装为模块，避免重复造轮子</li><li><strong>命名空间管理</strong>：通过模块隔离变量/函数名，防止全局污染</li><li><strong>项目结构化</strong>：通过模块化拆分提升代码可维护性</li><li><strong>动态加载</strong>：运行时按需加载资源（如插件系统）</li></ul><p><strong>常见场景</strong>：</p><ul><li>使用标准库（如<code>import math</code>）</li><li>导入第三方库（如<code>import numpy as np</code>）</li><li>组织大型项目（自定义模块分层导入）</li></ul><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2. 代码示例"></a>1.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入整个模块</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.sqrt(<span class="number">16</span>))  <span class="comment"># 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入特定对象</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.now().year)  <span class="comment"># 2023</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名导入</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.DataFrame()</span><br></pre></td></tr></table></figure><h3 id="1-3-常见错误及避免方法"><a href="#1-3-常见错误及避免方法" class="headerlink" title="1.3. 常见错误及避免方法"></a>1.3. 常见错误及避免方法</h3><h4 id="错误-1：循环导入"><a href="#错误-1：循环导入" class="headerlink" title="错误 1：循环导入"></a>错误 1：循环导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module_a.py</span></span><br><span class="line"><span class="keyword">import</span> module_b  <span class="comment"># module_b同时导入module_a → 死锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># module_b.py</span></span><br><span class="line"><span class="keyword">import</span> module_a</span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>重构代码结构，提取公共逻辑到新模块</li><li>延迟导入（在函数内部导入）</li></ul><h4 id="错误-2：通配符导入污染命名空间"><a href="#错误-2：通配符导入污染命名空间" class="headerlink" title="错误 2：通配符导入污染命名空间"></a>错误 2：通配符导入污染命名空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *  <span class="comment"># 导入所有对象，可能覆盖已有变量</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>明确导入所需对象：<code>from numpy import array, linspace</code></li><li>使用模块别名：<code>import numpy as np</code></li></ul><h4 id="错误-3：相对导入路径错误"><a href="#错误-3：相对导入路径错误" class="headerlink" title="错误 3：相对导入路径错误"></a>错误 3：相对导入路径错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目结构：</span></span><br><span class="line"><span class="comment"># project/</span></span><br><span class="line"><span class="comment">#   main.py</span></span><br><span class="line"><span class="comment">#   utils/</span></span><br><span class="line"><span class="comment">#     __init__.py</span></span><br><span class="line"><span class="comment">#     helpers.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.py中错误写法：</span></span><br><span class="line"><span class="keyword">from</span> .utils.helpers <span class="keyword">import</span> foo  <span class="comment"># 引发 ImportError</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>使用绝对导入：<code>from utils.helpers import foo</code></li><li>确保项目根目录在 Python 路径中</li></ul><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><h4 id="场景-1：插件架构"><a href="#场景-1：插件架构" class="headerlink" title="场景 1：插件架构"></a>场景 1：插件架构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态加载模块实现插件系统</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_plugin</span>(<span class="params">plugin_name</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        module = importlib.import_module(<span class="string">f&quot;plugins.<span class="subst">&#123;plugin_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> module.Plugin()</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        print(<span class="string">f&quot;插件 <span class="subst">&#123;plugin_name&#125;</span> 未找到&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载不同实现的插件</span></span><br><span class="line">image_plugin = load_plugin(<span class="string">&quot;image_processor&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="场景-2：配置分离"><a href="#场景-2：配置分离" class="headerlink" title="场景 2：配置分离"></a>场景 2：配置分离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line">API_KEY = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_api</span>():</span></span><br><span class="line">    <span class="keyword">if</span> config.DEBUG:</span><br><span class="line">        print(<span class="string">&quot;调试模式启动&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用 config.API_KEY</span></span><br></pre></td></tr></table></figure><h3 id="1-5-递进练习题"><a href="#1-5-递进练习题" class="headerlink" title="1.5. 递进练习题"></a>1.5. 递进练习题</h3><h4 id="题目-1-生成随机整数-初级"><a href="#题目-1-生成随机整数-初级" class="headerlink" title="题目 1: 生成随机整数(初级)"></a>题目 1: 生成随机整数(初级)</h4><ul><li>编写脚本导入<code>random</code>模块，生成 10 个 1-100 的随机整数</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-生成随机整数-初级">参考答案</a></p></blockquote><h4 id="题目-2-导入并使用函数-中级"><a href="#题目-2-导入并使用函数-中级" class="headerlink" title="题目 2: 导入并使用函数(中级)"></a>题目 2: 导入并使用函数(中级)</h4><ul><li>创建自定义模块<code>geometry.py</code>，包含计算圆面积的函数<code>circle_area(r)</code>，在主程序中导入并使用</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-导入并使用函数-中级">参考答案</a></p></blockquote><h4 id="题目-3-动态更新模块代码-高级"><a href="#题目-3-动态更新模块代码-高级" class="headerlink" title="题目 3: 动态更新模块代码(高级)"></a>题目 3: 动态更新模块代码(高级)</h4><ul><li>实现模块热重载功能：通过<code>importlib.reload()</code>动态更新正在运行的模块代码</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-动态更新模块代码-高级">参考答案</a></p></blockquote><h3 id="1-6-深度思考问题"><a href="#1-6-深度思考问题" class="headerlink" title="1.6. 深度思考问题"></a>1.6. 深度思考问题</h3><p>当模块化程度过高（如将每个小功能都拆分为独立模块）时，是提升了代码质量还是引入了新的复杂性？模块化设计的边界应当如何权衡？</p><p>（思考方向：模块内聚性、依赖管理、维护成本、启动性能、分布式系统下的模块通信代价）</p><p><a href="/archives/202502214537ccef/#Day-3-4：模块与库">返回</a></p><h2 id="2-常用标准库（os、sys、math、random）"><a href="#2-常用标准库（os、sys、math、random）" class="headerlink" title="2. 常用标准库（os、sys、math、random）"></a>2. 常用标准库（<code>os</code>、<code>sys</code>、<code>math</code>、<code>random</code>）</h2><h3 id="2-1-常用标准库简明解释"><a href="#2-1-常用标准库简明解释" class="headerlink" title="2.1. 常用标准库简明解释"></a>2.1. 常用标准库简明解释</h3><p><strong>核心模块及用途</strong>：</p><ul><li><p><strong><code>os</code></strong>：操作系统交互</p><ul><li>文件/目录操作（路径拼接、删除/创建文件夹）</li><li>环境变量管理（<code>os.environ</code>）</li><li>执行系统命令（<code>os.system</code>）</li></ul></li><li><p><strong><code>sys</code></strong>：解释器交互</p><ul><li>获取命令行参数（<code>sys.argv</code>）</li><li>控制程序退出（<code>sys.exit</code>）</li><li>标准输入/输出重定向</li></ul></li><li><p><strong><code>math</code></strong>：数学运算</p><ul><li>基础数学函数（<code>sqrt</code>/<code>sin</code>/<code>log</code>）</li><li>常数（<code>math.pi</code>/<code>math.e</code>）</li><li>浮点精度处理（<code>math.isclose</code>）</li></ul></li><li><p><strong><code>random</code></strong>：随机生成</p><ul><li>随机数生成（<code>random.randint</code>/<code>random.uniform</code>）</li><li>序列随机化（<code>random.shuffle</code>/<code>random.choice</code>）</li></ul></li></ul><p><strong>常见场景</strong>：</p><ul><li>文件批量处理（<code>os.walk</code>遍历目录树）</li><li>命令行工具开发（<code>sys.argv</code>解析参数）</li><li>数据科学计算（<code>math</code>数学支持）</li><li>游戏开发/抽奖逻辑（<code>random</code>随机行为）</li></ul><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2. 代码示例"></a>2.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os示例：创建目录并检测存在性</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir_path = <span class="string">&quot;data/logs&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_path):</span><br><span class="line">    os.makedirs(dir_path)  <span class="comment"># 递归创建多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sys示例：命令行参数处理</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">f&quot;接收参数: <span class="subst">&#123;sys.argv[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># math示例：球体体积计算</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sphere_volume</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">4</span>/<span class="number">3</span>) * math.pi * r**<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random示例：密码生成器</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">chars = <span class="string">&#x27;abcdefghijkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ23456789&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span>.join(random.sample(chars, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><h3 id="2-3-常见错误及避免方法"><a href="#2-3-常见错误及避免方法" class="headerlink" title="2.3. 常见错误及避免方法"></a>2.3. 常见错误及避免方法</h3><h4 id="错误-1：路径拼接用字符串拼接"><a href="#错误-1：路径拼接用字符串拼接" class="headerlink" title="错误 1：路径拼接用字符串拼接"></a>错误 1：路径拼接用字符串拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&quot;data&quot;</span> + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;file.txt&quot;</span>  <span class="comment"># Windows/Linux路径兼容性问题</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：使用<code>os.path.join(&quot;data&quot;, &quot;file.txt&quot;)</code></p><h4 id="错误-2：误用sys-exit"><a href="#错误-2：误用sys-exit" class="headerlink" title="错误 2：误用sys.exit()"></a>错误 2：误用<code>sys.exit()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> error_occurred:</span><br><span class="line">    print(<span class="string">&quot;错误发生&quot;</span>)</span><br><span class="line">    sys.exit()  <span class="comment"># 默认返回码0（表示成功）</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：明确返回非零错误码：<code>sys.exit(1)</code></p><h4 id="错误-3：random种子管理疏忽"><a href="#错误-3：random种子管理疏忽" class="headerlink" title="错误 3：random种子管理疏忽"></a>错误 3：<code>random</code>种子管理疏忽</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(<span class="number">42</span>)</span><br><span class="line">a = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">b = random.randint(<span class="number">1</span>,<span class="number">100</span>)  <span class="comment"># 每次运行a和b相同，可能非预期</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：仅在需要可重复实验时设置种子</p><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：自动化文件整理"><a href="#场景-1：自动化文件整理" class="headerlink" title="场景 1：自动化文件整理"></a>场景 1：自动化文件整理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">organize_files</span>(<span class="params">source_dir</span>):</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(source_dir):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.jpg&quot;</span>):</span><br><span class="line">            target = os.path.join(<span class="string">&quot;Images&quot;</span>, filename)</span><br><span class="line">            shutil.move(os.path.join(source_dir, filename), target)</span><br></pre></td></tr></table></figure><h4 id="场景-2：科学计算辅助"><a href="#场景-2：科学计算辅助" class="headerlink" title="场景 2：科学计算辅助"></a>场景 2：科学计算辅助</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">monte_carlo_pi</span>(<span class="params">samples</span>):</span></span><br><span class="line">    inside = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(samples):</span><br><span class="line">        x, y = random.random(), random.random()</span><br><span class="line">        <span class="keyword">if</span> math.sqrt(x**<span class="number">2</span> + y**<span class="number">2</span>) &lt;= <span class="number">1</span>:</span><br><span class="line">            inside +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * inside / samples</span><br></pre></td></tr></table></figure><h3 id="2-5-递进练习题"><a href="#2-5-递进练习题" class="headerlink" title="2.5. 递进练习题"></a>2.5. 递进练习题</h3><h4 id="题目-1-二次方程求根公式-初级"><a href="#题目-1-二次方程求根公式-初级" class="headerlink" title="题目 1: 二次方程求根公式(初级)"></a>题目 1: 二次方程求根公式(初级)</h4><ul><li>使用<code>math</code>模块实现二次方程求根公式</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-二次方程求根公式-初级">参考答案</a></p></blockquote><h4 id="题目-2-当前目录代码行数-中级"><a href="#题目-2-当前目录代码行数-中级" class="headerlink" title="题目 2: 当前目录代码行数(中级)"></a>题目 2: 当前目录代码行数(中级)</h4><ul><li>编写脚本用<code>os</code>遍历当前目录，统计所有.py 文件的行数</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-当前目录代码行数-中级">参考答案</a></p></blockquote><h4 id="题目-3-文本过滤器-高级"><a href="#题目-3-文本过滤器-高级" class="headerlink" title="题目 3: 文本过滤器(高级)"></a>题目 3: 文本过滤器(高级)</h4><ul><li>利用<code>sys.stdin</code>实现一个支持管道操作的文本过滤器（如将输入转为大写）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-文本过滤器-高级">参考答案</a></p></blockquote><h3 id="2-6-深度思考问题"><a href="#2-6-深度思考问题" class="headerlink" title="2.6. 深度思考问题"></a>2.6. 深度思考问题</h3><p>当 Python 标准库提供<code>pathlib</code>等更现代的路径操作方式后，为什么很多项目仍然坚持使用<code>os.path</code>？标准库的设计如何在「保持向后兼容」与「拥抱新特性」之间取得平衡？</p><p>（思考方向：历史代码维护成本、开发者习惯迁移、API 设计哲学、性能权衡）</p><p><a href="/archives/202502214537ccef/#Day-3-4：模块与库">返回</a></p><h2 id="3-安装和使用第三方库（pip）"><a href="#3-安装和使用第三方库（pip）" class="headerlink" title="3. 安装和使用第三方库（pip）"></a>3. 安装和使用第三方库（<code>pip</code>）</h2><h3 id="3-1-安装和使用第三方库（pip）简明解释"><a href="#3-1-安装和使用第三方库（pip）简明解释" class="headerlink" title="3.1. 安装和使用第三方库（pip）简明解释"></a>3.1. 安装和使用第三方库（<code>pip</code>）简明解释</h3><p><strong>用途</strong>：</p><ul><li><strong>依赖管理</strong>：安装、升级、卸载第三方库</li><li><strong>生态扩展</strong>：接入 Python 庞大生态系统（如科学计算、Web 开发、机器学习等领域的库）</li><li><strong>版本控制</strong>：指定库的版本号以保持环境一致性</li></ul><p><strong>常见场景</strong>：</p><ul><li>安装项目依赖（如<code>pip install -r requirements.txt</code>）</li><li>快速验证新工具（如<code>pip install jupyterlab</code>启动交互式笔记本）</li><li>开发并分发自己的 Python 包</li></ul><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2. 代码示例"></a>3.2. 代码示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行操作（非Python代码，但属于pip核心使用场景）</span></span><br><span class="line"><span class="comment"># 安装最新版本库</span></span><br><span class="line">pip install requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">pip install numpy==1.21.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地文件安装</span></span><br><span class="line">pip install ./mypackage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装后Python代码中使用</span></span><br><span class="line">import requests</span><br><span class="line">response = requests.get(<span class="string">&quot;https://api.example.com&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3-常见错误及避免方法"><a href="#3-3-常见错误及避免方法" class="headerlink" title="3.3. 常见错误及避免方法"></a>3.3. 常见错误及避免方法</h3><h4 id="错误-1：全局环境污染"><a href="#错误-1：全局环境污染" class="headerlink" title="错误 1：全局环境污染"></a>错误 1：全局环境污染</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas  <span class="comment"># 直接安装到系统Python环境 → 可能引发版本冲突</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>使用虚拟环境：<code>python -m venv myenv &amp;&amp; source myenv/bin/activate</code></li><li>用户级安装：<code>pip install --user pandas</code></li></ul><h4 id="错误-2：依赖版本冲突"><a href="#错误-2：依赖版本冲突" class="headerlink" title="错误 2：依赖版本冲突"></a>错误 2：依赖版本冲突</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PackageA 需要 PackageB&gt;=2.0</span><br><span class="line">PackageC 需要 PackageB&lt;1.8  <span class="comment"># 无法同时满足</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>使用<code>pip freeze &gt; requirements.txt</code>精确记录版本</li><li>借助依赖管理工具（如<code>pipenv</code>/<code>poetry</code>）</li></ul><h4 id="错误-3：权限问题（Linux-macOS）"><a href="#错误-3：权限问题（Linux-macOS）" class="headerlink" title="错误 3：权限问题（Linux/macOS）"></a>错误 3：权限问题（Linux/macOS）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermissionError: [Errno 13] Permission denied: <span class="string">&#x27;/usr/local/lib/python3.9/site-packages&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>避免使用<code>sudo pip install</code> → 改用虚拟环境或<code>--user</code>模式</li></ul><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><h4 id="场景-1：快速构建-REST-API-客户端"><a href="#场景-1：快速构建-REST-API-客户端" class="headerlink" title="场景 1：快速构建 REST API 客户端"></a>场景 1：快速构建 REST API 客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="comment"># pip install requests</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weather</span>(<span class="params">city</span>):</span></span><br><span class="line">    url = <span class="string">f&quot;http://api.weatherapi.com/v1/current.json?key=YOUR_KEY&amp;q=<span class="subst">&#123;city&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).json()</span><br><span class="line"></span><br><span class="line">pprint(get_weather(<span class="string">&quot;Beijing&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="场景-2：数据科学工作流"><a href="#场景-2：数据科学工作流" class="headerlink" title="场景 2：数据科学工作流"></a>场景 2：数据科学工作流</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="comment"># pip install pandas matplotlib</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line">df.plot(kind=<span class="string">&quot;bar&quot;</span>, x=<span class="string">&quot;category&quot;</span>, y=<span class="string">&quot;value&quot;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;output.png&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-5-递进练习题"><a href="#3-5-递进练习题" class="headerlink" title="3.5. 递进练习题"></a>3.5. 递进练习题</h3><h4 id="题目-1-图片转为灰度图-初级"><a href="#题目-1-图片转为灰度图-初级" class="headerlink" title="题目 1: 图片转为灰度图(初级)"></a>题目 1: 图片转为灰度图(初级)</h4><ul><li>安装<code>pillow</code>库并编写脚本将图片转为灰度图</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-图片转为灰度图-初级">参考答案</a></p></blockquote><h4 id="题目-2-项目依赖-中级"><a href="#题目-2-项目依赖-中级" class="headerlink" title="题目 2: 项目依赖(中级)"></a>题目 2: 项目依赖(中级)</h4><ul><li>创建<code>requirements.txt</code>文件管理项目依赖，包含<code>flask&gt;=2.0</code>和<code>sqlalchemy&lt;1.4</code></li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-项目依赖-中级">参考答案</a></p></blockquote><h4 id="题目-3-模块打包上传-高级"><a href="#题目-3-模块打包上传-高级" class="headerlink" title="题目 3: 模块打包上传(高级)"></a>题目 3: 模块打包上传(高级)</h4><ul><li>将自己编写的 Python 模块打包上传至 PyPI，并通过<code>pip</code>安装测试</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-模块打包上传-高级">参考答案</a></p></blockquote><h3 id="3-6-深度思考问题"><a href="#3-6-深度思考问题" class="headerlink" title="3.6. 深度思考问题"></a>3.6. 深度思考问题</h3><p>当开源库的维护者突然删除或恶意篡改 PyPI 上的包时，<code>pip</code>的依赖链机制可能引发怎样的供应链攻击风险？在享受开源便利的同时，开发者应当建立哪些安全防护措施？</p><p>（思考方向：依赖审计工具、镜像源管理、哈希值校验、Lockfile 机制、最小化依赖原则）</p><p><a href="/archives/202502214537ccef/#Day-3-4：模块与库">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个程序，使用 <code>random</code> 模块生成随机密码。</li><li>编写一个程序，使用 <code>os</code> 模块列出当前目录下的所有文件。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/01/pE8qrPs.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="模块与库" scheme="https://www.gaotianyang.top/tags/%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%BA%93/"/>
    
    <category term="导入模块import" scheme="https://www.gaotianyang.top/tags/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97import/"/>
    
    <category term="常用标准库os" scheme="https://www.gaotianyang.top/tags/%E5%B8%B8%E7%94%A8%E6%A0%87%E5%87%86%E5%BA%93os/"/>
    
    <category term="安装和使用第三方库pip" scheme="https://www.gaotianyang.top/tags/%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93pip/"/>
    
  </entry>
  
  <entry>
    <title>Python文件操作与异常处理</title>
    <link href="https://www.gaotianyang.top/archives/20250303d948b0f0/"/>
    <id>https://www.gaotianyang.top/archives/20250303d948b0f0/</id>
    <published>2025-03-03T14:32:35.000Z</published>
    <updated>2025-03-03T14:44:47.271Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDQl8.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-1-2：文件操作与异常处理">返回</a></p><h2 id="1-文件读写"><a href="#1-文件读写" class="headerlink" title="1. 文件读写"></a>1. 文件读写</h2><h3 id="1-1-文件读写简明解释"><a href="#1-1-文件读写简明解释" class="headerlink" title="1.1. 文件读写简明解释"></a>1.1. 文件读写简明解释</h3><p><strong>用途</strong>：</p><ul><li>实现程序与文件系统的数据交互</li><li><strong>读取</strong>：从磁盘加载配置、数据集或日志</li><li><strong>写入</strong>：持久化保存计算结果、生成报告或记录状态</li><li>支持文本模式（字符流）和二进制模式（字节流）</li></ul><p><strong>常见场景</strong>：</p><ul><li>配置文件管理（<code>.ini</code>/<code>.json</code>/<code>.yaml</code>）</li><li>数据持久化（CSV/Excel 文件操作）</li><li>日志记录（实时追加运行日志）</li><li>多媒体文件处理（图片/音频二进制操作）</li></ul><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2. 代码示例"></a>1.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入并读取文本文件（自动处理资源关闭）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_and_read_demo</span>():</span></span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Python文件读写\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;第二行内容&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;demo.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        print(content)</span><br><span class="line"></span><br><span class="line">write_and_read_demo()  <span class="comment"># 输出两行文本</span></span><br></pre></td></tr></table></figure><h3 id="1-3-常见错误及避免方法"><a href="#1-3-常见错误及避免方法" class="headerlink" title="1.3. 常见错误及避免方法"></a>1.3. 常见错误及避免方法</h3><h4 id="错误-1：资源未正确释放"><a href="#错误-1：资源未正确释放" class="headerlink" title="错误 1：资源未正确释放"></a>错误 1：资源未正确释放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">content = f.read()</span><br><span class="line"><span class="comment"># 忘记调用 f.close() → 可能引发文件锁死</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：始终使用<code>with</code>语句上下文管理</p><h4 id="错误-2：路径处理错误"><a href="#错误-2：路径处理错误" class="headerlink" title="错误 2：路径处理错误"></a>错误 2：路径处理错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;../data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 相对路径混乱</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：</p><ul><li>使用<code>os.path</code>模块处理路径</li><li>或使用绝对路径：<code>open(os.path.join(dirname, filename))</code></li></ul><h4 id="错误-3：编码问题"><a href="#错误-3：编码问题" class="headerlink" title="错误 3：编码问题"></a>错误 3：编码问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;中文文件.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 默认编码可能不是utf-8</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：明确指定编码：<code>encoding=&quot;utf-8&quot;</code></p><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><h4 id="场景-1：数据导入-导出"><a href="#场景-1：数据导入-导出" class="headerlink" title="场景 1：数据导入/导出"></a>场景 1：数据导入/导出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_csv</span>(<span class="params">data, filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Name,Age,Score\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;item[<span class="string">&#x27;name&#x27;</span>]&#125;</span>,<span class="subst">&#123;item[<span class="string">&#x27;age&#x27;</span>]&#125;</span>,<span class="subst">&#123;item[<span class="string">&#x27;score&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_from_csv</span>(<span class="params">filename</span>):</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        headers = f.readline().strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            data.append(dict(zip(headers, values)))</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h4 id="场景-2：实时日志记录"><a href="#场景-2：实时日志记录" class="headerlink" title="场景 2：实时日志记录"></a>场景 2：实时日志记录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">message, level=<span class="string">&quot;INFO&quot;</span></span>):</span></span><br><span class="line">    timestamp = datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;app.log&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">f&quot;[<span class="subst">&#123;timestamp&#125;</span>] <span class="subst">&#123;level&#125;</span>: <span class="subst">&#123;message&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">log(<span class="string">&quot;程序启动&quot;</span>)  <span class="comment"># 追加写入日志文件</span></span><br></pre></td></tr></table></figure><h3 id="1-5-递进练习题"><a href="#1-5-递进练习题" class="headerlink" title="1.5. 递进练习题"></a>1.5. 递进练习题</h3><h4 id="题目-1-统计文件的行数-初级"><a href="#题目-1-统计文件的行数-初级" class="headerlink" title="题目 1: 统计文件的行数(初级)"></a>题目 1: 统计文件的行数(初级)</h4><ul><li>编写函数<code>count_lines(filename)</code>，统计指定文本文件的行数</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-统计文件的行数-初级">参考答案</a></p></blockquote><h4 id="题目-2-合并文本文件-中级"><a href="#题目-2-合并文本文件-中级" class="headerlink" title="题目 2: 合并文本文件(中级)"></a>题目 2: 合并文本文件(中级)</h4><ul><li>创建函数<code>merge_files(files, output)</code>，将多个文本文件内容合并到新文件中</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-合并文本文件-中级">参考答案</a></p></blockquote><h4 id="题目-3-文件内容加密保存-高级"><a href="#题目-3-文件内容加密保存-高级" class="headerlink" title="题目 3: 文件内容加密保存(高级)"></a>题目 3: 文件内容加密保存(高级)</h4><ul><li>实现<code>encrypted_copy(src, dst, key)</code>，通过异或运算对文件内容进行加密后写入新文件（处理二进制模式）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-文件内容加密保存-高级">参考答案</a></p></blockquote><h3 id="1-6-深度思考问题"><a href="#1-6-深度思考问题" class="headerlink" title="1.6. 深度思考问题"></a>1.6. 深度思考问题</h3><p>当多个进程同时写入同一个文件时，如何避免数据损坏？在分布式系统中，文件存储方案与数据库存储各自的优劣边界在哪里？</p><p>（思考方向：文件锁机制、原子操作、ACID 特性、海量小文件存储效率、数据一致性要求）</p><p><a href="/archives/202502214537ccef/#Day-1-2：文件操作与异常处理">返回</a></p><h2 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h2><h3 id="2-1-异常处理简明解释"><a href="#2-1-异常处理简明解释" class="headerlink" title="2.1. 异常处理简明解释"></a>2.1. 异常处理简明解释</h3><p><strong>用途</strong>：</p><ul><li>捕获和处理程序运行时的错误，防止程序意外终止</li><li>提供优雅的错误恢复机制，增强程序健壮性</li><li>区分正常逻辑与错误处理逻辑，提升代码可读性</li></ul><p><strong>常见场景</strong>：</p><ul><li>文件/网络操作中的资源不可用（如文件不存在、网络断开）</li><li>用户输入验证（如类型错误、格式错误）</li><li>外部服务调用（如 API 请求超时、数据库连接失败）</li></ul><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2. 代码示例"></a>2.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_divide</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        num = float(input(<span class="string">&quot;输入被除数: &quot;</span>))</span><br><span class="line">        den = float(input(<span class="string">&quot;输入除数: &quot;</span>))</span><br><span class="line">        result = num / den</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">&quot;错误：请输入有效数字&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">&quot;错误：除数不能为零&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f&quot;结果为：<span class="subst">&#123;result:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&quot;运算结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">safe_divide()</span><br></pre></td></tr></table></figure><p><strong>执行示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入被除数: 8</span><br><span class="line">输入除数: 0</span><br><span class="line">错误：除数不能为零</span><br><span class="line">运算结束</span><br></pre></td></tr></table></figure><h3 id="2-3-常见错误及避免方法"><a href="#2-3-常见错误及避免方法" class="headerlink" title="2.3. 常见错误及避免方法"></a>2.3. 常见错误及避免方法</h3><h4 id="错误-1：过度宽泛的异常捕获"><a href="#错误-1：过度宽泛的异常捕获" class="headerlink" title="错误 1：过度宽泛的异常捕获"></a>错误 1：过度宽泛的异常捕获</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 捕获所有异常，隐藏潜在问题</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：明确捕获特定异常类型（如<code>except ValueError</code>）</p><h4 id="错误-2：忽略异常上下文"><a href="#错误-2：忽略异常上下文" class="headerlink" title="错误 2：忽略异常上下文"></a>错误 2：忽略异常上下文</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;data.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(<span class="string">&quot;文件不存在&quot;</span>)  <span class="comment"># 未记录错误细节</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：使用<code>except ... as e</code>获取异常对象，记录日志</p><h4 id="错误-3：资源未正确释放"><a href="#错误-3：资源未正确释放" class="headerlink" title="错误 3：资源未正确释放"></a>错误 3：资源未正确释放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 处理文件</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()  <span class="comment"># 可能漏关资源</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：使用<code>with</code>上下文管理器自动处理资源</p><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：API-调用重试机制"><a href="#场景-1：API-调用重试机制" class="headerlink" title="场景 1：API 调用重试机制"></a>场景 1：API 调用重试机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_data</span>(<span class="params">url, retries=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(retries):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url, timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">        <span class="keyword">except</span> (requests.Timeout, requests.ConnectionError) <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;网络错误：<span class="subst">&#123;e&#125;</span>，剩余重试次数：<span class="subst">&#123;retries-_&#125;</span>&quot;</span>)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;API请求失败&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="场景-2：数据库事务回滚"><a href="#场景-2：数据库事务回滚" class="headerlink" title="场景 2：数据库事务回滚"></a>场景 2：数据库事务回滚</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user_balance</span>(<span class="params">user_id, amount</span>):</span></span><br><span class="line">    conn = sqlite3.connect(<span class="string">&quot;bank.db&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(<span class="string">&quot;UPDATE accounts SET balance = balance + ? WHERE user_id = ?&quot;</span>, (amount, user_id))</span><br><span class="line">        <span class="keyword">if</span> amount &lt; <span class="number">0</span>:  <span class="comment"># 模拟业务规则校验</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;转账金额不能为负&quot;</span>)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        conn.rollback()</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h3 id="2-5-递进练习题"><a href="#2-5-递进练习题" class="headerlink" title="2.5. 递进练习题"></a>2.5. 递进练习题</h3><h4 id="题目-1-读取用户年龄函数-初级"><a href="#题目-1-读取用户年龄函数-初级" class="headerlink" title="题目 1: 读取用户年龄函数(初级)"></a>题目 1: 读取用户年龄函数(初级)</h4><ul><li>编写读取用户年龄的函数，处理非数字输入异常</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-读取用户年龄函数-初级">参考答案</a></p></blockquote><h4 id="题目-2-文件复制函数-中级"><a href="#题目-2-文件复制函数-中级" class="headerlink" title="题目 2: 文件复制函数(中级)"></a>题目 2: 文件复制函数(中级)</h4><ul><li>创建文件复制函数，处理源文件不存在和目标路径无权限的情况</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-文件复制函数-中级">参考答案</a></p></blockquote><h4 id="题目-3-用户注册验证-高级"><a href="#题目-3-用户注册验证-高级" class="headerlink" title="题目 3: 用户注册验证(高级)"></a>题目 3: 用户注册验证(高级)</h4><ul><li>实现带有自定义异常类（<code>InvalidEmailError</code>）的用户注册验证系统</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-用户注册验证-高级">参考答案</a></p></blockquote><h3 id="2-6-深度思考问题"><a href="#2-6-深度思考问题" class="headerlink" title="2.6. 深度思考问题"></a>2.6. 深度思考问题</h3><p>当异常处理机制被过度使用时（例如将所有业务逻辑错误都转换为异常），是否会模糊程序正常流程与错误状态的边界？与返回错误码的传统方式相比，异常处理在软件工程层面带来了哪些范式转变？</p><p>（思考方向：防御式编程与契约式编程的差异、异常对控制流的影响、栈展开的代价、错误处理策略的可维护性）</p><p><a href="/archives/202502214537ccef/#Day-1-2：文件操作与异常处理">返回</a></p><h2 id="3-课后练习"><a href="#3-课后练习" class="headerlink" title="3. 课后练习"></a>3. 课后练习</h2><ul><li>编写一个程序，读取一个文本文件并统计行数。</li><li>编写一个程序，处理用户输入时的异常（如非数字输入）。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDQl8.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="文件操作" scheme="https://www.gaotianyang.top/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    <category term="异常处理" scheme="https://www.gaotianyang.top/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="文件读写" scheme="https://www.gaotianyang.top/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Python数据结构</title>
    <link href="https://www.gaotianyang.top/archives/2025030222c892e4/"/>
    <id>https://www.gaotianyang.top/archives/2025030222c892e4/</id>
    <published>2025-03-02T01:05:00.000Z</published>
    <updated>2025-03-02T11:05:03.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDl6S.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h2><h3 id="1-1-列表的解释"><a href="#1-1-列表的解释" class="headerlink" title="1.1. 列表的解释"></a>1.1. 列表的解释</h3><p><strong>列表</strong>是 Python 中的有序可变容器，可存储任意数据类型（包括其他列表）。元素通过方括号<code>[]</code>定义，用逗号分隔。</p><ul><li><strong>用途</strong>：批量存储/管理数据、动态增删元素、排序/过滤数据</li><li><strong>常见场景</strong>：临时存储用户输入、处理 CSV 文件内容、保存算法中间结果</li></ul><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2. 代码示例"></a>1.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建混合类型列表</span></span><br><span class="line">my_list = [<span class="number">3</span>, <span class="string">&quot;apple&quot;</span>, <span class="literal">True</span>, <span class="number">2.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问和修改元素</span></span><br><span class="line">print(my_list[<span class="number">1</span>])  <span class="comment"># 输出：apple</span></span><br><span class="line">my_list[<span class="number">0</span>] = <span class="number">99</span>    <span class="comment"># 修改第一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加/删除元素</span></span><br><span class="line">my_list.append(<span class="string">&quot;new_item&quot;</span>)</span><br><span class="line">popped = my_list.pop(<span class="number">2</span>)  <span class="comment"># 移除并返回第三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作</span></span><br><span class="line">sub_list = my_list[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 获取索引1到2的元素</span></span><br></pre></td></tr></table></figure><h3 id="1-3-常见错误与避免方法"><a href="#1-3-常见错误与避免方法" class="headerlink" title="1.3. 常见错误与避免方法"></a>1.3. 常见错误与避免方法</h3><h4 id="错误-1：索引越界"><a href="#错误-1：索引越界" class="headerlink" title="错误 1：索引越界"></a>错误 1：索引越界</h4><p>尝试访问<code>list[5]</code>但列表只有 3 个元素</p><p><strong>修正</strong>：使用前检查长度：<code>if index &lt; len(my_list)</code></p><h4 id="错误-2：混淆引用复制与值复制"><a href="#错误-2：混淆引用复制与值复制" class="headerlink" title="错误 2：混淆引用复制与值复制"></a>错误 2：混淆引用复制与值复制</h4><p>直接<code>new_list = old_list</code>会导致两个列表关联</p><p><strong>修正</strong>：使用<code>new_list = old_list.copy()</code>或切片<code>new_list = old_list[:]</code></p><h4 id="错误-3：在循环中修改列表长度"><a href="#错误-3：在循环中修改列表长度" class="headerlink" title="错误 3：在循环中修改列表长度"></a>错误 3：在循环中修改列表长度</h4><p>遍历时删除元素会导致索引错乱</p><p><strong>修正</strong>：遍历副本：<code>for item in list.copy():</code></p><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><h4 id="场景-1：数据预处理"><a href="#场景-1：数据预处理" class="headerlink" title="场景 1：数据预处理"></a>场景 1：数据预处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤温度数据中异常值</span></span><br><span class="line">temperatures = [<span class="number">22</span>, <span class="number">35</span>, <span class="number">-5</span>, <span class="number">18</span>, <span class="number">45</span>]</span><br><span class="line">valid_temps = [t <span class="keyword">for</span> t <span class="keyword">in</span> temperatures <span class="keyword">if</span> <span class="number">0</span> &lt;= t &lt;= <span class="number">40</span>]</span><br></pre></td></tr></table></figure><h4 id="场景-2：游戏开发"><a href="#场景-2：游戏开发" class="headerlink" title="场景 2：游戏开发"></a>场景 2：游戏开发</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理玩家背包物品</span></span><br><span class="line">inventory = [<span class="string">&quot;sword&quot;</span>, <span class="string">&quot;potion&quot;</span>, <span class="string">&quot;key&quot;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_item</span>(<span class="params">item</span>):</span></span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> inventory:</span><br><span class="line">        inventory.remove(item)</span><br><span class="line">        print(<span class="string">f&quot;Used <span class="subst">&#123;item&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-5-递进练习题"><a href="#1-5-递进练习题" class="headerlink" title="1.5. 递进练习题"></a>1.5. 递进练习题</h3><h4 id="题目-1-计算平均值-初级"><a href="#题目-1-计算平均值-初级" class="headerlink" title="题目 1:计算平均值(初级)"></a>题目 1:计算平均值(初级)</h4><ul><li>创建包含 10 个随机整数的列表（范围 1-100），计算它们的平均值</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-计算平均值-初级">参考答案</a></p></blockquote><h4 id="题目-2-合并列表并排序-中级"><a href="#题目-2-合并列表并排序-中级" class="headerlink" title="题目 2:合并列表并排序(中级)"></a>题目 2:合并列表并排序(中级)</h4><ul><li>合并两个已排序列表（如[1,3,5]和[2,4,6]），保持结果列表有序</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-合并列表并排序-中级">参考答案</a></p></blockquote><h4 id="题目-3-矩阵转置-高级"><a href="#题目-3-矩阵转置-高级" class="headerlink" title="题目 3:矩阵转置(高级)"></a>题目 3:矩阵转置(高级)</h4><ul><li>实现矩阵转置函数，输入如[[1,2],[3,4],[5,6]]，返回[[1,3,5],[2,4,6]]</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-矩阵转置-高级">参考答案</a></p></blockquote><h3 id="1-6-深度思考问题"><a href="#1-6-深度思考问题" class="headerlink" title="1.6. 深度思考问题"></a>1.6. 深度思考问题</h3><p>当列表存储超过 100 万条数据时，频繁在列表开头插入/删除元素（时间复杂度 O(n)）会导致性能问题。如何通过选择其他数据结构（如<code>collections.deque</code>）优化这类操作？这种取舍体现了计算机科学中哪些底层原理？</p><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="2-字典"><a href="#2-字典" class="headerlink" title="2. 字典"></a>2. 字典</h2><h3 id="2-1-字典的解释"><a href="#2-1-字典的解释" class="headerlink" title="2.1. 字典的解释"></a>2.1. 字典的解释</h3><p><strong>字典</strong>是 Python 中的无序键值对集合，用花括号<code>&#123;&#125;</code>表示，通过唯一键（不可变类型）快速访问值。</p><ul><li><strong>用途</strong>：快速数据查找、存储结构化数据、配置参数管理</li><li><strong>常见场景</strong>：JSON 数据处理、数据库查询结果缓存、替代多个<code>if-else</code>的条件映射</li></ul><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2. 代码示例"></a>2.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建学生信息字典</span></span><br><span class="line">student = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;courses&quot;</span>: [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Physics&quot;</span>],</span><br><span class="line">    <span class="string">&quot;active&quot;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问/修改值</span></span><br><span class="line">print(student.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Unknown&quot;</span>))  <span class="comment"># 安全获取值</span></span><br><span class="line">student[<span class="string">&quot;graduated&quot;</span>] = <span class="literal">False</span>           <span class="comment"># 新增键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> student.items():</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">squared = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;  <span class="comment"># &#123;0:0, 1:1, 2:4...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-常见错误与避免方法"><a href="#2-3-常见错误与避免方法" class="headerlink" title="2.3. 常见错误与避免方法"></a>2.3. 常见错误与避免方法</h3><h4 id="错误-1：直接访问不存在的键"><a href="#错误-1：直接访问不存在的键" class="headerlink" title="错误 1：直接访问不存在的键"></a>错误 1：直接访问不存在的键</h4><p><code>print(student[&quot;age&quot;])</code> 会引发<code>KeyError</code></p><p><strong>修正</strong>：用<code>student.get(&quot;age&quot;, 0)</code>或<code>if &quot;age&quot; in student</code></p><h4 id="错误-2：误认为字典有序"><a href="#错误-2：误认为字典有序" class="headerlink" title="错误 2：误认为字典有序"></a>错误 2：误认为字典有序</h4><p>在 Python 3.7 之前字典不保证顺序</p><p><strong>修正</strong>：需要有序时使用<code>collections.OrderedDict</code></p><h4 id="错误-3：使用可变类型作为键"><a href="#错误-3：使用可变类型作为键" class="headerlink" title="错误 3：使用可变类型作为键"></a>错误 3：使用可变类型作为键</h4><p>如<code>dict_key = &#123;[1,2]: &quot;value&quot;&#125;</code>会报错</p><p><strong>修正</strong>：键必须为不可变类型（数字/字符串/元组）</p><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：缓存计算结果"><a href="#场景-1：缓存计算结果" class="headerlink" title="场景 1：缓存计算结果"></a>场景 1：缓存计算结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cache = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> cache: <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> n</span><br><span class="line">    cache[n] = fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">return</span> cache[n]</span><br></pre></td></tr></table></figure><h4 id="场景-2：数据分组统计"><a href="#场景-2：数据分组统计" class="headerlink" title="场景 2：数据分组统计"></a>场景 2：数据分组统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按城市分组统计销售额</span></span><br><span class="line">sales = [</span><br><span class="line">    &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;amount&quot;</span>: <span class="number">200</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;Shanghai&quot;</span>, <span class="string">&quot;amount&quot;</span>: <span class="number">300</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;Beijing&quot;</span>, <span class="string">&quot;amount&quot;</span>: <span class="number">150</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">city_stats = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> sales:</span><br><span class="line">    key = record[<span class="string">&quot;city&quot;</span>]</span><br><span class="line">    city_stats[key] = city_stats.get(key, <span class="number">0</span>) + record[<span class="string">&quot;amount&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-5-递进练习题"><a href="#2-5-递进练习题" class="headerlink" title="2.5. 递进练习题"></a>2.5. 递进练习题</h3><h4 id="题目-1-统计字符出现次数-初级"><a href="#题目-1-统计字符出现次数-初级" class="headerlink" title="题目 1: 统计字符出现次数(初级)"></a>题目 1: 统计字符出现次数(初级)</h4><ul><li>编写函数统计字符串中各字符出现次数（如”hello”返回{‘h’:1, ‘e’:1, ‘l’:2, ‘o’:1}）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-统计字符出现次数-初级">参考答案</a></p></blockquote><h4 id="题目-2-合并字典-中级"><a href="#题目-2-合并字典-中级" class="headerlink" title="题目 2: 合并字典(中级)"></a>题目 2: 合并字典(中级)</h4><ul><li>合并两个字典，若键冲突则保留第二个字典的值</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-合并字典-中级">参考答案</a></p></blockquote><h4 id="题目-3-扁平化-高级"><a href="#题目-3-扁平化-高级" class="headerlink" title="题目 3: 扁平化(高级)"></a>题目 3: 扁平化(高级)</h4><ul><li>实现嵌套字典的扁平化，将<code>&#123;&#39;a&#39;:1, &#39;b&#39;:&#123;&#39;c&#39;:2, &#39;d&#39;:&#123;&#39;e&#39;:3&#125;&#125;&#125;</code>转换为<code>&#123;&#39;a&#39;:1, &#39;b.c&#39;:2, &#39;b.d.e&#39;:3&#125;</code></li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-扁平化-高级">参考答案</a></p></blockquote><h3 id="2-6-思考问题"><a href="#2-6-思考问题" class="headerlink" title="2.6. 思考问题"></a>2.6. 思考问题</h3><p>Python 字典底层采用哈希表实现，当字典扩容时会发生 rehash 操作。如果字典被用作全局缓存且包含百万级键值对，频繁的 rehash 会带来性能问题。如何通过预分配空间（如<code>dict.fromkeys</code>预先填充键）优化性能？这反映了数据结构设计中哪些重要原则？</p><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="3-元组和集合"><a href="#3-元组和集合" class="headerlink" title="3. 元组和集合"></a>3. 元组和集合</h2><h3 id="3-1-元组和集合的解释"><a href="#3-1-元组和集合的解释" class="headerlink" title="3.1. 元组和集合的解释"></a>3.1. 元组和集合的解释</h3><h4 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h4><ul><li>不可变有序序列，用圆括号<code>()</code>定义</li><li><strong>用途</strong>：存储不可修改的数据（如坐标/日期）、作为字典键、函数多返回值</li><li><strong>场景</strong>：数据库查询结果、常量集合、保护敏感数据不被修改</li></ul><h4 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h4><ul><li>可变无序容器，元素唯一且不可重复，用花括号<code>&#123;&#125;</code>或<code>set()</code>创建</li><li><strong>用途</strong>：快速成员检测、数据去重、集合运算（交/并/差）</li><li><strong>场景</strong>：用户行为日志去重、好友关系计算、屏蔽词过滤</li></ul><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2. 代码示例"></a>3.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组操作示例</span></span><br><span class="line">coordinates = (<span class="number">40.7128</span>, <span class="number">-74.0060</span>)  <span class="comment"># 经纬度元组</span></span><br><span class="line">print(coordinates[<span class="number">0</span>])              <span class="comment"># 访问元素 → 40.7128</span></span><br><span class="line">rgb = tuple([<span class="number">255</span>, <span class="number">128</span>, <span class="number">64</span>])        <span class="comment"># 将列表转为元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合操作示例</span></span><br><span class="line">unique_nums = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>&#125;      <span class="comment"># 自动去重 → &#123;2,5,8&#125;</span></span><br><span class="line">setA = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">setB = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">print(setA | setB)                 <span class="comment"># 并集 → &#123;1,2,3,4,5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-常见错误与避免方法"><a href="#3-3-常见错误与避免方法" class="headerlink" title="3.3. 常见错误与避免方法"></a>3.3. 常见错误与避免方法</h3><h4 id="元组相关错误"><a href="#元组相关错误" class="headerlink" title="元组相关错误"></a>元组相关错误</h4><h5 id="错误-1：尝试修改元组元素"><a href="#错误-1：尝试修改元组元素" class="headerlink" title="错误 1：尝试修改元组元素"></a>错误 1：尝试修改元组元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">t[<span class="number">0</span>] = <span class="number">5</span>  <span class="comment"># TypeError</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>： 重新创建新元组：<code>t = (5,) + t[1:]</code></p><h5 id="错误-2：忽略单元素元组的逗号"><a href="#错误-2：忽略单元素元组的逗号" class="headerlink" title="错误 2：忽略单元素元组的逗号"></a>错误 2：忽略单元素元组的逗号</h5><p><code>single = (5)</code> 实际是 int 类型 → 正确写法：<code>single = (5,)</code></p><h4 id="集合相关错误"><a href="#集合相关错误" class="headerlink" title="集合相关错误"></a>集合相关错误</h4><h5 id="错误-1：用索引访问集合元素"><a href="#错误-1：用索引访问集合元素" class="headerlink" title="错误 1：用索引访问集合元素"></a>错误 1：用索引访问集合元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>&#125;</span><br><span class="line">print(s[<span class="number">0</span>])  <span class="comment"># TypeError: &#x27;set&#x27; is not subscriptable</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：先转为列表：<code>list(s)[0]</code>（但会破坏无序特性）</p><h5 id="错误-2：混淆集合与字典语法"><a href="#错误-2：混淆集合与字典语法" class="headerlink" title="错误 2：混淆集合与字典语法"></a>错误 2：混淆集合与字典语法</h5><p><code>&#123;&#125;</code>表示空字典 → 创建空集合必须用<code>set()</code></p><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><h4 id="场景-1：用户权限组管理（集合）"><a href="#场景-1：用户权限组管理（集合）" class="headerlink" title="场景 1：用户权限组管理（集合）"></a>场景 1：用户权限组管理（集合）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">admin_roles = &#123;<span class="string">&quot;superuser&quot;</span>, <span class="string">&quot;editor&quot;</span>&#125;</span><br><span class="line">user_roles = &#123;<span class="string">&quot;viewer&quot;</span>, <span class="string">&quot;editor&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查权限交集</span></span><br><span class="line"><span class="keyword">if</span> admin_roles &amp; user_roles:</span><br><span class="line">    print(<span class="string">&quot;有部分管理权限&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="场景-2：股票交易记录（元组）"><a href="#场景-2：股票交易记录（元组）" class="headerlink" title="场景 2：股票交易记录（元组）"></a>场景 2：股票交易记录（元组）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不可变的交易记录</span></span><br><span class="line">transaction = (</span><br><span class="line">    <span class="string">&quot;AAPL&quot;</span>,</span><br><span class="line">    datetime(<span class="number">2023</span>,<span class="number">8</span>,<span class="number">15</span>),</span><br><span class="line">    (<span class="string">&quot;buy&quot;</span>, <span class="number">175.50</span>, <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 作为字典键</span></span><br><span class="line">history = &#123;transaction: <span class="string">&quot;pending&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-递进练习题"><a href="#3-5-递进练习题" class="headerlink" title="3.5. 递进练习题"></a>3.5. 递进练习题</h3><h4 id="题目-1-集合去重-初级"><a href="#题目-1-集合去重-初级" class="headerlink" title="题目 1: 集合去重(初级)"></a>题目 1: 集合去重(初级)</h4><ul><li>将列表<code>[&quot;cat&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;]</code>转换为集合去重，再转回排序后的列表</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-集合去重-初级">参考答案</a></p></blockquote><h4 id="题目-2-变位词判断-中级"><a href="#题目-2-变位词判断-中级" class="headerlink" title="题目 2: 变位词判断(中级)"></a>题目 2: 变位词判断(中级)</h4><ul><li>编写函数判断两个字符串是否为变位词（字母组成相同），使用集合优化效率</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-变位词判断-中级">参考答案</a></p></blockquote><h4 id="题目-3-不可变元组存储实验数据-高级"><a href="#题目-3-不可变元组存储实验数据-高级" class="headerlink" title="题目 3: 不可变元组存储实验数据(高级)"></a>题目 3: 不可变元组存储实验数据(高级)</h4><ul><li>实现多组实验数据的不可变存储结构，每个实验包含（实验名称，时间戳，温度值元组）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-不可变元组存储实验数据-高级">参考答案</a></p></blockquote><h3 id="3-6-思考问题"><a href="#3-6-思考问题" class="headerlink" title="3.6. 思考问题"></a>3.6. 思考问题</h3><p>元组的不可变特性使其在并发编程中具有线程安全优势，而集合的哈希表实现带来 O(1)查询时间复杂度。当处理 10 亿级数据时，如何利用元组的内存优化特性（相比列表节省约 20%内存）和集合的快速去重能力协同提升系统性能？这反映了冯·诺依曼体系结构中哪些关键特性的取舍？</p><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个程序，统计一段文本中每个单词的出现次数。</li><li>编写一个程序，合并两个列表并去重。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDl6S.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="数据结构" scheme="https://www.gaotianyang.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="列表" scheme="https://www.gaotianyang.top/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="字典" scheme="https://www.gaotianyang.top/tags/%E5%AD%97%E5%85%B8/"/>
    
    <category term="元组和集合" scheme="https://www.gaotianyang.top/tags/%E5%85%83%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://www.gaotianyang.top/archives/20250228c8f562d1/"/>
    <id>https://www.gaotianyang.top/archives/20250228c8f562d1/</id>
    <published>2025-02-28T01:04:54.000Z</published>
    <updated>2025-03-01T14:30:16.546Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDMSf.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h2><h3 id="1-1-函数定义简明解释"><a href="#1-1-函数定义简明解释" class="headerlink" title="1.1. 函数定义简明解释"></a>1.1. 函数定义简明解释</h3><p>函数是组织可重用代码块的容器，用于执行特定任务。它们能：</p><ul><li>减少重复代码</li><li>提高可读性</li><li>实现模块化开发</li><li>支持参数化行为</li></ul><p><strong>常见场景</strong>：</p><ul><li>频繁执行相同逻辑时（如数据清洗）</li><li>需要分解复杂任务时（如电商订单处理）</li><li>参数化不同输入时（如数学公式计算）</li></ul><h3 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2. 代码示例"></a>1.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 温度转换函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">celsius_to_fahrenheit</span>(<span class="params">c_temp</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将摄氏温度转换为华氏温度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> c_temp * <span class="number">9</span>/<span class="number">5</span> + <span class="number">32</span></span><br><span class="line"></span><br><span class="line">print(celsius_to_fahrenheit(<span class="number">25</span>))  <span class="comment"># 输出 77.0</span></span><br></pre></td></tr></table></figure><h3 id="1-3-常见错误及避免方法"><a href="#1-3-常见错误及避免方法" class="headerlink" title="1.3. 常见错误及避免方法"></a>1.3. 常见错误及避免方法</h3><h4 id="错误-1：忽略返回值"><a href="#错误-1：忽略返回值" class="headerlink" title="错误 1：忽略返回值"></a>错误 1：忽略返回值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    print(a + b)  <span class="comment"># 应该用 return</span></span><br><span class="line">result = add(<span class="number">3</span>,<span class="number">5</span>)  <span class="comment"># 得到 None</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>: 明确使用<code>return</code>语句</li></ul><h4 id="错误-2：修改可变默认参数"><a href="#错误-2：修改可变默认参数" class="headerlink" title="错误 2：修改可变默认参数"></a>错误 2：修改可变默认参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_item</span>(<span class="params">item, lst=[]</span>):</span>  <span class="comment"># 默认列表会持续存在</span></span><br><span class="line">    lst.append(item)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>: <code>def append_item(item, lst=None): lst = lst or []</code></li></ul><h4 id="错误-3：参数顺序混淆"><a href="#错误-3：参数顺序混淆" class="headerlink" title="错误 3：参数顺序混淆"></a>错误 3：参数顺序混淆</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">divide(<span class="number">5</span>)  <span class="comment"># 缺少必要参数</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>: 使用关键字参数或检查参数完整性</li></ul><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><h4 id="场景-1：数据验证管道"><a href="#场景-1：数据验证管道" class="headerlink" title="场景 1：数据验证管道"></a>场景 1：数据验证管道</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_email</span>(<span class="params">email</span>):</span></span><br><span class="line">    <span class="comment"># 检查格式有效性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;@&quot;</span> <span class="keyword">in</span> email <span class="keyword">and</span> <span class="string">&quot;.&quot;</span> <span class="keyword">in</span> email.split(<span class="string">&quot;@&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_user_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> validate_email(data[<span class="string">&quot;email&quot;</span>]):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid email&quot;</span>)</span><br><span class="line">    <span class="comment"># 其他处理...</span></span><br></pre></td></tr></table></figure><h4 id="场景-2：动态报告生成"><a href="#场景-2：动态报告生成" class="headerlink" title="场景 2：动态报告生成"></a>场景 2：动态报告生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_report</span>(<span class="params">data, format=<span class="string">&quot;markdown&quot;</span></span>):</span></span><br><span class="line">    template = choose_template(format)</span><br><span class="line">    apply_styling(template)</span><br><span class="line">    insert_statistics(data)</span><br><span class="line">    <span class="keyword">return</span> compile_report()</span><br></pre></td></tr></table></figure><h3 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5. 练习题"></a>1.5. 练习题</h3><h4 id="题目-1-计算矩形周长-初级"><a href="#题目-1-计算矩形周长-初级" class="headerlink" title="题目 1: 计算矩形周长(初级)"></a>题目 1: 计算矩形周长(初级)</h4><ul><li>创建计算矩形周长的函数，参数为长和宽</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-计算矩形周长-初级">参考答案</a></p></blockquote><h4 id="题目-2-计算平均值-中级"><a href="#题目-2-计算平均值-中级" class="headerlink" title="题目 2: 计算平均值(中级)"></a>题目 2: 计算平均值(中级)</h4><ul><li>编写支持可变数量参数的函数，计算任意个数数字的平均值</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-计算平均值-中级">参考答案</a></p></blockquote><h4 id="题目-3-生成斐波那契数列-高级"><a href="#题目-3-生成斐波那契数列-高级" class="headerlink" title="题目 3: 生成斐波那契数列(高级)"></a>题目 3: 生成斐波那契数列(高级)</h4><ul><li>实现记忆化（memoization）的斐波那契数列生成函数，要求通过装饰器实现缓存</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-生成斐波那契数列-高级">参考答案</a></p></blockquote><h3 id="1-6-深度思考问题"><a href="#1-6-深度思考问题" class="headerlink" title="1.6. 深度思考问题"></a>1.6. 深度思考问题</h3><p>当函数可以接受其他函数作为参数时（高阶函数），这种特性如何从根本上改变了我们组织代码的方式？这种设计模式在哪些场景下可能成为双刃剑？</p><p>（思考方向：函数式编程范式、回调机制、代码抽象层次、调试复杂度之间的平衡）</p><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="2-函数参数与返回值"><a href="#2-函数参数与返回值" class="headerlink" title="2. 函数参数与返回值"></a>2. 函数参数与返回值</h2><h3 id="2-1-函数参数与返回值简明解释"><a href="#2-1-函数参数与返回值简明解释" class="headerlink" title="2.1. 函数参数与返回值简明解释"></a>2.1. 函数参数与返回值简明解释</h3><ul><li><strong>参数</strong>：接收外部输入，使函数具有灵活性，支持：<ul><li>位置参数（按顺序传递）</li><li>关键字参数（按名称传递）</li><li>默认参数（预定义默认值）</li><li>可变参数（<code>*args</code>和<code>**kwargs</code>）</li></ul></li><li><strong>返回值</strong>：将计算结果传递回调用者，可用<code>return</code>返回单个值、元组（多值）或对象。</li></ul><p><strong>常见场景</strong>：</p><ul><li>动态配置函数行为（如设置阈值、选项开关）</li><li>处理不同输入源（如文件、API 响应）</li><li>实现链式调用（函数的返回值作为另一个函数的输入）</li></ul><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2. 代码示例"></a>2.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算矩形面积（含默认参数和返回值）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_area</span>(<span class="params">length, width=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算面积，默认宽度为1（视为线段）&quot;&quot;&quot;</span></span><br><span class="line">    area = length * width</span><br><span class="line">    <span class="keyword">return</span> area, <span class="string">f&quot;Area: <span class="subst">&#123;area&#125;</span> units²&quot;</span>  <span class="comment"># 返回元组（数值+描述）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方式对比</span></span><br><span class="line">print(calculate_area(<span class="number">5</span>))        <span class="comment"># 位置参数 (5, 1) → (5, &quot;Area:5 units²&quot;)</span></span><br><span class="line">print(calculate_area(width=<span class="number">3</span>, length=<span class="number">4</span>))  <span class="comment"># 关键字参数 → (12, &quot;Area:12 units²&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-常见错误及避免方法"><a href="#2-3-常见错误及避免方法" class="headerlink" title="2.3. 常见错误及避免方法"></a>2.3. 常见错误及避免方法</h3><h4 id="错误-1：误用可变默认参数"><a href="#错误-1：误用可变默认参数" class="headerlink" title="错误 1：误用可变默认参数"></a>错误 1：误用可变默认参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_item</span>(<span class="params">item, items=[]</span>):</span>  <span class="comment"># 默认列表会被所有调用共享！</span></span><br><span class="line">    items.append(item)</span><br><span class="line">    <span class="keyword">return</span> items</span><br><span class="line">add_item(<span class="number">1</span>)  <span class="comment"># [1]</span></span><br><span class="line">add_item(<span class="number">2</span>)  <span class="comment"># [1,2]（非预期）</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>:<code>def add_item(item, items=None): items = items or []</code></li></ul><h4 id="错误-2：忽略返回值类型"><a href="#错误-2：忽略返回值类型" class="headerlink" title="错误 2：忽略返回值类型"></a>错误 2：忽略返回值类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Fetching data...&quot;</span>)  <span class="comment"># 忘记return → 返回None</span></span><br><span class="line">user = get_user()  <span class="comment"># user 是 None</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>:明确区分“操作”函数（无返回值）和“计算”函数（必须返回数据）</li></ul><h4 id="错误-3：混淆参数顺序"><a href="#错误-3：混淆参数顺序" class="headerlink" title="错误 3：混淆参数顺序"></a>错误 3：混淆参数顺序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">host, port=<span class="number">80</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">connect(port=<span class="number">443</span>, <span class="string">&quot;api.server.com&quot;</span>)  <span class="comment"># 位置参数不能在关键字参数后</span></span><br></pre></td></tr></table></figure><ul><li><strong>避免方法</strong>:位置参数在前，关键字参数在后：<code>connect(&quot;api.server.com&quot;, port=443)</code></li></ul><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：动态数据处理管道"><a href="#场景-1：动态数据处理管道" class="headerlink" title="场景 1：动态数据处理管道"></a>场景 1：动态数据处理管道</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">data, filter_func=None, format=<span class="string">&quot;json&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> filter_func:  <span class="comment"># 接受函数作为参数</span></span><br><span class="line">        data = filter_func(data)</span><br><span class="line">    <span class="keyword">if</span> format == <span class="string">&quot;csv&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> convert_to_csv(data)</span><br><span class="line">    <span class="keyword">return</span> data  <span class="comment"># 返回处理后的数据</span></span><br></pre></td></tr></table></figure><h4 id="场景-2：配置生成器"><a href="#场景-2：配置生成器" class="headerlink" title="场景 2：配置生成器"></a>场景 2：配置生成器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_config</span>(<span class="params">api_key, timeout=<span class="number">10</span>, retries=<span class="number">3</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;auth&quot;</span>: &#123;<span class="string">&quot;key&quot;</span>: api_key&#125;,</span><br><span class="line">        <span class="string">&quot;network&quot;</span>: &#123;<span class="string">&quot;timeout&quot;</span>: timeout, <span class="string">&quot;retries&quot;</span>: retries&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 返回结构化配置对象供其他模块使用</span></span><br></pre></td></tr></table></figure><h3 id="2-5-递进练习题"><a href="#2-5-递进练习题" class="headerlink" title="2.5. 递进练习题"></a>2.5. 递进练习题</h3><h4 id="题目-1-拼接字符串-初级"><a href="#题目-1-拼接字符串-初级" class="headerlink" title="题目 1 拼接字符串(初级)"></a>题目 1 拼接字符串(初级)</h4><ul><li>编写函数<code>greet(name, greeting=&quot;Hello&quot;)</code>，返回拼接的问候字符串（如<code>&quot;Hello, Alice!&quot;</code>）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-拼接字符串-初级">参考答案</a></p></blockquote><h4 id="题目-2-任意参数求和-中级"><a href="#题目-2-任意参数求和-中级" class="headerlink" title="题目 2 任意参数求和(中级)"></a>题目 2 任意参数求和(中级)</h4><ul><li>实现函数<code>sum_numbers(*args)</code>，接受任意数量的数字参数并返回总和，若无参数返回 0</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-任意参数求和-中级">参考答案</a></p></blockquote><h4 id="题目-3-任意参数求积-高级"><a href="#题目-3-任意参数求积-高级" class="headerlink" title="题目 3 任意参数求积(高级)"></a>题目 3 任意参数求积(高级)</h4><ul><li>设计函数<code>apply_operation(func, *args, **kwargs)</code>，接受一个函数和其参数，执行后返回结果（如调用<code>apply_operation(pow, 2, 3)</code>返回 8）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-任意参数求积-高级">参考答案</a></p></blockquote><h3 id="2-6-深度思考问题"><a href="#2-6-深度思考问题" class="headerlink" title="2.6. 深度思考问题"></a>2.6. 深度思考问题</h3><p>当函数可以返回其他函数（闭包）时，这种能力如何影响程序的状态管理？在哪些场景下，返回函数可能比直接返回数据更具优势或风险？</p><p>（思考方向：延迟执行、状态封装、装饰器模式、内存泄漏风险、调试复杂度）</p><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="3-局部变量与全局变量"><a href="#3-局部变量与全局变量" class="headerlink" title="3. 局部变量与全局变量"></a>3. 局部变量与全局变量</h2><h3 id="3-1-局部变量与全局变量简明解释"><a href="#3-1-局部变量与全局变量简明解释" class="headerlink" title="3.1. 局部变量与全局变量简明解释"></a>3.1. 局部变量与全局变量简明解释</h3><ul><li><strong>全局变量</strong>：在函数外定义，整个程序可见，用于存储共享数据（如配置参数、公共状态）</li><li><strong>局部变量</strong>：在函数内定义，仅在函数作用域内有效，用于封装临时计算数据</li></ul><p><strong>常见场景</strong>：</p><ul><li>全局变量：多函数共享的常量（如 API 密钥、日志级别）</li><li>局部变量：函数内部中间计算结果（如循环计数器、临时缓存）</li></ul><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2. 代码示例"></a>3.2. 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量</span></span><br><span class="line">MAX_RETRIES = <span class="number">3</span>  <span class="comment"># 全局常量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="comment"># 局部变量</span></span><br><span class="line">    attempt = <span class="number">0</span>  <span class="comment"># 仅在函数内有效</span></span><br><span class="line">    <span class="keyword">while</span> attempt &lt; MAX_RETRIES:  <span class="comment"># 读取全局变量</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># ...处理逻辑...</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            attempt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">print(process_data(<span class="string">&quot;test&quot;</span>))  <span class="comment"># 使用全局MAX_RETRIES</span></span><br></pre></td></tr></table></figure><h3 id="3-3-常见错误及避免方法"><a href="#3-3-常见错误及避免方法" class="headerlink" title="3.3. 常见错误及避免方法"></a>3.3. 常见错误及避免方法</h3><h4 id="错误-1：误改全局变量未声明"><a href="#错误-1：误改全局变量未声明" class="headerlink" title="错误 1：误改全局变量未声明"></a>错误 1：误改全局变量未声明</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span>():</span></span><br><span class="line">    counter += <span class="number">1</span>  <span class="comment"># 触发UnboundLocalError（Python认为counter是局部变量）</span></span><br><span class="line"></span><br><span class="line">increment()</span><br></pre></td></tr></table></figure><p><strong>修正</strong>：使用<code>global</code>关键字声明：<code>global counter</code></p><h4 id="错误-2：局部变量覆盖全局变量"><a href="#错误-2：局部变量覆盖全局变量" class="headerlink" title="错误 2：局部变量覆盖全局变量"></a>错误 2：局部变量覆盖全局变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_area</span>(<span class="params">radius</span>):</span></span><br><span class="line">    PI = <span class="number">3.14</span>  <span class="comment"># 创建同名局部变量，覆盖全局变量</span></span><br><span class="line">    <span class="keyword">return</span> PI * radius**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(calculate_area(<span class="number">2</span>))  <span class="comment"># 输出12.56（全局PI未被使用）</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：避免全局/局部变量同名，或用<code>global PI</code>明确引用</p><h4 id="错误-3：误认为代码块创建作用域"><a href="#错误-3：误认为代码块创建作用域" class="headerlink" title="错误 3：误认为代码块创建作用域"></a>错误 3：误认为代码块创建作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    temp = <span class="number">5</span>  <span class="comment"># 实际属于全局作用域（Python没有块级作用域）</span></span><br><span class="line">print(temp)  <span class="comment"># 输出5（非预期）</span></span><br></pre></td></tr></table></figure><p><strong>修正</strong>：理解 Python 只有函数/模块/类作用域，避免在条件/循环块内定义变量</p><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><h4 id="场景-1：应用配置中心"><a href="#场景-1：应用配置中心" class="headerlink" title="场景 1：应用配置中心"></a>场景 1：应用配置中心</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line">DEBUG_MODE = <span class="literal">False</span>  <span class="comment"># 全局配置</span></span><br><span class="line">API_TIMEOUT = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># utils.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> API_TIMEOUT</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_api</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 使用全局API_TIMEOUT</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url, timeout=API_TIMEOUT)</span><br></pre></td></tr></table></figure><h4 id="场景-2：状态跟踪器"><a href="#场景-2：状态跟踪器" class="headerlink" title="场景 2：状态跟踪器"></a>场景 2：状态跟踪器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_counter</span>():</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 闭包内的&quot;伪全局&quot;变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count  <span class="comment"># 声明非局部变量</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line">counter = create_counter()</span><br><span class="line">print(counter())  <span class="comment"># 1</span></span><br><span class="line">print(counter())  <span class="comment"># 2（count变量在闭包中持久化）</span></span><br></pre></td></tr></table></figure><h3 id="3-5-递进练习题"><a href="#3-5-递进练习题" class="headerlink" title="3.5. 递进练习题"></a>3.5. 递进练习题</h3><h4 id="题目-1-平方和-初级"><a href="#题目-1-平方和-初级" class="headerlink" title="题目 1 平方和(初级)"></a>题目 1 平方和(初级)</h4><ul><li>编写函数<code>sum_squares(a, b)</code>，计算 a² + b²，要求使用局部变量存储中间结果</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-平方和-初级">参考答案</a></p></blockquote><h4 id="题目-2-打印消息-中级"><a href="#题目-2-打印消息-中级" class="headerlink" title="题目 2 打印消息(中级)"></a>题目 2 打印消息(中级)</h4><ul><li>创建全局变量<code>LOG_LEVEL=&quot;INFO&quot;</code>，编写函数<code>log(message)</code>，仅在 LOG_LEVEL 为”DEBUG”时打印消息</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-打印消息-中级">参考答案</a></p></blockquote><h4 id="题目-3-闭包保存-n-高级"><a href="#题目-3-闭包保存-n-高级" class="headerlink" title="题目 3 闭包保存 n(高级)"></a>题目 3 闭包保存 n(高级)</h4><ul><li>实现函数<code>create_multiplier(n)</code>，返回一个新函数，该函数能将输入参数乘以 n（使用闭包保存 n 的值）</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-闭包保存-n-高级">参考答案</a></p></blockquote><h3 id="3-6-深度思考问题"><a href="#3-6-深度思考问题" class="headerlink" title="3.6. 深度思考问题"></a>3.6. 深度思考问题</h3><p>当多个线程同时读写全局变量时，会引发怎样的数据竞争问题？在 Python 的 GIL（全局解释器锁）机制下，这种风险是降低了还是以其他形式存在？</p><p>（思考方向：线程安全、原子操作、GIL 的工作机制、协程与多进程的替代方案）</p><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个函数，计算两个数的最大公约数（GCD）。</li><li>编写一个函数，判断一个字符串是否是回文。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDMSf.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="函数" scheme="https://www.gaotianyang.top/tags/%E5%87%BD%E6%95%B0/"/>
    
    <category term="定义函数" scheme="https://www.gaotianyang.top/tags/%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/"/>
    
    <category term="函数参数与返回值" scheme="https://www.gaotianyang.top/tags/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    
    <category term="局部变量与全局变量" scheme="https://www.gaotianyang.top/tags/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python控制流程</title>
    <link href="https://www.gaotianyang.top/archives/20250226d92cbff1/"/>
    <id>https://www.gaotianyang.top/archives/20250226d92cbff1/</id>
    <published>2025-02-26T00:58:25.000Z</published>
    <updated>2025-02-24T14:09:30.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDnYt.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1. 条件语句"></a>1. 条件语句</h2><h3 id="1-1-条件语句的解释"><a href="#1-1-条件语句的解释" class="headerlink" title="1.1. 条件语句的解释"></a>1.1. 条件语句的解释</h3><p>条件语句用于根据特定条件执行不同的代码块。其用途在于根据程序运行时的数据做出决策。常见使用场景包括：</p><ul><li>根据用户输入执行不同的操作。</li><li>根据数据的状态选择不同的处理逻辑。</li><li>在循环中根据条件提前退出或继续执行。</li></ul><h3 id="1-2-条件语句的代码示例"><a href="#1-2-条件语句的代码示例" class="headerlink" title="1.2. 条件语句的代码示例"></a>1.2. 条件语句的代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断一个数字是否为正数</span></span><br><span class="line">number = int(input(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> number &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;这是一个正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> number &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;这是一个负数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;这是零&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-初学者常见的错误或误解"><a href="#1-3-初学者常见的错误或误解" class="headerlink" title="1.3. 初学者常见的错误或误解"></a>1.3. 初学者常见的错误或误解</h3><h4 id="错误-1：忘记使用冒号（-）在条件语句的末尾"><a href="#错误-1：忘记使用冒号（-）在条件语句的末尾" class="headerlink" title="错误 1：忘记使用冒号（:）在条件语句的末尾"></a>错误 1：忘记使用冒号（:）在条件语句的末尾</h4><ul><li><strong>避免方法</strong>: 记住条件语句和循环语句的末尾需要加上冒号。</li></ul><h4 id="错误-2：不理解elif和else的区别"><a href="#错误-2：不理解elif和else的区别" class="headerlink" title="错误 2：不理解elif和else的区别"></a>错误 2：不理解<code>elif</code>和<code>else</code>的区别</h4><ul><li><strong>避免方法</strong>: <code>elif</code>用于检查多个条件，<code>else</code>用于处理所有条件都不满足的情况。</li></ul><h4 id="错误-3：误用逻辑运算符"><a href="#错误-3：误用逻辑运算符" class="headerlink" title="错误 3：误用逻辑运算符"></a>错误 3：误用逻辑运算符</h4><ul><li><strong>避免方法</strong>: 使用<code>and</code>、<code>or</code>和<code>not</code>来组合条件时，确保逻辑关系正确。</li></ul><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><ul><li><strong>用户权限管理</strong>: 根据用户的角色或权限级别显示不同的页面或功能。</li><li><strong>游戏逻辑</strong>: 根据玩家的选择或游戏状态执行不同的操作。</li></ul><h3 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5. 练习题"></a>1.5. 练习题</h3><h4 id="题目-1：根据分数计算等级"><a href="#题目-1：根据分数计算等级" class="headerlink" title="题目 1：根据分数计算等级"></a>题目 1：根据分数计算等级</h4><ul><li>编写一个程序，根据用户输入的分数，输出相应的等级（例如，90 分以上为 A，80-89 分为 B，依此类推）。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1：根据分数计算等级">参考答案</a></p></blockquote><h4 id="题目-2：判断闰年"><a href="#题目-2：判断闰年" class="headerlink" title="题目 2：判断闰年"></a>题目 2：判断闰年</h4><ul><li>编写一个程序，判断一个年份是否为闰年。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2：判断闰年">参考答案</a></p></blockquote><h4 id="题目-3：计算月份天数"><a href="#题目-3：计算月份天数" class="headerlink" title="题目 3：计算月份天数"></a>题目 3：计算月份天数</h4><ul><li>编写一个程序，根据用户输入的月份，输出该月份的天数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h3 id="1-6-深入思考的问题"><a href="#1-6-深入思考的问题" class="headerlink" title="1.6. 深入思考的问题"></a>1.6. 深入思考的问题</h3><p>条件语句在程序设计中扮演着至关重要的角色。请思考一下，如何在复杂的业务逻辑中合理地使用条件语句，以提高代码的可读性和可维护性？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h2><h3 id="2-1-循环的解释"><a href="#2-1-循环的解释" class="headerlink" title="2.1. 循环的解释"></a>2.1. 循环的解释</h3><p>循环用于重复执行一段代码，直到满足特定条件为止。其用途在于简化重复性任务，提高代码的效率。常见使用场景包括：</p><ul><li>遍历列表、元组、字典等数据结构。</li><li>执行固定次数的操作。</li><li>在条件满足时不断执行某段代码，直到条件不再满足。</li></ul><h3 id="2-2-循环的代码示例"><a href="#2-2-循环的代码示例" class="headerlink" title="2.2. 循环的代码示例"></a>2.2. 循环的代码示例</h3><h4 id="for-循环示例"><a href="#for-循环示例" class="headerlink" title="for 循环示例"></a>for 循环示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到5的数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h4 id="while-循环示例"><a href="#while-循环示例" class="headerlink" title="while 循环示例"></a>while 循环示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到5的数字</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span>:</span><br><span class="line">    print(count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-3-初学者常见的错误或误解"><a href="#2-3-初学者常见的错误或误解" class="headerlink" title="2.3. 初学者常见的错误或误解"></a>2.3. 初学者常见的错误或误解</h3><h4 id="错误-1-忘记更新循环变量"><a href="#错误-1-忘记更新循环变量" class="headerlink" title="错误 1: 忘记更新循环变量"></a>错误 1: 忘记更新循环变量</h4><ul><li><strong>避免方法</strong>: 在<code>while</code>循环中，确保循环变量在每次迭代中被更新，以避免无限循环。</li></ul><h4 id="错误-2-不理解range函数的参数"><a href="#错误-2-不理解range函数的参数" class="headerlink" title="错误 2: 不理解range函数的参数"></a>错误 2: 不理解<code>range</code>函数的参数</h4><ul><li><strong>避免方法</strong>: <code>range(start, stop, step)</code>中的<code>stop</code>是非包含的，<code>start</code>和<code>step</code>是可选参数，默认值分别为 0 和 1。</li></ul><h4 id="错误-3-在循环中使用不当的条件"><a href="#错误-3-在循环中使用不当的条件" class="headerlink" title="错误 3: 在循环中使用不当的条件"></a>错误 3: 在循环中使用不当的条件</h4><ul><li><strong>避免方法</strong>: 确保循环条件能够正确反映退出循环的逻辑，避免逻辑错误导致的无限循环或不必要的迭代。</li></ul><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><ul><li><strong>数据处理</strong>: 遍历数据集进行处理或分析。</li><li><strong>用户交互</strong>: 在用户输入不符合要求时，反复提示用户输入。</li></ul><h3 id="2-5-练习题"><a href="#2-5-练习题" class="headerlink" title="2.5. 练习题"></a>2.5. 练习题</h3><h4 id="题目-1-循环输出平方-初级"><a href="#题目-1-循环输出平方-初级" class="headerlink" title="题目 1: 循环输出平方(初级)"></a>题目 1: 循环输出平方(初级)</h4><ul><li>编写一个程序，使用<code>for</code>循环打印 1 到 10 的平方。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-循环输出平方-初级">参考答案</a></p></blockquote><h4 id="题目-2-计算累加值-中级"><a href="#题目-2-计算累加值-中级" class="headerlink" title="题目 2: 计算累加值(中级)"></a>题目 2: 计算累加值(中级)</h4><ul><li>编写一个程序，使用<code>while</code>循环计算 1 到 100 的和。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h4 id="题目-3-打印列表中的偶数-高级"><a href="#题目-3-打印列表中的偶数-高级" class="headerlink" title="题目 3: 打印列表中的偶数(高级)"></a>题目 3: 打印列表中的偶数(高级)</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，并打印出列表中所有偶数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h3 id="2-6-深入思考的问题"><a href="#2-6-深入思考的问题" class="headerlink" title="2.6. 深入思考的问题"></a>2.6. 深入思考的问题</h3><p>循环在程序设计中是非常强大的工具。请思考一下，如何在设计循环时避免常见的逻辑错误，并确保循环的效率和可读性？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="3-break-和-continue"><a href="#3-break-和-continue" class="headerlink" title="3. break 和 continue"></a>3. <code>break</code> 和 <code>continue</code></h2><h3 id="3-1-break-和-continue-的解释"><a href="#3-1-break-和-continue-的解释" class="headerlink" title="3.1. break 和 continue 的解释"></a>3.1. <code>break</code> 和 <code>continue</code> 的解释</h3><p><code>break</code> 和 <code>continue</code> 是用于控制循环流程的关键字。它们的用途在于根据特定条件提前退出循环或跳过当前迭代，继续下一次迭代。常见使用场景包括：</p><ul><li><strong><code>break</code></strong>: 在找到特定条件满足的元素后，立即退出循环，避免不必要的迭代。</li><li><strong><code>continue</code></strong>: 跳过当前迭代中剩余的代码，直接进入下一次迭代，适用于需要跳过某些特定条件的情况。</li></ul><h3 id="3-2-break-和-continue-的代码示例"><a href="#3-2-break-和-continue-的代码示例" class="headerlink" title="3.2. break 和 continue 的代码示例"></a>3.2. <code>break</code> 和 <code>continue</code> 的代码示例</h3><h4 id="break-示例"><a href="#break-示例" class="headerlink" title="break 示例"></a><code>break</code> 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到第一个大于5的数字并退出循环</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">5</span>:</span><br><span class="line">        print(<span class="string">f&quot;找到第一个大于5的数字: <span class="subst">&#123;number&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="continue-示例"><a href="#continue-示例" class="headerlink" title="continue 示例"></a><code>continue</code> 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到10的奇数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h3 id="3-3-初学者常见的错误或误解"><a href="#3-3-初学者常见的错误或误解" class="headerlink" title="3.3. 初学者常见的错误或误解"></a>3.3. 初学者常见的错误或误解</h3><h4 id="错误-1-在循环外使用break或continue"><a href="#错误-1-在循环外使用break或continue" class="headerlink" title="错误 1: 在循环外使用break或continue"></a>错误 1: 在循环外使用<code>break</code>或<code>continue</code></h4><ul><li><strong>避免方法</strong>: <code>break</code>和<code>continue</code>只能在循环内部使用，否则会导致语法错误。</li></ul><h4 id="错误-2-break和continue会改变循环变量的值"><a href="#错误-2-break和continue会改变循环变量的值" class="headerlink" title="错误 2: break和continue会改变循环变量的值"></a>错误 2: <code>break</code>和<code>continue</code>会改变循环变量的值</h4><ul><li><strong>避免方法</strong>: <code>break</code>会立即退出循环，<code>continue</code>会跳过当前迭代，但不会改变循环变量的值。</li></ul><h4 id="错误-3-在嵌套循环中使用break或continue只会影响最内层循环"><a href="#错误-3-在嵌套循环中使用break或continue只会影响最内层循环" class="headerlink" title="错误 3: 在嵌套循环中使用break或continue只会影响最内层循环"></a>错误 3: 在嵌套循环中使用<code>break</code>或<code>continue</code>只会影响最内层循环</h4><ul><li><strong>避免方法</strong>: 确认<code>break</code>和<code>continue</code>的作用范围，必要时使用标志变量来控制外层循环。</li></ul><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><ul><li><strong><code>break</code></strong>: 在搜索算法中，找到目标元素后立即退出循环，提高效率。</li><li><strong><code>continue</code></strong>: 在数据处理中，跳过不符合条件的数据，减少不必要的计算。</li></ul><h3 id="3-5-练习题"><a href="#3-5-练习题" class="headerlink" title="3.5. 练习题"></a>3.5. 练习题</h3><h4 id="题目-1-找到第一个负数"><a href="#题目-1-找到第一个负数" class="headerlink" title="题目 1: 找到第一个负数"></a>题目 1: 找到第一个负数</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，找到第一个负数并打印出来，然后退出循环。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-找到第一个负数">参考答案</a></p></blockquote><h4 id="题目-2-使用-while-找到奇数"><a href="#题目-2-使用-while-找到奇数" class="headerlink" title="题目 2: 使用 while 找到奇数"></a>题目 2: 使用 while 找到奇数</h4><ul><li>编写一个程序，使用<code>while</code>循环打印 1 到 20 之间的所有奇数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-使用-while-找到奇数">参考答案</a></p></blockquote><h4 id="题目-3-使用-for-找到奇数"><a href="#题目-3-使用-for-找到奇数" class="headerlink" title="题目 3: 使用 for 找到奇数"></a>题目 3: 使用 for 找到奇数</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，跳过所有偶数，打印所有奇数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-使用-for-找到奇数">参考答案</a></p></blockquote><h3 id="3-6-深入思考的问题"><a href="#3-6-深入思考的问题" class="headerlink" title="3.6. 深入思考的问题"></a>3.6. 深入思考的问题</h3><p><code>break</code> 和 <code>continue</code> 在循环控制中非常有用，但过度使用可能会降低代码的可读性。请思考一下，如何在使用<code>break</code> 和 <code>continue</code> 时保持代码的清晰和简洁？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个程序，判断用户输入的数字是奇数还是偶数。</li><li>编写一个程序，打印 1 到 100 的所有质数。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDnYt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="控制流程" scheme="https://www.gaotianyang.top/tags/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    
    <category term="条件语句" scheme="https://www.gaotianyang.top/tags/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    
    <category term="循环" scheme="https://www.gaotianyang.top/tags/%E5%BE%AA%E7%8E%AF/"/>
    
    <category term="break和continue" scheme="https://www.gaotianyang.top/tags/break%E5%92%8Ccontinue/"/>
    
  </entry>
  
  <entry>
    <title>Python的基本语法</title>
    <link href="https://www.gaotianyang.top/archives/2025022423fce97e/"/>
    <id>https://www.gaotianyang.top/archives/2025022423fce97e/</id>
    <published>2025-02-24T13:34:34.000Z</published>
    <updated>2025-02-23T13:46:24.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDmFI.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h2><h3 id="1-1-变量与数据类型的简明解释"><a href="#1-1-变量与数据类型的简明解释" class="headerlink" title="1.1. 变量与数据类型的简明解释"></a>1.1. 变量与数据类型的简明解释</h3><p><strong>变量</strong>是用于存储数据的容器，每个变量都有一个名称和一个值。<strong>数据类型</strong>是变量所存储数据的种类，决定了数据可以进行的操作。</p><h4 id="1-1-1-用途"><a href="#1-1-1-用途" class="headerlink" title="1.1.1. 用途"></a>1.1.1. 用途</h4><ul><li>变量用于存储程序运行时的数据。</li><li>数据类型定义了数据的性质（如数字、文本、布尔值等）以及可以对其执行的操作。</li></ul><h4 id="1-1-2-常见使用场景"><a href="#1-1-2-常见使用场景" class="headerlink" title="1.1.2. 常见使用场景"></a>1.1.2. 常见使用场景</h4><ul><li>存储用户输入。</li><li>在计算中保存中间结果。</li><li>表示程序的状态或配置。</li></ul><h3 id="1-2-简单代码示例"><a href="#1-2-简单代码示例" class="headerlink" title="1.2. 简单代码示例"></a>1.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量与数据类型示例</span></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span>  <span class="comment"># 字符串类型 (str)</span></span><br><span class="line">age = <span class="number">25</span>       <span class="comment"># 整数类型 (int)</span></span><br><span class="line">height = <span class="number">1.75</span>  <span class="comment"># 浮点数类型 (float)</span></span><br><span class="line">is_student = <span class="literal">True</span>  <span class="comment"># 布尔类型 (bool)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印变量及其类型</span></span><br><span class="line">print(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>, Type: <span class="subst">&#123;type(name)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Age: <span class="subst">&#123;age&#125;</span>, Type: <span class="subst">&#123;type(age)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Height: <span class="subst">&#123;height&#125;</span>, Type: <span class="subst">&#123;type(height)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Is Student: <span class="subst">&#123;is_student&#125;</span>, Type: <span class="subst">&#123;type(is_student)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>含义解读:</p><ul><li><code>print()</code>：这是 Python 的内置函数，用于将指定的内容输出到控制台或终端。</li><li><code>f&quot;...&quot;</code>：这是一个 f-string（格式化字符串字面量），允许在字符串中嵌入表达式。f 前缀表示这是一个格式化字符串。</li><li><code>&#123;name&#125;</code>：这部分会被 name 变量的值替换。在这个例子中，name 的值是 “Alice”。</li><li><code>&#123;type(name)&#125;</code>：这部分会调用 type() 函数来获取 name 变量的数据类型，并将其结果插入到字符串中。name 是一个字符串类型 (str)，所以 <code>&#123;type(name)&#125;</code> 会输出 <code>&lt;class &#39;str&#39;&gt;</code>。</li></ul><h3 id="1-3-初学者常见的三个错误或误解"><a href="#1-3-初学者常见的三个错误或误解" class="headerlink" title="1.3. 初学者常见的三个错误或误解"></a>1.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：变量未定义直接使用"><a href="#错误-1：变量未定义直接使用" class="headerlink" title="错误 1：变量未定义直接使用"></a>错误 1：变量未定义直接使用</h4><ul><li><strong>问题</strong>：尝试使用未赋值的变量。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(undefined_variable)</span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：确保变量在使用前已赋值。</p></li></ul><h4 id="错误-2：混淆数据类型"><a href="#错误-2：混淆数据类型" class="headerlink" title="错误 2：混淆数据类型"></a>错误 2：混淆数据类型</h4><ul><li><strong>问题</strong>：对数据类型理解不清，导致操作错误。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="string">&quot;10&quot;</span> + <span class="number">5</span>  <span class="comment"># 尝试将字符串与整数相加</span></span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：明确数据类型，必要时进行类型转换（如 <code>int(&quot;10&quot;) + 5</code>）。</p></li></ul><h4 id="错误-3：变量命名不规范"><a href="#错误-3：变量命名不规范" class="headerlink" title="错误 3：变量命名不规范"></a>错误 3：变量命名不规范</h4><ul><li><strong>问题</strong>：使用不清晰的变量名，导致代码可读性差。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>  <span class="comment"># 变量名无意义</span></span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：使用描述性变量名（如 <code>age</code> 而不是 <code>a</code>）。</p></li></ul><h3 id="1-4-变量与数据类型的实际应用场景"><a href="#1-4-变量与数据类型的实际应用场景" class="headerlink" title="1.4. 变量与数据类型的实际应用场景"></a>1.4. 变量与数据类型的实际应用场景</h3><h4 id="场景-1：用户输入处理"><a href="#场景-1：用户输入处理" class="headerlink" title="场景 1：用户输入处理"></a>场景 1：用户输入处理</h4><ul><li><strong>描述</strong>：从用户输入中获取数据并存储到变量中，用于后续处理。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Hello, <span class="subst">&#123;user_name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="场景-2：数学计算"><a href="#场景-2：数学计算" class="headerlink" title="场景 2：数学计算"></a>场景 2：数学计算</h4><ul><li><strong>描述</strong>：使用变量存储数值数据，进行数学运算。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="number">5</span></span><br><span class="line">area = <span class="number">3.14</span> * radius ** <span class="number">2</span></span><br><span class="line">print(<span class="string">f&quot;Area of the circle: <span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5. 练习题"></a>1.5. 练习题</h3><h4 id="题目-1：基础练习"><a href="#题目-1：基础练习" class="headerlink" title="题目 1：基础练习"></a>题目 1：基础练习</h4><ul><li>编写一个程序，要求用户输入姓名和年龄，然后输出一条消息，如“你好，[姓名]！你今年[年龄]岁。”</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1：基础练习">参考答案</a></p></blockquote><h4 id="题目-2：数据类型转换"><a href="#题目-2：数据类型转换" class="headerlink" title="题目 2：数据类型转换"></a>题目 2：数据类型转换</h4><ul><li>编写一个程序，要求用户输入两个数字（字符串形式），将它们转换为整数并计算它们的和。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2：数据类型转换">参考答案</a></p></blockquote><h4 id="题目-3：复杂逻辑"><a href="#题目-3：复杂逻辑" class="headerlink" title="题目 3：复杂逻辑"></a>题目 3：复杂逻辑</h4><ul><li>编写一个程序，要求用户输入一个圆的半径（浮点数），计算并输出圆的面积和周长。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：复杂逻辑">参考答案</a></p></blockquote><h3 id="1-6-课后思考"><a href="#1-6-课后思考" class="headerlink" title="1.6. 课后思考"></a>1.6. 课后思考</h3><p><strong>问题</strong>: 在 Python 中，变量不需要显式声明类型，而是根据赋值自动推断类型。这种动态类型系统的优点是什么？它可能带来哪些潜在问题？在实际开发中，如何平衡灵活性和代码的可靠性？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="2-输入输出"><a href="#2-输入输出" class="headerlink" title="2. 输入输出"></a>2. 输入输出</h2><h3 id="2-1-解释输入输出（print-和-input-）"><a href="#2-1-解释输入输出（print-和-input-）" class="headerlink" title="2.1. 解释输入输出（print() 和 input()）"></a>2.1. 解释输入输出（<code>print()</code> 和 <code>input()</code>）</h3><p>在 Python 中，<code>print()</code> 和 <code>input()</code> 是用于处理输入和输出的基本函数。</p><h4 id="2-1-1-用途"><a href="#2-1-1-用途" class="headerlink" title="2.1.1. 用途"></a>2.1.1. 用途</h4><ul><li><strong><code>print()</code></strong>: 用于将信息输出到控制台。它可以输出字符串、数字、变量值等。<code>print()</code> 是调试和显示程序结果的重要工具。</li><li><strong><code>input()</code></strong>: 用于从用户那里获取输入。它会暂停程序执行，等待用户输入，并将输入作为字符串返回。<code>input()</code> 常用于需要用户交互的程序中。</li></ul><h4 id="2-1-2-常见使用场景"><a href="#2-1-2-常见使用场景" class="headerlink" title="2.1.2. 常见使用场景"></a>2.1.2. 常见使用场景</h4><ul><li><code>print()</code>: 显示计算结果、调试信息、用户提示等。</li><li><code>input()</code>: 获取用户输入，如用户名、密码、选项选择等。</li></ul><h3 id="2-2-简单代码示例"><a href="#2-2-简单代码示例" class="headerlink" title="2.2. 简单代码示例"></a>2.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 input() 获取用户输入</span></span><br><span class="line">name = input(<span class="string">&quot;请输入你的名字: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 print() 输出结果</span></span><br><span class="line">print(<span class="string">&quot;你好, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-初学者常见的三个错误或误解"><a href="#2-3-初学者常见的三个错误或误解" class="headerlink" title="2.3. 初学者常见的三个错误或误解"></a>2.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：-input-返回的是字符串"><a href="#错误-1：-input-返回的是字符串" class="headerlink" title="错误 1： input() 返回的是字符串"></a>错误 1： <code>input()</code> 返回的是字符串</h4><ul><li><strong>误解</strong>: 初学者可能认为 <code>input()</code> 返回的是数字或其他类型的数据。</li><li><strong>避免方法</strong>: 如果需要数字，记得使用 <code>int()</code> 或 <code>float()</code> 进行类型转换。</li></ul><h4 id="错误-2：-print-的格式化问题"><a href="#错误-2：-print-的格式化问题" class="headerlink" title="错误 2： print() 的格式化问题"></a>错误 2： <code>print()</code> 的格式化问题</h4><ul><li><strong>误解</strong>: 初学者可能不知道如何使用 <code>print()</code> 格式化输出。</li><li><strong>避免方法</strong>: 学习使用 f-string、<code>format()</code> 或 <code>%</code> 格式化方法。</li></ul><h4 id="错误-3：-忽略-input-的提示信息"><a href="#错误-3：-忽略-input-的提示信息" class="headerlink" title="错误 3： 忽略 input() 的提示信息"></a>错误 3： 忽略 <code>input()</code> 的提示信息</h4><ul><li><strong>误解</strong>: 初学者可能忘记在 <code>input()</code> 中提供提示信息，导致用户不知道需要输入什么。</li><li><strong>避免方法</strong>: 始终在 <code>input()</code> 中包含清晰的提示信息。</li></ul><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：-用户注册系统"><a href="#场景-1：-用户注册系统" class="headerlink" title="场景 1： 用户注册系统"></a>场景 1： 用户注册系统</h4><ul><li><strong>描述</strong>：使用 <code>input()</code> 获取用户的用户名和密码，使用 <code>print()</code> 显示注册成功的信息。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line">user_pwd = input(<span class="string">&quot;Enter your password: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;successfully registered, <span class="subst">&#123;user_name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="场景-2：-简单的计算器"><a href="#场景-2：-简单的计算器" class="headerlink" title="场景 2： 简单的计算器"></a>场景 2： 简单的计算器</h4><ul><li><strong>描述</strong>：使用 <code>input()</code> 获取用户输入的两个数字和操作符，使用 <code>print()</code> 显示计算结果。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_1 = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">num_2 = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">sum = int(num_1) + int(num_2)</span><br><span class="line">print(<span class="string">f&quot;两个数字和是： <span class="subst">&#123;sum&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-练习题"><a href="#2-5-练习题" class="headerlink" title="2.5. 练习题"></a>2.5. 练习题</h3><h4 id="题目-1-展示输入-初级"><a href="#题目-1-展示输入-初级" class="headerlink" title="题目 1: 展示输入(初级)"></a>题目 1: 展示输入(初级)</h4><ul><li>编写一个程序，要求用户输入他们的年龄，并输出他们出生的年份。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-展示输入-初级">参考答案</a></p></blockquote><h4 id="题目-2-计算输入-中级"><a href="#题目-2-计算输入-中级" class="headerlink" title="题目 2: 计算输入(中级)"></a>题目 2: 计算输入(中级)</h4><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-计算输入-中级">参考答案</a></p></blockquote><h4 id="题目-3-处理输入-高级"><a href="#题目-3-处理输入-高级" class="headerlink" title="题目 3: 处理输入(高级)"></a>题目 3: 处理输入(高级)</h4><ul><li>编写一个程序，要求用户输入一个字符串，并输出该字符串的反转形式。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-处理输入-高级">参考答案</a></p></blockquote><h3 id="2-6-课后思考"><a href="#2-6-课后思考" class="headerlink" title="2.6. 课后思考"></a>2.6. 课后思考</h3><p><strong>问题</strong>: 在现代应用程序中，图形用户界面（GUI）和命令行界面（CLI）都广泛使用。你认为在什么情况下使用 <code>print()</code> 和 <code>input()</code> 是最合适的？在什么情况下可能需要考虑更复杂的输入输出方式？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="3-基本运算符"><a href="#3-基本运算符" class="headerlink" title="3. 基本运算符"></a>3. 基本运算符</h2><h3 id="3-1-解释基本运算符（算术、比较、逻辑）"><a href="#3-1-解释基本运算符（算术、比较、逻辑）" class="headerlink" title="3.1. 解释基本运算符（算术、比较、逻辑）"></a>3.1. 解释基本运算符（算术、比较、逻辑）</h3><p>在 Python 中，基本运算符分为三类：</p><ul><li><strong>算术运算符</strong>: 用于执行数学运算，如加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、取整除法（<code>//</code>）、取余（<code>%</code>）和幂运算（<code>**</code>）。</li><li><strong>比较运算符</strong>: 用于比较两个值，返回布尔值（<code>True</code> 或 <code>False</code>），如等于（<code>==</code>）、不等于（<code>!=</code>）、大于（<code>&gt;</code>）、小于（<code>&lt;</code>）、大于等于（<code>&gt;=</code>）、小于等于（<code>&lt;=</code>）。</li><li><strong>逻辑运算符</strong>: 用于组合多个条件，返回布尔值，如与（<code>and</code>）、或（<code>or</code>）、非（<code>not</code>）。</li></ul><h4 id="3-1-1-常见使用场景"><a href="#3-1-1-常见使用场景" class="headerlink" title="3.1.1. 常见使用场景"></a>3.1.1. 常见使用场景</h4><ul><li><strong>算术运算符</strong>: 数学计算、数据处理。</li><li><strong>比较运算符</strong>: 条件判断、循环控制。</li><li><strong>逻辑运算符</strong>: 复杂条件组合、逻辑判断。</li></ul><h3 id="3-2-简单代码示例"><a href="#3-2-简单代码示例" class="headerlink" title="3.2. 简单代码示例"></a>3.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(<span class="string">&quot;加法:&quot;</span>, a + b)</span><br><span class="line">print(<span class="string">&quot;取余:&quot;</span>, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算符</span></span><br><span class="line">print(<span class="string">&quot;a 大于 b:&quot;</span>, a &gt; b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">print(<span class="string">&quot;a 大于 5 且 b 小于 5:&quot;</span>, a &gt; <span class="number">5</span> <span class="keyword">and</span> b &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3-初学者常见的三个错误或误解"><a href="#3-3-初学者常见的三个错误或误解" class="headerlink" title="3.3. 初学者常见的三个错误或误解"></a>3.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：-混淆-和"><a href="#错误-1：-混淆-和" class="headerlink" title="错误 1： 混淆 = 和 =="></a>错误 1： 混淆 <code>=</code> 和 <code>==</code></h4><ul><li><strong>误解</strong>: 初学者可能将赋值运算符 <code>=</code> 和比较运算符 <code>==</code> 混淆。</li><li><strong>避免方法</strong>: 记住 <code>=</code> 用于赋值，<code>==</code> 用于比较。</li></ul><h4 id="错误-2：-忽略运算符优先级"><a href="#错误-2：-忽略运算符优先级" class="headerlink" title="错误 2： 忽略运算符优先级"></a>错误 2： 忽略运算符优先级</h4><ul><li><strong>误解</strong>: 初学者可能忽略运算符的优先级，导致计算结果错误。</li><li><strong>避免方法</strong>: 使用括号明确运算顺序，或查阅运算符优先级表。</li></ul><h4 id="错误-3：-逻辑运算符的短路行为"><a href="#错误-3：-逻辑运算符的短路行为" class="headerlink" title="错误 3： 逻辑运算符的短路行为"></a>错误 3： 逻辑运算符的短路行为</h4><ul><li><strong>误解</strong>: 初学者可能不理解 <code>and</code> 和 <code>or</code> 的短路行为（即一旦确定结果，就不再计算后续表达式）。</li><li><strong>避免方法</strong>: 学习逻辑运算符的短路特性，并在必要时利用它优化代码。</li></ul><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><h4 id="场景-1：-计算器程序"><a href="#场景-1：-计算器程序" class="headerlink" title="场景 1： 计算器程序"></a>场景 1： 计算器程序</h4><ul><li>使用算术运算符实现基本的加减乘除运算。</li></ul><h4 id="场景-2：-用户输入验证"><a href="#场景-2：-用户输入验证" class="headerlink" title="场景 2： 用户输入验证"></a>场景 2： 用户输入验证</h4><ul><li>使用比较和逻辑运算符验证用户输入是否符合要求（如年龄在特定范围内）。</li></ul><h3 id="3-5-练习题"><a href="#3-5-练习题" class="headerlink" title="3.5. 练习题"></a>3.5. 练习题</h3><h4 id="题目-1-计算和、差、积和商-初级"><a href="#题目-1-计算和、差、积和商-初级" class="headerlink" title="题目 1: 计算和、差、积和商(初级)"></a>题目 1: 计算和、差、积和商(初级)</h4><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-计算和、差、积和商-初级">参考答案</a></p></blockquote><h4 id="题目-2-判断闰年-中级"><a href="#题目-2-判断闰年-中级" class="headerlink" title="题目 2: 判断闰年(中级)"></a>题目 2: 判断闰年(中级)</h4><ul><li>编写一个程序，要求用户输入一个年份，判断它是否为闰年（闰年规则：能被 4 整除但不能被 100 整除，或者能被 400 整除）。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-判断闰年-中级">参考答案</a></p></blockquote><h4 id="题目-3-计算极值-高级"><a href="#题目-3-计算极值-高级" class="headerlink" title="题目 3: 计算极值(高级)"></a>题目 3: 计算极值(高级)</h4><ul><li>编写一个程序，要求用户输入三个数字，并输出其中的最大值和最小值。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-计算极值-高级">参考答案</a></p></blockquote><h3 id="3-6-课后思考"><a href="#3-6-课后思考" class="headerlink" title="3.6. 课后思考"></a>3.6. 课后思考</h3><p><strong>问题</strong>: 在编写复杂的条件判断时，如何平衡代码的可读性和效率？你认为在什么情况下应该优先考虑可读性，什么情况下应该优先考虑效率？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个简单的计算器程序。</li><li>编写一个程序，询问用户姓名并输出问候语。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDmFI.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="基本语法" scheme="https://www.gaotianyang.top/tags/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
    <category term="变量与数据类型" scheme="https://www.gaotianyang.top/tags/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="输入输出" scheme="https://www.gaotianyang.top/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
    <category term="基本运算符" scheme="https://www.gaotianyang.top/tags/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>首钢园</title>
    <link href="https://www.gaotianyang.top/archives/2025022378b2ff68/"/>
    <id>https://www.gaotianyang.top/archives/2025022378b2ff68/</id>
    <published>2025-02-23T14:11:28.000Z</published>
    <updated>2025-03-03T14:27:00.284Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/03/03/pEGTMGt.jpg" alt="首屏图"></p><a id="more"></a><p>记得不久前，我和朋友一起去观看了关于首钢历史的戏曲《百年首钢》。这部戏曲通过老中青三代首钢人的故事，生动讲述了首钢的历史变迁，让我深刻了解了首钢的昨日传奇与今日的变化。那次的观看经历不仅加深了我对首钢的认识，也为我后来的实地探访增添了更多的期待。</p><p>到了今年 2 月 23 日，我和朋友们终于有机会亲临首钢园区，体验这片土地的独特魅力。</p><p>首钢园如今已焕然一新，成为一座融合现代艺术与历史遗迹的主题园区。我们首先漫步在群明湖畔，清澈的湖水倒映着周围的建筑与蓝天白云，微风拂面，令人心旷神怡，仿佛时间在这里静止。</p><p>接着，我们来到了首钢滑雪大跳台脚下，近距离欣赏这座壮丽的建筑。作为冬奥遗产之一，它不仅见证了运动员们的拼搏瞬间，更承载着人们对未来的无限期待。</p><p>随后，我们在园区内悠闲地漫步，享受着宁静的午后时光。在一家温馨的咖啡馆里，我们点了几杯香浓的咖啡，而后去到不远处的书店中，坐在窗边静静欣赏窗外的风景。书店里陈列着各种书籍，偶尔还能看到几位读者沉浸在书的世界中。</p><p>这次首钢园之行，让我深刻感受到工业遗存与现代文明交融的独特魅力。曾经的钢铁巨擘，如今已成为人们休闲娱乐的好去处，这种转变令人赞叹不已。而《百年首钢》中的故事，也在这片土地上得到了真实的印证。</p><p><img src="https://s21.ax1x.com/2025/03/03/pEGTQRP.jpg" alt="一高炉-SoReal科幻乐园"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/03/03/pEGTMGt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="首钢园" scheme="https://www.gaotianyang.top/tags/%E9%A6%96%E9%92%A2%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>Python参考答案</title>
    <link href="https://www.gaotianyang.top/archives/20250223abbb24cd/"/>
    <id>https://www.gaotianyang.top/archives/20250223abbb24cd/</id>
    <published>2025-02-23T13:12:52.000Z</published>
    <updated>2025-03-06T14:28:09.126Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDufP.jpg" alt="首屏图"></p><a id="more"></a><h2 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h2><h3 id="题目-1：基础练习"><a href="#题目-1：基础练习" class="headerlink" title="题目 1：基础练习"></a><a href="/archives/2025022423fce97e/#题目-1：基础练习">题目 1：基础练习</a></h3><ul><li>编写一个程序，要求用户输入姓名和年龄，然后输出一条消息，如“你好，[姓名]！你今年[年龄]岁。”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;输入你的姓名: &quot;</span>)</span><br><span class="line">user_age = input(<span class="string">&quot;输入你的年龄: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;你好，<span class="subst">&#123;user_name&#125;</span>！你今年<span class="subst">&#123;user_age&#125;</span>岁。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 isdigit() 方法检查用户输入的年龄是否为整数，避免在后续转换为整数时引发 ValueError。</li><li>如果用户输入的年龄不是整数，程序会提示用户输入有效的年龄。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;输入你的姓名: &quot;</span>).strip()</span><br><span class="line">user_age = input(<span class="string">&quot;输入你的年龄: &quot;</span>).strip()</span><br><span class="line"><span class="comment"># 检查年龄是否为整数</span></span><br><span class="line"><span class="keyword">if</span> user_age.isdigit():</span><br><span class="line">    user_age = int(user_age)</span><br><span class="line">    print(<span class="string">f&quot;你好，<span class="subst">&#123;user_name&#125;</span>！你今年<span class="subst">&#123;user_age&#125;</span>岁。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的年龄（整数）。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2：数据类型转换"><a href="#题目-2：数据类型转换" class="headerlink" title="题目 2：数据类型转换"></a><a href="/archives/2025022423fce97e/#题目-2：数据类型转换">题目 2：数据类型转换</a></h3><ul><li>编写一个程序，要求用户输入两个数字（字符串形式），将它们转换为整数并计算它们的和。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_a = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">number_b = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;两数字的和是<span class="subst">&#123;int(number_a)+int(number_b)&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 isdigit() 方法检查用户输入的两个数字是否为整数，避免在后续转换为整数时引发 ValueError。使用 isdigit() 方法检查用户输入的两个数字是否为整数，避免在后续转换为整数时引发 ValueError。</li><li>如使用 try-except 块来捕获 ValueError 异常，确保程序在用户输入无效整数时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    number_a = int(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">    number_b = int(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line">    add = number_a + number_b</span><br><span class="line">    print(<span class="string">f&quot;两数字的和是<span class="subst">&#123;add&#125;</span>。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的整数。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3：复杂逻辑"><a href="#题目-3：复杂逻辑" class="headerlink" title="题目 3：复杂逻辑"></a><a href="/archives/2025022423fce97e/#题目-3：复杂逻辑">题目 3：复杂逻辑</a></h3><ul><li>编写一个程序，要求用户输入一个圆的半径（浮点数），计算并输出圆的面积和周长。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number_r = input(<span class="string">&quot;输入圆的半径: &quot;</span>)</span><br><span class="line">area = <span class="number">3.14</span> * int(number_r) ** <span class="number">2</span></span><br><span class="line">length = <span class="number">2</span> * <span class="number">3.14</span> * int(number_r)</span><br><span class="line">print(<span class="string">f&quot;圆的面积是<span class="subst">&#123;area&#125;</span>。圆的周长是<span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 float() 函数将输入转换为浮点数，以便处理小数。</li><li>使用 try-except 块来捕获 ValueError 异常，确保程序在用户输入无效浮点数时不会崩溃，并给出友好的错误提示。</li><li>使用更精确的常数：使用 math.pi 来代替 3.14，提高计算精度。</li><li>使用 :.2f 格式化输出面积和周长，保留两位小数，使输出更加美观。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    number_r = float(input(<span class="string">&quot;输入圆的半径: &quot;</span>).strip())</span><br><span class="line">    area = math.pi * number_r ** <span class="number">2</span></span><br><span class="line">    length = <span class="number">2</span> * math.pi * number_r</span><br><span class="line">    print(<span class="string">f&quot;圆的面积是<span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>。圆的周长是<span class="subst">&#123;length:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的浮点数作为半径。&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-变量与数据类型"><a href="#2-变量与数据类型" class="headerlink" title="2. 变量与数据类型"></a>2. 变量与数据类型</h2><h3 id="题目-1-展示输入-初级"><a href="#题目-1-展示输入-初级" class="headerlink" title="题目 1: 展示输入(初级)"></a><a href="/archives/2025022423fce97e/#题目-1-展示输入-初级">题目 1: 展示输入(初级)</a></h3><ul><li>编写一个程序，要求用户输入他的年龄，并输出他出生的年份。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">user_age = input(<span class="string">&quot;输入年龄: &quot;</span>)</span><br><span class="line">current_year = datetime.now().year</span><br><span class="line">birth_year = current_year - int(user_age)</span><br><span class="line">print(<span class="string">f&quot;你的出生年份是<span class="subst">&#123;int(birth_year)&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>去除不必要的类型转换：birth_year 已经是整数，不需要再次转换为整数。</li><li>添加输入验证：确保用户输入的是有效的整数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_birth_year</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_age = input(<span class="string">&quot;输入年龄: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user_age.isdigit():</span><br><span class="line">            user_age = int(user_age)</span><br><span class="line">            current_year = datetime.now().year</span><br><span class="line">            birth_year = current_year - user_age</span><br><span class="line">            print(<span class="string">f&quot;你的出生年份是<span class="subst">&#123;birth_year&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的整数作为年龄。&quot;</span>)</span><br><span class="line"></span><br><span class="line">get_birth_year()</span><br></pre></td></tr></table></figure><h3 id="题目-2-计算输入-中级"><a href="#题目-2-计算输入-中级" class="headerlink" title="题目 2: 计算输入(中级)"></a><a href="/archives/2025022423fce97e/#题目-2-计算输入-中级">题目 2: 计算输入(中级)</a></h3><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_1 = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">num_2 = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">sum = int(num_1) + int(num_2)</span><br><span class="line">difference = int(num_1) - int(num_2)</span><br><span class="line">product = int(num_1) * int(num_2)</span><br><span class="line">quotient = int(num_1) / int(num_2)</span><br><span class="line">print(<span class="string">f&quot;两数的和是, <span class="subst">&#123;sum&#125;</span>；两数的差是, <span class="subst">&#123;difference&#125;</span>；两数的积是, <span class="subst">&#123;product&#125;</span>；两数的商是, <span class="subst">&#123;quotient&#125;</span>；&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>输入验证<ul><li>使用 strip() 去除用户输入的前后空格。</li><li>使用 float() 将输入转换为浮点数，以便处理小数。</li><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul></li><li>异常处理<ul><li>捕获 ValueError 异常，处理无效输入。</li><li>捕获其他异常（如除以零），并给出相应的错误提示。</li></ul></li><li>代码格式化<ul><li>使用更清晰的格式化字符串输出结果，每个结果占一行，便于阅读。</li></ul></li><li>变量命名<ul><li>避免使用内置函数名作为变量名，使用 addition、difference、product 和 quotient 作为变量名。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_operations</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num_1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">            num_2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            addition = num_1 + num_2</span><br><span class="line">            difference = num_1 - num_2</span><br><span class="line">            product = num_1 * num_2</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理除以零的情况</span></span><br><span class="line">            <span class="keyword">if</span> num_2 == <span class="number">0</span>:</span><br><span class="line">                quotient = <span class="string">&quot;未定义（除以零）&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                quotient = num_1 / num_2</span><br><span class="line"></span><br><span class="line">            print(<span class="string">f&quot;两数的和是: <span class="subst">&#123;addition&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的差是: <span class="subst">&#123;difference&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的积是: <span class="subst">&#123;product&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的商是: <span class="subst">&#123;quotient&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的数字。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">calculate_operations()</span><br></pre></td></tr></table></figure><h3 id="题目-3-处理输入-高级"><a href="#题目-3-处理输入-高级" class="headerlink" title="题目 3: 处理输入(高级)"></a><a href="/archives/2025022423fce97e/#题目-3-处理输入-高级">题目 3: 处理输入(高级)</a></h3><ul><li>编写一个程序，要求用户输入一个字符串，并输出该字符串的反转形式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = <span class="string">&#x27;&#x27;</span>.join(reversed(user_input))</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用切片<ul><li>使用字符串切片，从字符串末尾开始，每次取一个字符，直到取完所有字符。</li><li>切片操作的基本语法是 start:stop:step，其中：<ul><li>start：表示切片的起始位置，默认为 0。</li><li>stop：表示切片的结束位置，默认为字符串末尾。</li><li>step：表示切片的步长，默认为 1。</li></ul></li><li>start 和 stop 都被省略，表示从字符串的开始到结束。</li><li>step 为 -1，表示从右向左遍历字符串。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = user_input[::<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> user_input:</span><br><span class="line">    reversed_string = char + reversed_string</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用递归</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = reverse_string(user_input)</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-基本运算符"><a href="#3-基本运算符" class="headerlink" title="3. 基本运算符"></a>3. 基本运算符</h2><h3 id="题目-1-计算和、差、积和商-初级"><a href="#题目-1-计算和、差、积和商-初级" class="headerlink" title="题目 1: 计算和、差、积和商(初级)"></a><a href="/archives/2025022423fce97e/#题目-1-计算和、差、积和商-初级">题目 1: 计算和、差、积和商(初级)</a></h3><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><p><a href="/archives/20250223abbb24cd/#题目-2-计算输入-中级">答案同上</a></p><h3 id="题目-2-判断闰年-中级"><a href="#题目-2-判断闰年-中级" class="headerlink" title="题目 2: 判断闰年(中级)"></a><a href="/archives/2025022423fce97e/#题目-2-判断闰年-中级">题目 2: 判断闰年(中级)</a></h3><ul><li>编写一个程序，要求用户输入一个年份，判断它是否为闰年（闰年规则：能被 4 整除但不能被 100 整除，或者能被 400 整除）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;输入年份: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理除以零的情况</span></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year %<span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    result = <span class="string">&quot;是&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = <span class="string">&quot;不是&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;result&#125;</span>闰年&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leap_year</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            year = int(input(<span class="string">&quot;输入年份: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理除以零的情况</span></span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year %<span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">                result = <span class="string">&quot;是&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = <span class="string">&quot;不是&quot;</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;result&#125;</span>闰年&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的年份。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">is_leap_year()</span><br></pre></td></tr></table></figure><h3 id="题目-3-计算极值-高级"><a href="#题目-3-计算极值-高级" class="headerlink" title="题目 3: 计算极值(高级)"></a><a href="/archives/2025022423fce97e/#题目-3-计算极值-高级">题目 3: 计算极值(高级)</a></h3><ul><li>编写一个程序，要求用户输入三个数字，并输出其中的最大值和最小值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>))</span><br><span class="line">num2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>))</span><br><span class="line">num3 = float(input(<span class="string">&quot;输入数字3: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输入的数字存储在一个列表中</span></span><br><span class="line">numbers = [num1, num2, num3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化最大值和最小值</span></span><br><span class="line">max_num = numbers[<span class="number">0</span>]</span><br><span class="line">min_num = numbers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环比较每个数字</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> num &gt; max_num:</span><br><span class="line">        max_num = num</span><br><span class="line">    <span class="keyword">if</span> num &lt; min_num:</span><br><span class="line">        min_num = num</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;最大值是: <span class="subst">&#123;max_num&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;最小值是: <span class="subst">&#123;min_num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用内置函数 max() 和 min()，无需自己实现。</li><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_extremes</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num_1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">            num_2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line">            num_3 = float(input(<span class="string">&quot;输入数字3: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            max_value = max(num_1, num_2, num_3)</span><br><span class="line">            min_value = min(num_1, num_2, num_3)</span><br><span class="line">            print(<span class="string">f&quot;最大值是: <span class="subst">&#123;max_value&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;最小值是: <span class="subst">&#123;min_value&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的数字。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">calculate_extremes()</span><br></pre></td></tr></table></figure><h2 id="1-条件语句（if、elif、else）"><a href="#1-条件语句（if、elif、else）" class="headerlink" title="1. 条件语句（if、elif、else）"></a>1. 条件语句（if、elif、else）</h2><h3 id="题目-1：根据分数计算等级"><a href="#题目-1：根据分数计算等级" class="headerlink" title="题目 1：根据分数计算等级"></a><a href="/archives/20250226d92cbff1/#题目-1：根据分数计算等级">题目 1：根据分数计算等级</a></h3><ul><li>编写一个程序，根据用户输入的分数，输出相应的等级（例如，90 分以上为 A，80-89 分为 B，依此类推）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">number = int(input(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span>(number&gt;=<span class="number">90</span>):</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">80</span> <span class="keyword">and</span> number&lt;<span class="number">90</span>):</span><br><span class="line">    print(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">70</span> <span class="keyword">and</span> number&lt;<span class="number">80</span>):</span><br><span class="line">    print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">60</span> <span class="keyword">and</span> number&lt;<span class="number">70</span>):</span><br><span class="line">    print(<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;E&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>变量命名：将 number 改为 score，使变量名更具描述性。</li><li>条件表达式：使用 80 &lt;= score &lt; 90 这样的链式比较，使条件判断更简洁和易读。</li><li>空格：在运算符两边添加空格，符合 PEP 8 风格指南，提高代码可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">score = int(input(<span class="string">&quot;请输入一个分数: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;E&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2：判断闰年"><a href="#题目-2：判断闰年" class="headerlink" title="题目 2：判断闰年"></a><a href="/archives/20250226d92cbff1/#题目-2：判断闰年">题目 2：判断闰年</a></h3><ul><li>编写一个程序，判断一个年份是否为闰年。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;请输入一个年份: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;平年&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>逻辑表达式：在 if 条件中使用括号来明确逻辑关系，确保 year % 4 == 0 and year % 100 != 0 和 year % 400 == 0 是两个独立的条件，通过 or 连接。</li><li>空格：在运算符两边添加空格，符合 PEP 8 风格指南，提高代码可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;请输入一个年份: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    print(<span class="string">&quot;闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;平年&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3：计算月份天数"><a href="#题目-3：计算月份天数" class="headerlink" title="题目 3：计算月份天数"></a><a href="/archives/20250226d92cbff1/#题目-3：计算月份天数">题目 3：计算月份天数</a></h3><ul><li>编写一个程序，根据用户输入的月份，输出该月份的天数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mouth = int(input(<span class="string">&quot;请输入月份: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span>(mouth==<span class="number">1</span> <span class="keyword">or</span> mouth==<span class="number">3</span> <span class="keyword">or</span> mouth==<span class="number">5</span> <span class="keyword">or</span> mouth==<span class="number">7</span> <span class="keyword">or</span> mouth==<span class="number">8</span> <span class="keyword">or</span> mouth==<span class="number">10</span> <span class="keyword">or</span> mouth==<span class="number">12</span>):</span><br><span class="line">    print(<span class="string">&quot;31天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(mouth==<span class="number">4</span> <span class="keyword">or</span> mouth==<span class="number">6</span> <span class="keyword">or</span> mouth==<span class="number">9</span> <span class="keyword">or</span> mouth==<span class="number">11</span>):</span><br><span class="line">    print(<span class="string">&quot;30天&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;28天&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用集合进行条件判断：使用集合 {1, 3, 5, 7, 8, 10, 12} 和 {4, 6, 9, 11} 来判断月份，使代码更简洁和易读。</li><li>处理 2 月特殊情况：虽然题目没有要求处理闰年 2 月的情况，但可以在输出中提示用户 2 月可能是 28 天或 29 天。</li><li>添加无效月份检查：增加对无效月份的检查，提高程序的健壮性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">month = int(input(<span class="string">&quot;请输入月份: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> month <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>&#125;:</span><br><span class="line">    print(<span class="string">&quot;31天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> month <span class="keyword">in</span> &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>&#125;:</span><br><span class="line">    print(<span class="string">&quot;30天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> month == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">&quot;28天（或29天，如果是闰年）&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;无效的月份&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h2><h3 id="题目-1-循环输出平方-初级"><a href="#题目-1-循环输出平方-初级" class="headerlink" title="题目 1: 循环输出平方(初级)"></a><a href="/archives/20250226d92cbff1/#题目-1-循环输出平方-初级">题目 1: 循环输出平方(初级)</a></h3><ul><li>编写一个程序，使用 for 循环打印 1 到 10 的平方。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = i * i</span><br><span class="line">    print(square)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>简化变量命名：去掉 pingfang 变量，直接在 print 语句中计算平方，减少不必要的变量。</li><li>提高可读性：使用格式化字符串 f”{i} 的平方是 {i * i}” 来输出结果，使输出更清晰易读。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> 的平方是 <span class="subst">&#123;i * i&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2-计算累加值-中级"><a href="#题目-2-计算累加值-中级" class="headerlink" title="题目 2: 计算累加值(中级)"></a><a href="/archives/20250226d92cbff1/#题目-2-计算累加值-中级">题目 2: 计算累加值(中级)</a></h3><ul><li>编写一个程序，使用 while 循环计算 1 到 100 的和。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    sum += count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>变量命名<ul><li>将 sum 改为 total，因为 sum 是 Python 内置函数的名称，使用它作为变量名可能会导致潜在的冲突或混淆。</li><li>将 count 改为 number，使变量名更具描述性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">100</span>:</span><br><span class="line">    total += number</span><br><span class="line">    number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h3 id="题目-3-打印列表中的偶数-高级"><a href="#题目-3-打印列表中的偶数-高级" class="headerlink" title="题目 3: 打印列表中的偶数(高级)"></a><a href="/archives/20250226d92cbff1/#题目-3-打印列表中的偶数-高级">题目 3: 打印列表中的偶数(高级)</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，并打印出列表中所有偶数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写一个程序，使用 for 循环遍历一个列表，并打印出列表中所有偶数。</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 检查数字是否为偶数</span></span><br><span class="line">        print(number)    <span class="comment"># 打印偶数</span></span><br></pre></td></tr></table></figure><h2 id="3-break-和-continue"><a href="#3-break-和-continue" class="headerlink" title="3. break 和 continue"></a>3. break 和 continue</h2><h3 id="题目-1-找到第一个负数"><a href="#题目-1-找到第一个负数" class="headerlink" title="题目 1: 找到第一个负数"></a><a href="/archives/20250226d92cbff1/#题目-1-找到第一个负数">题目 1: 找到第一个负数</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，找到第一个负数并打印出来，然后退出循环。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:  <span class="comment"># 检查数字是否为负数</span></span><br><span class="line">        print(number)  <span class="comment"># 打印第一个负数</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 退出循环</span></span><br></pre></td></tr></table></figure><h3 id="题目-2-使用-while-找到奇数"><a href="#题目-2-使用-while-找到奇数" class="headerlink" title="题目 2: 使用 while 找到奇数"></a><a href="/archives/20250226d92cbff1/#题目-2-使用-while-找到奇数">题目 2: 使用 while 找到奇数</a></h3><ul><li>编写一个程序，使用 while 循环打印 1 到 20 之间的所有奇数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br><span class="line">    number += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> != <span class="number">0</span>:  <span class="comment"># 检查数字是否为奇数</span></span><br><span class="line">        print(number)    <span class="comment"># 打印奇数</span></span><br><span class="line">    number += <span class="number">1</span>          <span class="comment"># 增加计数器</span></span><br></pre></td></tr></table></figure><h3 id="题目-3-使用-for-找到奇数"><a href="#题目-3-使用-for-找到奇数" class="headerlink" title="题目 3: 使用 for 找到奇数"></a><a href="/archives/20250226d92cbff1/#题目-3-使用-for-找到奇数">题目 3: 使用 for 找到奇数</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，跳过所有偶数，打印所有奇数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(number)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 检查数字是否为偶数</span></span><br><span class="line">        <span class="keyword">continue</span>         <span class="comment"># 跳过偶数</span></span><br><span class="line">    print(number)        <span class="comment"># 打印奇数</span></span><br></pre></td></tr></table></figure><h2 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h2><h3 id="题目-1-计算矩形周长-初级"><a href="#题目-1-计算矩形周长-初级" class="headerlink" title="题目 1: 计算矩形周长(初级)"></a><a href="/archives/20250228c8f562d1/#题目-1-计算矩形周长-初级">题目 1: 计算矩形周长(初级)</a></h3><ul><li>创建计算矩形周长的函数，参数为长和宽</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rectangle_perimeter</span>(<span class="params">length, width</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (length + width)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>参数类型检查：确保传入的参数是数值类型（如整数或浮点数），以避免无效输入导致的错误。</li><li>异常处理：使用 try-except 块来捕获可能的异常，例如当传入非数值类型的参数时给出友好提示。</li><li>文档字符串 (docstring)：为函数添加描述性注释，说明函数的功能、参数及返回值，便于他人理解代码。</li><li>正负数验证：确保长度和宽度为非负数，因为矩形的尺寸不能为负。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rectangle_perimeter</span>(<span class="params">length, width</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 将输入转换为浮点数，并去除可能存在的多余空格</span></span><br><span class="line">        length = float(str(length).strip())</span><br><span class="line">        width = float(str(width).strip())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否为非负数</span></span><br><span class="line">        <span class="keyword">if</span> length &lt; <span class="number">0</span> <span class="keyword">or</span> width &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;长度和宽度必须是非负数。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (length + width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> ve:</span><br><span class="line">        print(<span class="string">f&quot;值错误: <span class="subst">&#123;ve&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        print(<span class="string">&quot;类型错误: 长度和宽度必须是数字类型。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="题目-2-计算平均值-中级"><a href="#题目-2-计算平均值-中级" class="headerlink" title="题目 2: 计算平均值(中级)"></a><a href="/archives/20250228c8f562d1/#题目-2-计算平均值-中级">题目 2: 计算平均值(中级)</a></h3><ul><li>编写支持可变数量参数的函数，计算任意个数数字的平均值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sum(args) / len(args)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>处理空参数：如果用户没有传入任何参数，len(args)将为 0，导致除以零的错误。需要添加检查以处理这种情况。</li><li>参数类型检查：确保传入的参数是数值类型（如整数或浮点数），以避免无效输入导致的错误。</li><li>异常处理：使用 try-except 块来捕获可能的异常，例如当传入非数值类型的参数时给出友好提示。</li><li>文档字符串 (docstring)：为函数添加描述性注释，说明函数的功能、参数及返回值，便于他人理解代码。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;至少需要传入一个数字参数。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = sum(args)</span><br><span class="line">        count = len(args)</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        print(<span class="string">&quot;类型错误: 所有参数必须是数字类型。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="题目-3-生成斐波那契数列-高级"><a href="#题目-3-生成斐波那契数列-高级" class="headerlink" title="题目 3: 生成斐波那契数列(高级)"></a><a href="/archives/20250228c8f562d1/#题目-3-生成斐波那契数列-高级">题目 3: 生成斐波那契数列(高级)</a></h3><ul><li>实现记忆化（memoization）的斐波那契数列生成函数，要求通过装饰器实现缓存</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_with_memoization</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci_with_memoization(n<span class="number">-1</span>) + fibonacci_with_memoization(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用 lru_cache 装饰器：<ul><li>lru_cache 是 Python 标准库 functools 模块中的一个装饰器，它可以自动为函数添加缓存功能，避免重复计算。</li><li>maxsize=None 表示缓存没有大小限制，可以缓存所有计算过的斐波那契数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache(maxsize=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_with_memoization</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibonacci_with_memoization(n<span class="number">-1</span>) + fibonacci_with_memoization(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h2 id="2-函数参数与返回值"><a href="#2-函数参数与返回值" class="headerlink" title="2. 函数参数与返回值"></a>2. 函数参数与返回值</h2><h3 id="题目-1-拼接字符串-初级"><a href="#题目-1-拼接字符串-初级" class="headerlink" title="题目 1 拼接字符串(初级)"></a><a href="/archives/20250228c8f562d1/#题目-1-拼接字符串-初级">题目 1 拼接字符串(初级)</a></h3><ul><li>编写函数<code>greet(name, greeting=&quot;Hello&quot;)</code>，返回拼接的问候字符串（如<code>&quot;Hello, Alice!&quot;</code>）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name, greeting=<span class="string">&quot;Hello&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line">print(greet(<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line">print(greet(<span class="string">&quot;Alice&quot;</span>, <span class="string">&#x27;Good morning&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>函数注释：为函数添加注释，说明函数的作用、参数和返回值。</li><li>类型提示：为函数参数添加类型提示，提高代码可读性和可维护性。</li><li>常量使用：将默认问候语定义为常量，便于管理和修改。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义默认问候语常量</span></span><br><span class="line">DEFAULT_GREETING = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name: str, greeting: str = DEFAULT_GREETING</span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回拼接的问候字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    name (str): 被问候的人的名字。</span></span><br><span class="line"><span class="string">    greeting (str): 问候语，默认为&quot;Hello&quot;。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    str: 拼接后的问候字符串。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line">print(greet(<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line">print(greet(<span class="string">&quot;Alice&quot;</span>, <span class="string">&#x27;Good morning&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="题目-2-任意参数求和-中级"><a href="#题目-2-任意参数求和-中级" class="headerlink" title="题目 2 任意参数求和(中级)"></a><a href="/archives/20250228c8f562d1/#题目-2-任意参数求和-中级">题目 2 任意参数求和(中级)</a></h3><ul><li>实现函数<code>sum_numbers(*args)</code>，接受任意数量的数字参数并返回总和，若无参数返回 0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">*args</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> args:</span><br><span class="line">        total += num</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">print(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(sum_numbers())</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型提示：为函数参数和返回值添加类型提示，提高代码的可读性和可维护性。</li><li>函数注释：为函数添加注释，说明函数的作用、参数和返回值。</li><li>异常处理：使用 try-except 块来捕获可能的异常，例如当传入非数字类型的参数时给出友好提示。</li><li>简洁性：使用了内置的 sum() 函数来计算总和，代码更简洁。</li><li>可读性：使用了 sum() 函数，这是 Python 中计算总和的标准方法。</li><li>性能：使用了内置函数 sum()，通常会有更好的性能优化。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span>(<span class="params">*args: float</span>) -&gt; float:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受任意数量的数字参数并返回总和，若无参数返回 0。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    *args: 任意数量的数字参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    float: 数字参数的总和，若无参数返回 0。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    TypeError: 如果参数中包含非数字类型。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> sum(args)</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;所有参数必须是数字类型。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line">print(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(sum_numbers())</span><br></pre></td></tr></table></figure><h3 id="题目-3-任意参数求积-高级"><a href="#题目-3-任意参数求积-高级" class="headerlink" title="题目 3 任意参数求积(高级)"></a><a href="/archives/20250228c8f562d1/#题目-3-任意参数求积-高级">题目 3 任意参数求积(高级)</a></h3><ul><li>设计函数<code>apply_operation(func, *args, **kwargs)</code>，接受一个函数和其参数，执行后返回结果（如调用<code>apply_operation(pow, 2, 3)</code>返回 8）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_operation</span>(<span class="params">func, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个函数和其参数，执行后返回结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    func: 要执行的函数。</span></span><br><span class="line"><span class="string">    *args: 函数的参数。</span></span><br><span class="line"><span class="string">    **kwargs: 函数的关键字参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    执行函数的结果。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;<span class="subst">&#123;apply_operation(pow, <span class="number">2</span>, <span class="number">3</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型提示：为函数参数和返回值添加类型提示，提高代码的可读性和可维护性。</li><li>错误处理：添加对传入函数和参数的错误处理，确保函数的健壮性。</li><li>文档字符串：进一步完善文档字符串，使其更加清晰和详细。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable, Any</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_operation</span>(<span class="params">func: Callable, *args: Any, **kwargs: Any</span>) -&gt; Any:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接受一个函数和其参数，执行后返回结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    func (Callable): 要执行的函数。</span></span><br><span class="line"><span class="string">    *args (Any): 函数的位置参数。</span></span><br><span class="line"><span class="string">    **kwargs (Any): 函数的关键字参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    Any: 执行函数的结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    TypeError: 如果传入的参数不是函数或参数不匹配。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> callable(func):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;第一个参数必须是一个可调用的函数。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> te:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">f&quot;调用函数时发生类型错误: <span class="subst">&#123;te&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line">print(<span class="string">f&quot;<span class="subst">&#123;apply_operation(pow, <span class="number">2</span>, <span class="number">3</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-局部变量与全局变量"><a href="#3-局部变量与全局变量" class="headerlink" title="3. 局部变量与全局变量"></a>3. 局部变量与全局变量</h2><h3 id="题目-1-平方和-初级"><a href="#题目-1-平方和-初级" class="headerlink" title="题目 1 平方和(初级)"></a><a href="/archives/20250228c8f562d1/#题目-1-平方和-初级">题目 1 平方和(初级)</a></h3><ul><li>编写函数<code>sum_squares(a, b)</code>，计算 a² + b²，要求使用局部变量存储中间结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    square_sum = a ** <span class="number">2</span> + b ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> square_sum</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型提示：为函数参数和返回值添加类型提示，提高代码的可读性和可维护性。</li><li>文档字符串：为函数添加注释，说明函数的作用、参数和返回值。</li><li>代码格式：确保代码格式符合 PEP 8 风格指南，提高代码的可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">a: float, b: float</span>) -&gt; float:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算 a² + b²。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    a (float): 第一个数字。</span></span><br><span class="line"><span class="string">    b (float): 第二个数字。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    float: a² + b² 的结果。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    square_sum = a ** <span class="number">2</span> + b ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> square_sum</span><br></pre></td></tr></table></figure><h3 id="题目-2-打印消息-中级"><a href="#题目-2-打印消息-中级" class="headerlink" title="题目 2 打印消息(中级)"></a><a href="/archives/20250228c8f562d1/#题目-2-打印消息-中级">题目 2 打印消息(中级)</a></h3><ul><li>创建全局变量<code>LOG_LEVEL=&quot;INFO&quot;</code>，编写函数<code>log(message)</code>，仅在 LOG_LEVEL 为”DEBUG”时打印消息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOG_LEVEL=<span class="string">&quot;INFO&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="keyword">if</span> LOG_LEVEL == <span class="string">&quot;DEBUG&quot;</span>:</span><br><span class="line">        print(message)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> message</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型提示：为函数参数和返回值添加类型提示，提高代码的可读性和可维护性。</li><li>文档字符串：为函数添加注释，说明函数的作用、参数和返回值。</li><li>代码格式：确保代码格式符合 PEP 8 风格指南，提高代码的可读性。</li><li>全局变量管理：确保全局变量的使用是清晰和可控的。</li><li>返回值一致性：确保函数在不同情况下返回一致的类型，避免混淆。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">&quot;INFO&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">message: str</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    打印消息，仅在 LOG_LEVEL 为 &quot;DEBUG&quot; 时输出。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    message (str): 要打印的消息。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> LOG_LEVEL == <span class="string">&quot;DEBUG&quot;</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><h3 id="题目-3-闭包保存-n-高级"><a href="#题目-3-闭包保存-n-高级" class="headerlink" title="题目 3 闭包保存 n(高级)"></a><a href="/archives/20250228c8f562d1/#题目-3-闭包保存-n-高级">题目 3 闭包保存 n(高级)</a></h3><ul><li>实现函数<code>create_multiplier(n)</code>，返回一个新函数，该函数能将输入参数乘以 n（使用闭包保存 n 的值）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_multiplier</span>(<span class="params">n</span>):</span></span><br><span class="line">    n = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiplier</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x * n</span><br><span class="line">    <span class="keyword">return</span> multiplier</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型提示：为函数参数和返回值添加类型提示，提高代码的可读性和可维护性。</li><li>文档字符串：为函数添加注释，说明函数的作用、参数和返回值。</li><li>代码格式：确保代码格式符合 PEP 8 风格指南，提高代码的可读性。</li><li>闭包使用：确保闭包的使用是清晰和正确的。</li><li>返回函数的命名：为返回的函数添加一个更具描述性的名称。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_multiplier</span>(<span class="params">n: float</span>) -&gt; callable:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    返回一个新函数，该函数能将输入参数乘以 n。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    n (float): 乘数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    callable: 一个函数，接受一个数字参数并返回该数字乘以 n 的结果。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiplier</span>(<span class="params">x: float</span>) -&gt; float:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将输入参数乘以 n。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">        x (float): 要乘以 n 的数字。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">        float: x 乘以 n 的结果。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> x * n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> multiplier</span><br></pre></td></tr></table></figure><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h2><h3 id="题目-1-计算平均值-初级"><a href="#题目-1-计算平均值-初级" class="headerlink" title="题目 1:计算平均值(初级)"></a><a href="/archives/2025030222c892e4/#题目-1-计算平均值-初级">题目 1:计算平均值(初级)</a></h3><ul><li>创建包含 10 个随机整数的列表（范围 1-100），计算它们的平均值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">numbers = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_average</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers) / len(numbers)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;数组<span class="subst">&#123;numbers&#125;</span>的平均值是<span class="subst">&#123;calculate_average(numbers)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>代码可读性：在格式化字符串中增加空格以提高可读性。</li><li>函数注释：为 calculate_average 函数添加注释，说明其功能。</li><li>避免重复计算：将 calculate_average(numbers) 的结果存储在一个变量中，避免重复计算。</li><li>代码注释：保持代码注释清晰，确保每个部分的功能明确。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成包含10个1到100之间随机整数的列表</span></span><br><span class="line">numbers = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_average</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算并返回数字列表的平均值&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers) / len(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均值并存储在变量中</span></span><br><span class="line">average = calculate_average(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果，使用格式化字符串提高可读性</span></span><br><span class="line">print(<span class="string">f&quot;数组 <span class="subst">&#123;numbers&#125;</span> 的平均值是 <span class="subst">&#123;average&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2-合并列表并排序-中级"><a href="#题目-2-合并列表并排序-中级" class="headerlink" title="题目 2:合并列表并排序(中级)"></a><a href="/archives/2025030222c892e4/#题目-2-合并列表并排序-中级">题目 2:合并列表并排序(中级)</a></h3><ul><li>合并两个已排序列表（如[1,3,5]和[2,4,6]），保持结果列表有序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sorted_lists</span>(<span class="params">list1, list2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;合并两个已排序列表，保持结果列表有序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    list1 (list): 已排序的列表1</span></span><br><span class="line"><span class="string">    list2 (list): 已排序的列表2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 合并后的已排序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    merged_list = list1 + list2</span><br><span class="line">    <span class="keyword">return</span> sorted(merged_list)</span><br><span class="line"></span><br><span class="line">print(merge_sorted_lists(list1, list2))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>算法效率：当前的 merge_sorted_lists 函数使用了 list1 + list2 和 sorted(listall)，时间复杂度为 O(n log n)。可以使用双指针方法将时间复杂度优化为 O(n)。</li><li>代码可读性：保持代码注释清晰，确保每个部分的功能明确。</li><li>函数注释：确保函数注释详细且准确。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sorted_lists</span>(<span class="params">list1, list2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;合并两个已排序列表，保持结果列表有序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    list1 (list): 已排序的列表1</span></span><br><span class="line"><span class="string">    list2 (list): 已排序的列表2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 合并后的已排序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    merged_list = []</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用双指针合并两个列表</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(list1) <span class="keyword">and</span> j &lt; len(list2):</span><br><span class="line">        <span class="keyword">if</span> list1[i] &lt; list2[j]:</span><br><span class="line">            merged_list.append(list1[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged_list.append(list2[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加剩余元素</span></span><br><span class="line">    merged_list.extend(list1[i:])</span><br><span class="line">    merged_list.extend(list2[j:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merged_list</span><br><span class="line"></span><br><span class="line">print(merge_sorted_lists(list1, list2))</span><br></pre></td></tr></table></figure><h3 id="题目-3-矩阵转置-高级"><a href="#题目-3-矩阵转置-高级" class="headerlink" title="题目 3:矩阵转置(高级)"></a><a href="/archives/2025030222c892e4/#题目-3-矩阵转置-高级">题目 3:矩阵转置(高级)</a></h3><ul><li>实现矩阵转置函数，输入如[[1,2],[3,4],[5,6]]，返回[[1,3,5],[2,4,6]]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose_matrix</span>(<span class="params">matrix</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现矩阵转置函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    matrix (list): 输入的矩阵</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 转置后的矩阵</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取矩阵的行数和列数</span></span><br><span class="line">    rows = len(matrix)</span><br><span class="line">    cols = len(matrix[<span class="number">0</span>])</span><br><span class="line">    transposed = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(cols)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            transposed[j].append(matrix[i][j])</span><br><span class="line">    <span class="keyword">return</span> transposed</span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">print(transpose_matrix(matrix))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>代码可读性：使用更具描述性的变量名。</li><li>简化逻辑：使用列表推导式简化代码。</li><li>函数注释：确保函数注释详细且准确。</li><li>移除不必要的注释：移除不必要的注释，使代码更简洁。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose_matrix</span>(<span class="params">matrix</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现矩阵转置函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    matrix (list): 输入的矩阵</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 转置后的矩阵</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用列表推导式简化转置逻辑</span></span><br><span class="line">    transposed = [[matrix[i][j] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(matrix))] <span class="keyword">for</span> j <span class="keyword">in</span> range(len(matrix[<span class="number">0</span>]))]</span><br><span class="line">    <span class="keyword">return</span> transposed</span><br><span class="line"></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">print(transpose_matrix(matrix))</span><br></pre></td></tr></table></figure><h2 id="2-字典"><a href="#2-字典" class="headerlink" title="2. 字典"></a>2. 字典</h2><h3 id="题目-1-统计字符出现次数-初级"><a href="#题目-1-统计字符出现次数-初级" class="headerlink" title="题目 1: 统计字符出现次数(初级)"></a><a href="/archives/2025030222c892e4/#题目-1-统计字符出现次数-初级">题目 1: 统计字符出现次数(初级)</a></h3><ul><li>编写函数统计字符串中各字符出现次数（如”hello”返回{‘h’:1, ‘e’:1, ‘l’:2, ‘o’:1}）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char_counts</span>(<span class="params">s</span>):</span></span><br><span class="line">    char_counts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">        char_counts[char] = char_counts.get(char, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> char_counts</span><br><span class="line">print(get_char_counts(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>函数注释：保持函数注释详细且准确，说明参数和返回值。</li><li>代码格式：保持代码格式一致，提高可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_char_counts</span>(<span class="params">str</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统计字符串中各字符出现次数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    str (str): 输入的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    dict: 字符及其出现次数的字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    char_counts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> str:</span><br><span class="line">        char_counts[char] = char_counts.get(char, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> char_counts</span><br><span class="line">print(get_char_counts(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="题目-2-合并字典-中级"><a href="#题目-2-合并字典-中级" class="headerlink" title="题目 2: 合并字典(中级)"></a><a href="/archives/2025030222c892e4/#题目-2-合并字典-中级">题目 2: 合并字典(中级)</a></h3><ul><li>合并两个字典，若键冲突则保留第二个字典的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dica2 = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_dicts</span>(<span class="params">dict1, dict2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并两个字典，若键冲突则保留第二个字典的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dict1 (dict): 第一个字典</span></span><br><span class="line"><span class="string">    dict2 (dict): 第二个字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    dict: 合并后的字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    merged_dict = dict1.copy()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dict2:</span><br><span class="line">        merged_dict[key] = dict2[key]</span><br><span class="line">    <span class="keyword">return</span> merged_dict</span><br><span class="line"></span><br><span class="line">print(merge_dicts(dict1, dict2))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用字典解包（Dictionary Unpacking）：Python 3.5 及以上版本支持字典解包，可以更简洁地合并字典。</li><li>函数注释：确保函数注释详细且准确。</li><li>代码格式：保持代码格式一致，提高可读性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_dicts</span>(<span class="params">dict1, dict2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并两个字典，若键冲突则保留第二个字典的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dict1 (dict): 第一个字典</span></span><br><span class="line"><span class="string">    dict2 (dict): 第二个字典</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    dict: 合并后的字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;**dict1, **dict2&#125;</span><br><span class="line"></span><br><span class="line">print(merge_dicts(dict1, dict2))</span><br></pre></td></tr></table></figure><h3 id="题目-3-扁平化-高级"><a href="#题目-3-扁平化-高级" class="headerlink" title="题目 3: 扁平化(高级)"></a><a href="/archives/2025030222c892e4/#题目-3-扁平化-高级">题目 3: 扁平化(高级)</a></h3><ul><li>实现嵌套字典的扁平化，将<code>&#123;&#39;a&#39;:1, &#39;b&#39;:&#123;&#39;c&#39;:2, &#39;d&#39;:&#123;&#39;e&#39;:3&#125;&#125;&#125;</code>转换为<code>&#123;&#39;a&#39;:1, &#39;b.c&#39;:2, &#39;b.d.e&#39;:3&#125;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten_dict</span>(<span class="params">d, parent_key=<span class="string">&#x27;&#x27;</span>, sep=<span class="string">&#x27;.&#x27;</span></span>):</span></span><br><span class="line">    flattened = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">        <span class="keyword">if</span> parent_key:</span><br><span class="line">            new_key = parent_key + sep + key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_key = key</span><br><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">            flattened.update(flatten_dict(value, new_key, sep))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flattened[new_key] = value</span><br><span class="line">    <span class="keyword">return</span> flattened</span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:&#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>:&#123;<span class="string">&#x27;e&#x27;</span>:<span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">print(flatten_dict(dict1))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>xxxx</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten_dict</span>(<span class="params">d, parent_key=<span class="string">&#x27;&#x27;</span>, sep=<span class="string">&#x27;.&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现嵌套字典的扁平化，将`&#123;&#x27;a&#x27;:1, &#x27;b&#x27;:&#123;&#x27;c&#x27;:2, &#x27;d&#x27;:&#123;&#x27;e&#x27;:3&#125;&#125;&#125;`转换为`&#123;&#x27;a&#x27;:1, &#x27;b.c&#x27;:2, &#x27;b.d.e&#x27;:3&#125;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    d (dict): 需要扁平化的嵌套字典</span></span><br><span class="line"><span class="string">    parent_key (str): 父层级传递下来的key，默认为空字符串</span></span><br><span class="line"><span class="string">    sep (str): 分隔符，默认为&#x27;.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    dict: 扁平化后的字典</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(d, dict):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Input must be a dictionary&quot;</span>)</span><br><span class="line"></span><br><span class="line">    flattened = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">        new_key = <span class="string">f&quot;<span class="subst">&#123;parent_key&#125;</span><span class="subst">&#123;sep&#125;</span><span class="subst">&#123;key&#125;</span>&quot;</span> <span class="keyword">if</span> parent_key <span class="keyword">else</span> key</span><br><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">            flattened.update(flatten_dict(value, new_key, sep))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flattened[new_key] = value</span><br><span class="line">    <span class="keyword">return</span> flattened</span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: &#123;<span class="string">&#x27;e&#x27;</span>: <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">print(flatten_dict(dict1))</span><br></pre></td></tr></table></figure><h2 id="3-元组和集合"><a href="#3-元组和集合" class="headerlink" title="3. 元组和集合"></a>3. 元组和集合</h2><h3 id="题目-1-集合去重-初级"><a href="#题目-1-集合去重-初级" class="headerlink" title="题目 1: 集合去重(初级)"></a><a href="/archives/2025030222c892e4/#题目-1-集合去重-初级">题目 1: 集合去重(初级)</a></h3><ul><li>将列表<code>[&quot;cat&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;]</code>转换为集合去重，再转回排序后的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;bird&quot;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_set</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将列表转换为集合并去重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    lst (list): 输入的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    set: 去重后的集合</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> set(lst)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_list</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将集合转换为排序后的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    s (set): 输入的集合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 排序后的列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sorted(list(s))</span><br><span class="line">print(convert_to_list(convert_to_set(lst)))</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>合并函数：将 convert_to_set 和 convert_to_list 合并为一个函数 convert_to_sort_list，减少函数调用的复杂性。</li><li>函数注释：确保函数注释详细且准确。</li><li>代码格式：保持代码格式一致，提高可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;bird&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_sort_list</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将列表转换为集合并去重，再转换为排序后的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    lst (list): 输入的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    list: 去重并排序后的列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sorted(set(lst))</span><br><span class="line"></span><br><span class="line">print(convert_to_sort_list(lst))</span><br></pre></td></tr></table></figure><h3 id="题目-2-变位词判断-中级"><a href="#题目-2-变位词判断-中级" class="headerlink" title="题目 2: 变位词判断(中级)"></a><a href="/archives/2025030222c892e4/#题目-2-变位词判断-中级">题目 2: 变位词判断(中级)</a></h3><ul><li>编写函数判断两个字符串是否为变位词（字母组成相同），使用集合优化效率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_anagram</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断两个字符串是否为变位词（字母组成相同）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    str1 (str): 第一个字符串</span></span><br><span class="line"><span class="string">    str2 (str): 第二个字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    bool: 如果两个字符串是变位词则返回True，否则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   <span class="comment"># 如果长度不同，直接返回 False</span></span><br><span class="line">    <span class="keyword">if</span> len(str1) != len(str2):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 set 获取所有唯一的字符</span></span><br><span class="line">    unique_chars = set(str1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计 str1 中每个字符的出现次数</span></span><br><span class="line">    count1 = &#123;char: str1.count(char) <span class="keyword">for</span> char <span class="keyword">in</span> unique_chars&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计 str2 中每个字符的出现次数</span></span><br><span class="line">    count2 = &#123;char: str2.count(char) <span class="keyword">for</span> char <span class="keyword">in</span> unique_chars&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 比较两个字典中的字符出现次数是否相同</span></span><br><span class="line">    <span class="keyword">return</span> count1 == count2</span><br><span class="line"></span><br><span class="line">print(is_anagram(<span class="string">&#x27;room&#x27;</span>, <span class="string">&#x27;morr&#x27;</span>))  <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>))   <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>))  <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;goad&#x27;</span>)) <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;listen&#x27;</span>, <span class="string">&#x27;silent&#x27;</span>)) <span class="comment"># 输出: True</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;good&#x27;</span>)) <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用 collections.Counter：<ul><li>Counter(str1)：统计 str1 中每个字符的出现次数。</li><li>Counter(str2)：统计 str2 中每个字符的出现次数。</li><li>Counter(str1) == Counter(str2)：比较两个计数器是否相等。</li></ul></li><li>函数注释：保持函数注释详细且准确，说明参数和返回值。</li><li>代码格式：保持代码格式一致，提高可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_anagram</span>(<span class="params">str1, str2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断两个字符串是否为变位词（字母组成相同）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    str1 (str): 第一个字符串</span></span><br><span class="line"><span class="string">    str2 (str): 第二个字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    bool: 如果两个字符串是变位词则返回True，否则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Counter(str1) == Counter(str2)</span><br><span class="line"></span><br><span class="line">print(is_anagram(<span class="string">&#x27;room&#x27;</span>, <span class="string">&#x27;morr&#x27;</span>))  <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>))   <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>))  <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;goad&#x27;</span>)) <span class="comment"># 输出: False</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;listen&#x27;</span>, <span class="string">&#x27;silent&#x27;</span>)) <span class="comment"># 输出: True</span></span><br><span class="line">print(is_anagram(<span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;good&#x27;</span>)) <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure><h3 id="题目-3-不可变元组存储实验数据-高级"><a href="#题目-3-不可变元组存储实验数据-高级" class="headerlink" title="题目 3: 不可变元组存储实验数据(高级)"></a><a href="/archives/2025030222c892e4/#题目-3-不可变元组存储实验数据-高级">题目 3: 不可变元组存储实验数据(高级)</a></h3><ul><li>实现多组实验数据的不可变存储结构，每个实验包含（实验名称，时间戳，温度值元组）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">experiments = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_experiment</span>(<span class="params">name, timestamp, temperature</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    添加一组实验数据到不可变存储结构中，每个实验包含（实验名称，时间戳，温度值元组）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    name (str): 实验名称</span></span><br><span class="line"><span class="string">    timestamp (str): 时间戳</span></span><br><span class="line"><span class="string">    temperature (tuple): 温度值元组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值：</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    experiment = (name, timestamp, temperature)</span><br><span class="line">    experiments.append(experiment)</span><br><span class="line"></span><br><span class="line">add_experiment(<span class="string">&#x27;实验1&#x27;</span>, <span class="string">&#x27;2023-07-01&#x27;</span>, (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>))</span><br><span class="line">add_experiment(<span class="string">&#x27;实验2&#x27;</span>, <span class="string">&#x27;2023-07-02&#x27;</span>, (<span class="number">28</span>, <span class="number">32</span>, <span class="number">36</span>))</span><br><span class="line">print(experiments)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用类来管理实验数据：<ul><li>使用一个类来封装实验数据的存储和管理，避免使用全局变量。</li></ul></li><li>函数设计：<ul><li>将 add_experiment 方法作为类的方法，而不是直接操作全局变量。</li></ul></li><li>返回值：<ul><li>返回添加的实验数据，提高函数的灵活性和可测试性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExperimentManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化实验管理器，存储实验数据的列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.experiments = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_experiment</span>(<span class="params">self, name, timestamp, temperature</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加一组实验数据到不可变存储结构中，每个实验包含（实验名称，时间戳，温度值元组）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        name (str): 实验名称</span></span><br><span class="line"><span class="string">        timestamp (str): 时间戳</span></span><br><span class="line"><span class="string">        temperature (tuple): 温度值元组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回值：</span></span><br><span class="line"><span class="string">        tuple: 添加的实验数据元组</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        experiment = (name, timestamp, temperature)</span><br><span class="line">        self.experiments.append(experiment)</span><br><span class="line">        <span class="keyword">return</span> experiment</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_experiments</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取所有实验数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回值：</span></span><br><span class="line"><span class="string">        list: 包含所有实验数据的列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.experiments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实验管理器实例</span></span><br><span class="line">experiment_manager = ExperimentManager()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加实验数据</span></span><br><span class="line">experiment1 = experiment_manager.add_experiment(<span class="string">&#x27;实验1&#x27;</span>, <span class="string">&#x27;2023-07-01&#x27;</span>, (<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>))</span><br><span class="line">experiment2 = experiment_manager.add_experiment(<span class="string">&#x27;实验2&#x27;</span>, <span class="string">&#x27;2023-07-02&#x27;</span>, (<span class="number">28</span>, <span class="number">32</span>, <span class="number">36</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有实验数据</span></span><br><span class="line">print(experiment_manager.get_experiments())</span><br></pre></td></tr></table></figure><h2 id="1-文件读写"><a href="#1-文件读写" class="headerlink" title="1. 文件读写"></a>1. 文件读写</h2><h3 id="题目-1-统计文件的行数-初级"><a href="#题目-1-统计文件的行数-初级" class="headerlink" title="题目 1: 统计文件的行数(初级)"></a><a href="/archives/20250303d948b0f0/#题目-1-统计文件的行数-初级">题目 1: 统计文件的行数(初级)</a></h3><ul><li>编写函数<code>count_lines(filename)</code>，统计指定文本文件的行数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_lines</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> sum(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> f)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>参数验证：确保传入的 filename 参数是一个有效的字符串，并且文件存在。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li><li>异常处理：增加更多的异常处理，以应对各种可能的错误情况。</li><li>返回值：在函数成功执行后返回一个有意义的值，例如文件的行数。</li><li>性能优化：确保每次读取的块大小合理，避免内存占用过高。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_lines</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统计指定文本文件的行数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    filename (str): 文件路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    int: 文件的行数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果 filename 不是字符串。</span></span><br><span class="line"><span class="string">    FileNotFoundError: 如果文件不存在。</span></span><br><span class="line"><span class="string">    PermissionError: 如果文件读取权限不足。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证参数是否为字符串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(filename, str):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;filename 参数必须是一个字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证文件是否存在且为文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; 不存在或不是文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            line_count = sum(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> f)</span><br><span class="line">        logging.info(<span class="string">f&quot;文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; 的行数是 <span class="subst">&#123;line_count&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> line_count</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;权限错误：无法读取文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;权限错误：无法读取文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;未知错误：无法读取文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;未知错误：无法读取文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = count_lines(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line">        print(<span class="string">f&quot;文件 &#x27;example.txt&#x27; 的行数是: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;参数错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;权限错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;未知错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2-合并文本文件-中级"><a href="#题目-2-合并文本文件-中级" class="headerlink" title="题目 2: 合并文本文件(中级)"></a><a href="/archives/20250303d948b0f0/#题目-2-合并文本文件-中级">题目 2: 合并文本文件(中级)</a></h3><ul><li>创建函数<code>merge_files(files, output)</code>，将多个文本文件内容合并到新文件中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_files</span>(<span class="params">files, output</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将多个文本文件的内容合并到新文件中。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        files (list): 需要合并的文件路径列表。</span></span><br><span class="line"><span class="string">        output (str): 合并后的输出文件路径。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> open(output, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">with</span> open(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">                outfile.write(infile.read())</span><br><span class="line">                outfile.write(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 可选：在文件内容间添加空行分隔</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>参数验证：确保传入的 files 参数是一个列表，并且列表中的每个元素都是有效的文件路径。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li><li>异常处理：增加更多的异常处理，以应对各种可能的错误情况。</li><li>性能优化：确保每次读取和写入的块大小合理，避免内存占用过高。</li><li>返回值：在函数成功执行后返回一个有意义的值，例如目标文件路径。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_files</span>(<span class="params">files, output</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将多个文本文件的内容合并到新文件中。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    files (list): 需要合并的文件路径列表。</span></span><br><span class="line"><span class="string">    output (str): 合并后的输出文件路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    str: 成功合并后的目标文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果 files 不是列表或列表中的元素不是字符串。</span></span><br><span class="line"><span class="string">    FileNotFoundError: 如果源文件不存在。</span></span><br><span class="line"><span class="string">    PermissionError: 如果文件读取或写入权限不足。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证参数是否为列表</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(files, list):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;files 参数必须是一个列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证列表中的每个元素是否为字符串</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(filename, str):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;files 列表中的每个元素必须是字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证每个文件是否存在且为文件</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(filename):</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;源文件 &#x27;<span class="subst">&#123;filename&#125;</span>&#x27; 不存在或不是文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(output, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">with</span> open(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">                    outfile.write(infile.read())</span><br><span class="line">                    outfile.write(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># 可选：在文件内容间添加空行分隔</span></span><br><span class="line">        logging.info(<span class="string">f&quot;文件合并成功：从 <span class="subst">&#123;files&#125;</span> 到 <span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;权限错误：无法读取源文件或写入目标文件 &#x27;<span class="subst">&#123;output&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;权限错误：无法读取源文件或写入目标文件 &#x27;<span class="subst">&#123;output&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;未知错误：无法合并文件 <span class="subst">&#123;files&#125;</span> 到 &#x27;<span class="subst">&#123;output&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;未知错误：无法合并文件 <span class="subst">&#123;files&#125;</span> 到 &#x27;<span class="subst">&#123;output&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = merge_files([<span class="string">&quot;file1.txt&quot;</span>, <span class="string">&quot;file2.txt&quot;</span>], <span class="string">&quot;merged_file.txt&quot;</span>)</span><br><span class="line">        print(<span class="string">f&quot;文件合并成功，目标路径为: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;参数错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;权限错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;未知错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3-文件内容加密保存-高级"><a href="#题目-3-文件内容加密保存-高级" class="headerlink" title="题目 3: 文件内容加密保存(高级)"></a><a href="/archives/20250303d948b0f0/#题目-3-文件内容加密保存-高级">题目 3: 文件内容加密保存(高级)</a></h3><ul><li>实现<code>encrypted_copy(src, dst, key)</code>，通过异或运算对文件内容进行加密后写入新文件（处理二进制模式）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypted_copy</span>(<span class="params">src, dst, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用异或运算加密二进制文件并保存到新路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        src (str): 源文件路径</span></span><br><span class="line"><span class="string">        dst (str): 目标文件路径</span></span><br><span class="line"><span class="string">        key (str/bytes): 加密密钥（字符串或字节序列）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        ValueError: 密钥为空时抛出异常</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 将密钥统一转换为字节序列</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">        key_bytes = key.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key_bytes = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> key_bytes:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;密钥不能为空&quot;</span>)</span><br><span class="line"></span><br><span class="line">    key_length = len(key_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(src, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f_in, open(dst, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">        global_index = <span class="number">0</span>  <span class="comment"># 跟踪全局字节位置</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = f_in.read(<span class="number">4096</span>)  <span class="comment"># 每次读取4KB的块</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 对每个字节进行异或加密</span></span><br><span class="line">            encrypted_chunk = bytes(</span><br><span class="line">                byte ^ key_bytes[(global_index + i) % key_length]</span><br><span class="line">                <span class="keyword">for</span> i, byte <span class="keyword">in</span> enumerate(chunk)</span><br><span class="line">            )</span><br><span class="line">            f_out.write(encrypted_chunk)</span><br><span class="line">            global_index += len(chunk)  <span class="comment"># 更新全局索引</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>参数验证：确保传入的路径参数是有效的字符串，并且文件路径存在。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li><li>异常处理：增加更多的异常处理，以应对各种可能的错误情况。</li><li>性能优化：确保每次读取和写入的块大小合理，避免内存占用过高。</li><li>返回值：在函数成功执行后返回一个有意义的值，例如目标文件路径。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypted_copy</span>(<span class="params">src, dst, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用异或运算加密二进制文件并保存到新路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    src (str): 源文件路径</span></span><br><span class="line"><span class="string">    dst (str): 目标文件路径</span></span><br><span class="line"><span class="string">    key (str/bytes): 加密密钥（字符串或字节序列）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    str: 成功加密后的目标文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 密钥为空时抛出异常</span></span><br><span class="line"><span class="string">    FileNotFoundError: 源文件不存在时抛出异常</span></span><br><span class="line"><span class="string">    PermissionError: 文件读取或写入权限不足时抛出异常</span></span><br><span class="line"><span class="string">    TypeError: 参数类型不正确时抛出异常</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证参数是否为字符串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(src, str) <span class="keyword">or</span> <span class="keyword">not</span> isinstance(dst, str):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;源文件路径和目标文件路径必须是字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证源文件是否存在且为文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(src):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;源文件 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 不存在或不是文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将密钥统一转换为字节序列</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">        key_bytes = key.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> isinstance(key, bytes):</span><br><span class="line">        key_bytes = key</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;密钥必须是字符串或字节序列&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> key_bytes:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;密钥不能为空&quot;</span>)</span><br><span class="line"></span><br><span class="line">    key_length = len(key_bytes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(src, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f_in, open(dst, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">            global_index = <span class="number">0</span>  <span class="comment"># 跟踪全局字节位置</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = f_in.read(<span class="number">4096</span>)  <span class="comment"># 每次读取4KB的块</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 对每个字节进行异或加密</span></span><br><span class="line">                encrypted_chunk = bytes(</span><br><span class="line">                    byte ^ key_bytes[(global_index + i) % key_length]</span><br><span class="line">                    <span class="keyword">for</span> i, byte <span class="keyword">in</span> enumerate(chunk)</span><br><span class="line">                )</span><br><span class="line">                f_out.write(encrypted_chunk)</span><br><span class="line">                global_index += len(chunk)  <span class="comment"># 更新全局索引</span></span><br><span class="line">            logging.info(<span class="string">f&quot;文件加密成功：从 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> dst</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;权限错误：无法读取源文件 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 或写入目标文件 &#x27;<span class="subst">&#123;dst&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;权限错误：无法读取源文件 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 或写入目标文件 &#x27;<span class="subst">&#123;dst&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;未知错误：无法加密文件 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;未知错误：无法加密文件 &#x27;<span class="subst">&#123;src&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = encrypted_copy(<span class="string">&quot;source.bin&quot;</span>, <span class="string">&quot;encrypted.bin&quot;</span>, <span class="string">&quot;mysecretkey&quot;</span>)</span><br><span class="line">        print(<span class="string">f&quot;文件加密成功，目标路径为: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;权限错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;参数错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;类型错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;未知错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h2><h3 id="题目-1-读取用户年龄函数-初级"><a href="#题目-1-读取用户年龄函数-初级" class="headerlink" title="题目 1: 读取用户年龄函数(初级)"></a><a href="/archives/20250303d948b0f0/#题目-1-读取用户年龄函数-初级">题目 1: 读取用户年龄函数(初级)</a></h3><ul><li>编写读取用户年龄的函数，处理非数字输入异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_valid_age</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环获取用户输入的年龄，确保输入为有效整数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            age = int(input(<span class="string">&quot;请输入年龄（整数）：&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> age  <span class="comment"># 输入有效时返回年龄</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;⚠️ 输入无效，请确保输入的是整数（如 25）&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    age = get_valid_age()</span><br><span class="line">    print(<span class="string">f&quot;您输入的年龄是：<span class="subst">&#123;age&#125;</span> 岁&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>输入范围验证：确保输入的年龄在合理的范围内（例如，0 到 120 岁）。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li><li>异常处理：增加更多的异常处理，以应对各种可能的错误情况。</li><li>返回值：在函数成功执行后返回一个有意义的值，例如有效的年龄。</li><li>用户提示：在用户输入无效时，提供更详细的提示信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_valid_age</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    循环获取用户输入的年龄，确保输入为有效整数，并在合理范围内（0 到 120 岁）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    int: 用户输入的有效年龄</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果输入的年龄不在合理范围内</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            age_input = input(<span class="string">&quot;请输入年龄（整数，0 到 120 岁）：&quot;</span>).strip()</span><br><span class="line">            age = int(age_input)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查年龄是否在合理范围内</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= age &lt;= <span class="number">120</span>:</span><br><span class="line">                logging.info(<span class="string">f&quot;用户输入的有效年龄: <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> age</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">f&quot;输入的年龄 <span class="subst">&#123;age&#125;</span> 不在合理范围内（0 到 120 岁）&quot;</span>)</span><br><span class="line">                print(<span class="string">&quot;⚠️ 输入的年龄不在合理范围内（0 到 120 岁），请重新输入。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            logging.warning(<span class="string">f&quot;输入无效: <span class="subst">&#123;age_input&#125;</span> 不是有效的整数&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;⚠️ 输入无效，请确保输入的是整数（如 25）。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        age = get_valid_age()</span><br><span class="line">        print(<span class="string">f&quot;您输入的年龄是：<span class="subst">&#123;age&#125;</span> 岁&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2-文件复制函数-中级"><a href="#题目-2-文件复制函数-中级" class="headerlink" title="题目 2: 文件复制函数(中级)"></a><a href="/archives/20250303d948b0f0/#题目-2-文件复制函数-中级">题目 2: 文件复制函数(中级)</a></h3><ul><li>创建文件复制函数，处理源文件不存在和目标路径无权限的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span>(<span class="params">src_path, dst_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;安全复制文件并处理常见异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        src_path (str): 源文件路径</span></span><br><span class="line"><span class="string">        dst_path (str): 目标文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        FileNotFoundError: 源文件不存在时抛出</span></span><br><span class="line"><span class="string">        PermissionError: 目录创建或文件写入权限不足时抛出</span></span><br><span class="line"><span class="string">        IsADirectoryError: 目标路径是目录时抛出</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证源文件存在且为文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(src_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;源文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 不存在或不是文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标目录（自动处理路径不存在的情况）</span></span><br><span class="line">    dst_dir = os.path.dirname(dst_path)</span><br><span class="line">    <span class="keyword">if</span> dst_dir:  <span class="comment"># 避免空路径情况</span></span><br><span class="line">        os.makedirs(dst_dir, exist_ok=<span class="literal">True</span>)  <span class="comment"># 自动处理目录已存在的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行文件复制操作</span></span><br><span class="line">    shutil.copy2(src_path, dst_path)  <span class="comment"># 保留文件元数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        copy_file(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;backup/copy.txt&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;文件复制成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;权限错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IsADirectoryError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;路径错误：目标位置是目录&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;未知错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>增强异常处理：增加更多的异常处理，以应对各种可能的错误情况，例如目标文件已存在的情况。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li><li>参数验证：确保传入的路径参数是有效的字符串。</li><li>返回值：在函数成功执行后返回一个有意义的值，例如目标文件路径。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span>(<span class="params">src_path, dst_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    安全复制文件并处理常见异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    src_path (str): 源文件路径</span></span><br><span class="line"><span class="string">    dst_path (str): 目标文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    str: 成功复制后的目标文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    FileNotFoundError: 源文件不存在时抛出</span></span><br><span class="line"><span class="string">    PermissionError: 目录创建或文件写入权限不足时抛出</span></span><br><span class="line"><span class="string">    IsADirectoryError: 目标路径是目录时抛出</span></span><br><span class="line"><span class="string">    FileExistsError: 目标文件已存在时抛出</span></span><br><span class="line"><span class="string">    ValueError: 参数不是有效的字符串时抛出</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证参数是否为字符串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(src_path, str) <span class="keyword">or</span> <span class="keyword">not</span> isinstance(dst_path, str):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;源文件路径和目标文件路径必须是字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证源文件存在且为文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(src_path):</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;源文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 不存在或不是文件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标目录（自动处理路径不存在的情况）</span></span><br><span class="line">    dst_dir = os.path.dirname(dst_path)</span><br><span class="line">    <span class="keyword">if</span> dst_dir:  <span class="comment"># 避免空路径情况</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.makedirs(dst_dir, exist_ok=<span class="literal">True</span>)  <span class="comment"># 自动处理目录已存在的情况</span></span><br><span class="line">        <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;无法创建目标目录 &#x27;<span class="subst">&#123;dst_dir&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查目标文件是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dst_path):</span><br><span class="line">        <span class="keyword">raise</span> FileExistsError(<span class="string">f&quot;目标文件 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27; 已存在&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行文件复制操作</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        shutil.copy2(src_path, dst_path)  <span class="comment"># 保留文件元数据</span></span><br><span class="line">        logging.info(<span class="string">f&quot;文件复制成功：从 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> dst_path</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;权限错误：无法复制文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;权限错误：无法复制文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;未知错误：无法复制文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;未知错误：无法复制文件 &#x27;<span class="subst">&#123;src_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;dst_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = copy_file(<span class="string">&quot;source.txt&quot;</span>, <span class="string">&quot;backup/copy.txt&quot;</span>)</span><br><span class="line">        print(<span class="string">f&quot;文件复制成功，目标路径为: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;权限错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> IsADirectoryError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;路径错误：目标位置是目录&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileExistsError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;文件已存在：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;参数错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;未知错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3-用户注册验证-高级"><a href="#题目-3-用户注册验证-高级" class="headerlink" title="题目 3: 用户注册验证(高级)"></a><a href="/archives/20250303d948b0f0/#题目-3-用户注册验证-高级">题目 3: 用户注册验证(高级)</a></h3><ul><li>实现带有自定义异常类（<code>InvalidEmailError</code>）的用户注册验证系统</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义异常类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidEmailError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义异常类，用于表示无效的电子邮件地址&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message=<span class="string">&quot;无效的电子邮件地址&quot;</span></span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line">        super().__init__(self.message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证电子邮件地址的正则表达式</span></span><br><span class="line">EMAIL_REGEX = re.compile(</span><br><span class="line">    <span class="string">r&quot;(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_email</span>(<span class="params">email</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证电子邮件地址的有效性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    email (str): 电子邮件地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    InvalidEmailError: 如果电子邮件地址无效</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> EMAIL_REGEX.match(email):</span><br><span class="line">        <span class="keyword">raise</span> InvalidEmailError(<span class="string">f&quot;无效的电子邮件地址: <span class="subst">&#123;email&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_user</span>(<span class="params">username, email</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    注册用户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    username (str): 用户名</span></span><br><span class="line"><span class="string">    email (str): 电子邮件地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    InvalidEmailError: 如果电子邮件地址无效</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        validate_email(email)</span><br><span class="line">        print(<span class="string">f&quot;用户 <span class="subst">&#123;username&#125;</span> 注册成功，电子邮件地址为 <span class="subst">&#123;email&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> InvalidEmailError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 测试有效的电子邮件地址</span></span><br><span class="line">    register_user(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试无效的电子邮件地址</span></span><br><span class="line">    register_user(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;bob@example&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>增强电子邮件验证：使用更严格的正则表达式来验证电子邮件地址。</li><li>用户输入验证：确保用户名和电子邮件地址不为空。</li><li>日志记录：使用日志记录来代替简单的 print 语句，以便更好地管理和分析日志信息。</li><li>异常处理：增加更多的异常处理，以应对各种可能的错误情况。</li><li>代码注释：增加更多的注释，以提高代码的可读性和可维护性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义异常类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidEmailError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义异常类，用于表示无效的电子邮件地址&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message=<span class="string">&quot;无效的电子邮件地址&quot;</span></span>):</span></span><br><span class="line">        self.message = message</span><br><span class="line">        super().__init__(self.message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证电子邮件地址的正则表达式</span></span><br><span class="line">EMAIL_REGEX = re.compile(</span><br><span class="line">    <span class="string">r&quot;(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_email</span>(<span class="params">email</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证电子邮件地址的有效性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    email (str): 电子邮件地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    InvalidEmailError: 如果电子邮件地址无效</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> email:</span><br><span class="line">        <span class="keyword">raise</span> InvalidEmailError(<span class="string">&quot;电子邮件地址不能为空&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> EMAIL_REGEX.match(email):</span><br><span class="line">        <span class="keyword">raise</span> InvalidEmailError(<span class="string">f&quot;无效的电子邮件地址: <span class="subst">&#123;email&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    验证用户名的有效性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    username (str): 用户名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果用户名无效</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> username:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;用户名不能为空&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_user</span>(<span class="params">username, email</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    注册用户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    username (str): 用户名</span></span><br><span class="line"><span class="string">    email (str): 电子邮件地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    InvalidEmailError: 如果电子邮件地址无效</span></span><br><span class="line"><span class="string">    ValueError: 如果用户名无效</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        validate_username(username)</span><br><span class="line">        validate_email(email)</span><br><span class="line">        logging.info(<span class="string">f&quot;用户 <span class="subst">&#123;username&#125;</span> 注册成功，电子邮件地址为 <span class="subst">&#123;email&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> InvalidEmailError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(e)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 测试有效的电子邮件地址</span></span><br><span class="line">    register_user(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试无效的电子邮件地址</span></span><br><span class="line">    register_user(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;bob@example&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试空用户名</span></span><br><span class="line">    register_user(<span class="string">&quot;&quot;</span>, <span class="string">&quot;bob@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试空电子邮件地址</span></span><br><span class="line">    register_user(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-导入模块（import）"><a href="#1-导入模块（import）" class="headerlink" title="1. 导入模块（import）"></a>1. 导入模块（<code>import</code>）</h2><h3 id="题目-1-生成随机整数-初级"><a href="#题目-1-生成随机整数-初级" class="headerlink" title="题目 1: 生成随机整数(初级)"></a><a href="/archives/2025030562adce42/#题目-1-生成随机整数-初级">题目 1: 生成随机整数(初级)</a></h3><ul><li>编写脚本导入<code>random</code>模块，生成 10 个 1-100 的随机整数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 10 个随机整数</span></span><br><span class="line">random_numbers = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果（可选两种格式）</span></span><br><span class="line">print(<span class="string">&quot;生成的随机数:&quot;</span>, random_numbers)        <span class="comment"># 列表格式输出</span></span><br><span class="line"><span class="comment"># print(&quot;生成的随机数:&quot;, *random_numbers)     # 展开平铺输出</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>函数封装：将生成随机整数的逻辑封装到一个函数 generate_random_numbers 中，提高代码的可重用性和可读性。</li><li>参数化：允许用户指定生成随机整数的数量、起始范围和结束范围，使函数更加灵活。</li><li>文档字符串：为函数添加了详细的文档字符串，说明函数的作用、参数和返回值，便于他人理解和使用。</li><li>注释：增加了注释，解释代码的主要部分，提高代码的可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_random_numbers</span>(<span class="params">count=<span class="number">10</span>, start=<span class="number">1</span>, end=<span class="number">100</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成指定数量的随机整数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    count (int): 生成的随机整数数量，默认为 10。</span></span><br><span class="line"><span class="string">    start (int): 随机整数的起始范围，默认为 1。</span></span><br><span class="line"><span class="string">    end (int): 随机整数的结束范围，默认为 100。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    list: 包含生成的随机整数的列表。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [random.randint(start, end) <span class="keyword">for</span> _ <span class="keyword">in</span> range(count)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 10 个随机整数</span></span><br><span class="line">random_numbers = generate_random_numbers()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果（可选两种格式）</span></span><br><span class="line">print(<span class="string">&quot;生成的随机数:&quot;</span>, random_numbers)        <span class="comment"># 列表格式输出</span></span><br><span class="line"><span class="comment"># print(&quot;生成的随机数:&quot;, *random_numbers)     # 展开平铺输出</span></span><br></pre></td></tr></table></figure><h3 id="题目-2-导入并使用函数-中级"><a href="#题目-2-导入并使用函数-中级" class="headerlink" title="题目 2: 导入并使用函数(中级)"></a><a href="/archives/2025030562adce42/#题目-2-导入并使用函数-中级">题目 2: 导入并使用函数(中级)</a></h3><ul><li>创建自定义模块<code>geometry.py</code>，包含计算圆面积的函数<code>circle_area(r)</code>，在主程序中导入并使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geometry.py</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_area</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算圆的面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        r (float/int): 圆的半径（必须为非负数）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: 圆的面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        ValueError: 当半径 r 为负数时触发异常</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;半径不能为负数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> math.pi * (r ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> geometry <span class="keyword">import</span> circle_area</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算半径为5的圆面积</span></span><br><span class="line">radius = <span class="number">5</span></span><br><span class="line">area = circle_area(radius)</span><br><span class="line">print(<span class="string">f&quot;半径为 <span class="subst">&#123;radius&#125;</span> 的圆面积: <span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试非法输入（负数半径）</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    circle_area(<span class="number">-3</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&quot;错误捕获:&quot;</span>, e)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>类型检查：<ul><li>在 circle_area 函数中添加了类型检查，确保传入的半径是数字类型（整数或浮点数），否则抛出 TypeError。</li></ul></li><li>函数封装：<ul><li>在 main.py 中将计算和打印圆面积的逻辑封装到 calculate_and_print_circle_area 函数中，提高代码的可重用性和可读性。</li></ul></li><li>异常处理：<ul><li>在 main.py 中增加了对 TypeError 的捕获，确保程序在用户输入非数字类型的半径时不会崩溃，并给出友好的错误提示。</li></ul></li><li>代码注释：<ul><li>增加了更多的注释，解释代码的主要部分，提高代码的可读性和可维护性。</li></ul></li><li>文档字符串：<ul><li>为 circle_area 函数添加了详细的文档字符串，说明函数的作用、参数、返回值和可能抛出的异常，便于他人理解和使用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># geometry.py</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_area</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算圆的面积。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    r (float/int): 圆的半径（必须为非负数）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    float: 圆的面积。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果半径 r 为负数。</span></span><br><span class="line"><span class="string">    TypeError: 如果半径 r 不是数字类型。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(r, (int, float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;半径必须是数字类型&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;半径不能为负数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> math.pi * (r ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> geometry <span class="keyword">import</span> circle_area</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_and_print_circle_area</span>(<span class="params">radius</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算并打印给定半径的圆的面积。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    radius (float/int): 圆的半径。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        area = circle_area(radius)</span><br><span class="line">        print(<span class="string">f&quot;半径为 <span class="subst">&#123;radius&#125;</span> 的圆面积: <span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;值错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;类型错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算半径为5的圆面积</span></span><br><span class="line">calculate_and_print_circle_area(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试非法输入（负数半径）</span></span><br><span class="line">calculate_and_print_circle_area(<span class="number">-3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试非法输入（非数字类型）</span></span><br><span class="line">calculate_and_print_circle_area(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3-动态更新模块代码-高级"><a href="#题目-3-动态更新模块代码-高级" class="headerlink" title="题目 3: 动态更新模块代码(高级)"></a><a href="/archives/2025030562adce42/#题目-3-动态更新模块代码-高级">题目 3: 动态更新模块代码(高级)</a></h3><ul><li>实现模块热重载功能：通过<code>importlib.reload()</code>动态更新正在运行的模块代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hot_reload_demo.py</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> FileSystemEventHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"><span class="comment"># 热重载核心控制器</span></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotReloader</span>(<span class="params">FileSystemEventHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, module_names</span>):</span></span><br><span class="line">        self.module_names = module_names</span><br><span class="line">        self.last_reload = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;文件修改事件处理器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> time.time() - self.last_reload &lt; <span class="number">1</span>:  <span class="comment"># 防抖处理</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.src_path.endswith(<span class="string">&#x27;.py&#x27;</span>):</span><br><span class="line">            print(<span class="string">f&quot;\n检测到文件变动: <span class="subst">&#123;event.src_path&#125;</span>&quot;</span>)</span><br><span class="line">            self.reload_modules()</span><br><span class="line">            self.last_reload = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reload_modules</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行模块重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.module_names:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> sys.modules:</span><br><span class="line">                print(<span class="string">f&quot;重新加载模块: <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">                module = sys.modules[name]</span><br><span class="line">                importlib.reload(module)</span><br><span class="line">                self.update_references(module)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_references</span>(<span class="params">self, module</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新全局引用（演示动态替换函数和类）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果模块中存在需要热替换的函数</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(module, <span class="string">&#x27;dynamic_function&#x27;</span>):</span><br><span class="line">            globals()[<span class="string">&#x27;dynamic_function&#x27;</span>] = module.dynamic_function</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果模块中存在需要热替换的类</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(module, <span class="string">&#x27;DynamicClass&#x27;</span>):</span><br><span class="line">            <span class="comment"># 替换类定义</span></span><br><span class="line">            globals()[<span class="string">&#x27;DynamicClass&#x27;</span>] = module.DynamicClass</span><br><span class="line">            <span class="comment"># 更新现有实例的方法（高级用法）</span></span><br><span class="line">            <span class="keyword">for</span> obj <span class="keyword">in</span> list(globals().values()):</span><br><span class="line">                <span class="keyword">if</span> isinstance(obj, module.DynamicClass):</span><br><span class="line">                    obj.__class__ = module.DynamicClass</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_hot_reload</span>(<span class="params">modules_to_watch</span>):</span></span><br><span class="line">    <span class="comment"># 初始化监控器</span></span><br><span class="line">    event_handler = HotReloader(modules_to_watch)</span><br><span class="line">    observer = Observer()</span><br><span class="line">    observer.schedule(event_handler, path=<span class="string">&#x27;.&#x27;</span>, recursive=<span class="literal">False</span>)</span><br><span class="line">    observer.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&quot;热重载监控已启动，修改文件后会自动更新...&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        observer.stop()</span><br><span class="line">    observer.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 初始加载目标模块</span></span><br><span class="line">    <span class="keyword">import</span> demo_module  <span class="comment"># 假设这是需要热重载的模块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动热重载监控</span></span><br><span class="line">    start_hot_reload([<span class="string">&#x27;demo_module&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo_module.py</span></span><br><span class="line">version = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dynamic_function</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;原始函数&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = <span class="string">&quot;初始数据&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;Class version: <span class="subst">&#123;version&#125;</span>, Data: <span class="subst">&#123;self.data&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-常用标准库（os、sys、math、random）"><a href="#2-常用标准库（os、sys、math、random）" class="headerlink" title="2. 常用标准库（os、sys、math、random）"></a>2. 常用标准库（<code>os</code>、<code>sys</code>、<code>math</code>、<code>random</code>）</h2><h3 id="题目-1-二次方程求根公式-初级"><a href="#题目-1-二次方程求根公式-初级" class="headerlink" title="题目 1: 二次方程求根公式(初级)"></a><a href="/archives/2025030562adce42/#题目-1-二次方程求根公式-初级">题目 1: 二次方程求根公式(初级)</a></h3><ul><li>使用<code>math</code>模块实现二次方程求根公式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic_roots</span>(<span class="params">a: float, b: float, c: float</span>) -&gt; tuple:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算二次方程 ax² + bx + c = 0 的根</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a: 二次项系数（不能为0）</span></span><br><span class="line"><span class="string">        b: 一次项系数</span></span><br><span class="line"><span class="string">        c: 常数项</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: 包含两个根的元组，可能为实数或复数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        ValueError: 当 a=0 时抛出（非二次方程）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;二次项系数 a 不能为零&quot;</span>)</span><br><span class="line"></span><br><span class="line">    discriminant = b**<span class="number">2</span> - <span class="number">4</span>*a*c  <span class="comment"># 计算判别式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据判别式类型分情况处理</span></span><br><span class="line">    <span class="keyword">if</span> discriminant &gt;= <span class="number">0</span>:</span><br><span class="line">        sqrt_d = math.sqrt(discriminant)</span><br><span class="line">        root1 = (-b + sqrt_d) / (<span class="number">2</span>*a)</span><br><span class="line">        root2 = (-b - sqrt_d) / (<span class="number">2</span>*a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 处理复数根</span></span><br><span class="line">        sqrt_d = math.sqrt(-discriminant)</span><br><span class="line">        real_part = -b / (<span class="number">2</span>*a)</span><br><span class="line">        imag_part = sqrt_d / (<span class="number">2</span>*a)</span><br><span class="line">        root1 = complex(real_part, imag_part)</span><br><span class="line">        root2 = complex(real_part, -imag_part)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (root1, root2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 案例1：两个实数根（x²-5x+6=0）</span></span><br><span class="line">    print(quadratic_roots(<span class="number">1</span>, <span class="number">-5</span>, <span class="number">6</span>))    <span class="comment"># 输出 (3.0, 2.0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 案例2：重复根（x²+2x+1=0）</span></span><br><span class="line">    print(quadratic_roots(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>))     <span class="comment"># 输出 (-1.0, -1.0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 案例3：复数根（x²+x+1=0）</span></span><br><span class="line">    print(quadratic_roots(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))     <span class="comment"># 输出 ((-0.5+0.866j), (-0.5-0.866j))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 非法输入测试</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        quadratic_roots(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)  <span class="comment"># 输出 &quot;二次项系数 a 不能为零&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题目-2-当前目录代码行数-中级"><a href="#题目-2-当前目录代码行数-中级" class="headerlink" title="题目 2: 当前目录代码行数(中级)"></a><a href="/archives/2025030562adce42/#题目-2-当前目录代码行数-中级">题目 2: 当前目录代码行数(中级)</a></h3><ul><li>编写脚本用<code>os</code>遍历当前目录，统计所有.py 文件的行数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_lines_in_py_files</span>(<span class="params">directory</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    统计指定目录下所有 .py 文件的行数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    directory (str): 要遍历的目录路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    int: 所有 .py 文件的总行数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total_lines = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历目录及其子目录中的所有文件</span></span><br><span class="line">    <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.py&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(root, file)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> open(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        total_lines += sum(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> f)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    print(<span class="string">f&quot;无法读取文件 <span class="subst">&#123;file_path&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_lines</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">current_directory = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前目录下所有 .py 文件的行数</span></span><br><span class="line">total_lines = count_lines_in_py_files(current_directory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">print(<span class="string">f&quot;当前目录下所有 .py 文件的总行数是: <span class="subst">&#123;total_lines&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题目-3-文本过滤器-高级"><a href="#题目-3-文本过滤器-高级" class="headerlink" title="题目 3: 文本过滤器(高级)"></a><a href="/archives/2025030562adce42/#题目-3-文本过滤器-高级">题目 3: 文本过滤器(高级)</a></h3><ul><li>利用<code>sys.stdin</code>实现一个支持管道操作的文本过滤器（如将输入转为大写）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_uppercase</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从标准输入读取文本，并将其转换为大写后输出到标准输出。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">            <span class="comment"># 去除行末的换行符，并转换为大写</span></span><br><span class="line">            print(line.strip().upper())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    to_uppercase()</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-安装和使用第三方库（pip）"><a href="#3-安装和使用第三方库（pip）" class="headerlink" title="3. 安装和使用第三方库（pip）"></a>3. 安装和使用第三方库（<code>pip</code>）</h2><h3 id="题目-1-图片转为灰度图-初级"><a href="#题目-1-图片转为灰度图-初级" class="headerlink" title="题目 1: 图片转为灰度图(初级)"></a><a href="/archives/2025030562adce42/#题目-1-图片转为灰度图-初级">题目 1: 图片转为灰度图(初级)</a></h3><ul><li>安装<code>pillow</code>库并编写脚本将图片转为灰度图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志记录</span></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_grayscale</span>(<span class="params">input_path, output_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将指定路径的图片转换为灰度图并保存到指定路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    input_path (str): 输入图片的路径。</span></span><br><span class="line"><span class="string">    output_path (str): 输出灰度图的路径。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    异常:</span></span><br><span class="line"><span class="string">    ValueError: 如果输入路径不是有效的图片文件。</span></span><br><span class="line"><span class="string">    FileNotFoundError: 如果输入文件不存在。</span></span><br><span class="line"><span class="string">    PermissionError: 如果文件读取或写入权限不足。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 打开输入图片</span></span><br><span class="line">        <span class="keyword">with</span> Image.open(input_path) <span class="keyword">as</span> img:</span><br><span class="line">            <span class="comment"># 将图片转换为灰度图</span></span><br><span class="line">            grayscale_img = img.convert(<span class="string">&quot;L&quot;</span>)</span><br><span class="line">            <span class="comment"># 保存灰度图到输出路径</span></span><br><span class="line">            grayscale_img.save(output_path)</span><br><span class="line">            logging.info(<span class="string">f&quot;图片已成功转换为灰度图：从 &#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 到 &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;文件未找到：&#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">f&quot;文件未找到：&#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;权限错误：无法读取文件 &#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 或写入文件 &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> PermissionError(<span class="string">f&quot;权限错误：无法读取文件 &#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 或写入文件 &#x27;<span class="subst">&#123;output_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;值错误：&#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 不是有效的图片文件&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;值错误：&#x27;<span class="subst">&#123;input_path&#125;</span>&#x27; 不是有效的图片文件&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;未知错误：无法转换图片 &#x27;<span class="subst">&#123;input_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;未知错误：无法转换图片 &#x27;<span class="subst">&#123;input_path&#125;</span>&#x27;：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">        print(<span class="string">&quot;使用方法: python script.py &lt;输入图片路径&gt; &lt;输出图片路径&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    input_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    output_path = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        convert_to_grayscale(input_path, output_path)</span><br><span class="line">        print(<span class="string">f&quot;图片已成功转换为灰度图，保存到: <span class="subst">&#123;output_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;操作失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题目-2-项目依赖-中级"><a href="#题目-2-项目依赖-中级" class="headerlink" title="题目 2: 项目依赖(中级)"></a><a href="/archives/2025030562adce42/#题目-2-项目依赖-中级">题目 2: 项目依赖(中级)</a></h3><ul><li>创建<code>requirements.txt</code>文件管理项目依赖，包含<code>flask&gt;=2.0</code>和<code>sqlalchemy&lt;1.4</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题目-3-模块打包上传-高级"><a href="#题目-3-模块打包上传-高级" class="headerlink" title="题目 3: 模块打包上传(高级)"></a><a href="/archives/2025030562adce42/#题目-3-模块打包上传-高级">题目 3: 模块打包上传(高级)</a></h3><ul><li>将自己编写的 Python 模块打包上传至 PyPI，并通过<code>pip</code>安装测试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>XXX</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDufP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="参考答案" scheme="https://www.gaotianyang.top/tags/%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识</title>
    <link href="https://www.gaotianyang.top/archives/202502214537ccef/"/>
    <id>https://www.gaotianyang.top/archives/202502214537ccef/</id>
    <published>2025-02-21T12:15:14.000Z</published>
    <updated>2025-03-01T15:08:37.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDZTA.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Python-学习计划"><a href="#Python-学习计划" class="headerlink" title="Python 学习计划"></a>Python 学习计划</h2><h3 id="学习计划概述"><a href="#学习计划概述" class="headerlink" title="学习计划概述"></a>学习计划概述</h3><ul><li><strong>目标语言</strong>：Python</li><li><strong>学习周期</strong>：2 周</li><li><strong>学习方法</strong>：二八法则（80-20 原则），专注于 20% 的核心概念，快速掌握 Python 的基础并能够构建项目。</li></ul><h2 id="第-1-周：Python-基础核心"><a href="#第-1-周：Python-基础核心" class="headerlink" title="第 1 周：Python 基础核心"></a>第 1 周：Python 基础核心</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>掌握 Python 的基础语法和核心概念，能够编写简单的脚本。</p><h4 id="Day-1-2：Python-基础语法"><a href="#Day-1-2：Python-基础语法" class="headerlink" title="Day 1-2：Python 基础语法"></a>Day 1-2：<a href="/archives/2025022423fce97e/">Python 基础语法</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/2025022423fce97e/#1-变量与数据类型">变量与数据类型（整数、浮点数、字符串、布尔值）</a></li><li><a href="/archives/2025022423fce97e/#2-输入输出">输入输出（<code>print()</code> 和 <code>input()</code>）</a></li><li><a href="/archives/2025022423fce97e/#3-基本运算符">基本运算符（算术、比较、逻辑）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个简单的计算器程序。</li><li>编写一个程序，询问用户姓名并输出问候语。</li></ul></li></ul><h4 id="Day-3-4：控制流程"><a href="#Day-3-4：控制流程" class="headerlink" title="Day 3-4：控制流程"></a>Day 3-4：<a href="/archives/20250226d92cbff1/">控制流程</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250226d92cbff1/#1-条件语句">条件语句（<code>if</code>、<code>elif</code>、<code>else</code>）</a></li><li><a href="/archives/20250226d92cbff1/#2-循环">循环（<code>for</code> 循环、<code>while</code> 循环）</a></li><li><a href="/archives/20250226d92cbff1/#3-break-和-continue"><code>break</code> 和 <code>continue</code></a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，判断用户输入的数字是奇数还是偶数。</li><li>编写一个程序，打印 1 到 100 的所有质数。</li></ul></li></ul><h4 id="Day-5-6：函数"><a href="#Day-5-6：函数" class="headerlink" title="Day 5-6：函数"></a>Day 5-6：<a href="/archives/20250228c8f562d1/">函数</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250228c8f562d1/#1-定义函数">定义函数（<code>def</code>）</a></li><li><a href="/archives/20250228c8f562d1/#2-函数参数与返回值">函数参数与返回值</a></li><li><a href="/archives/20250228c8f562d1/#3-局部变量与全局变量">局部变量与全局变量</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个函数，计算两个数的最大公约数（GCD）。</li><li>编写一个函数，判断一个字符串是否是回文。</li></ul></li></ul><h4 id="Day-7：数据结构"><a href="#Day-7：数据结构" class="headerlink" title="Day 7：数据结构"></a>Day 7：<a href="/archives/2025030222c892e4/">数据结构</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/2025030222c892e4/#1-列表">列表（<code>list</code>）：增删改查、切片</a></li><li><a href="/archives/2025030222c892e4/#2-字典">字典（<code>dict</code>）：键值对操作</a></li><li><a href="/archives/2025030222c892e4/#3-元组和集合">元组（<code>tuple</code>）和集合（<code>set</code>）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，统计一段文本中每个单词的出现次数。</li><li>编写一个程序，合并两个列表并去重。</li></ul></li></ul><h2 id="第-2-周：Python-进阶与项目准备"><a href="#第-2-周：Python-进阶与项目准备" class="headerlink" title="第 2 周：Python 进阶与项目准备"></a>第 2 周：Python 进阶与项目准备</h2><h3 id="进阶学习目标"><a href="#进阶学习目标" class="headerlink" title="进阶学习目标"></a>进阶学习目标</h3><p>掌握 Python 的进阶概念，能够处理文件、异常和模块化编程，为项目开发做准备。</p><h4 id="Day-1-2：文件操作与异常处理"><a href="#Day-1-2：文件操作与异常处理" class="headerlink" title="Day 1-2：文件操作与异常处理"></a>Day 1-2：<a href="/archives/20250303d948b0f0/">文件操作与异常处理</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250303d948b0f0/#1-文件读写">文件读写（<code>open()</code>、<code>read()</code>、<code>write()</code>）</a></li><li><a href="/archives/20250303d948b0f0/#2-异常处理">异常处理（<code>try</code>、<code>except</code>、<code>finally</code>）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，读取一个文本文件并统计行数。</li><li>编写一个程序，处理用户输入时的异常（如非数字输入）。</li></ul></li></ul><h4 id="Day-3-4：模块与库"><a href="#Day-3-4：模块与库" class="headerlink" title="Day 3-4：模块与库"></a>Day 3-4：<a href="/archives/2025030562adce42/">模块与库</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/2025030562adce42/#1-导入模块（import）">导入模块（<code>import</code>）</a></li><li><a href="/archives/2025030562adce42/#2-常用标准库（os、sys、math、random）">常用标准库（<code>os</code>、<code>sys</code>、<code>math</code>、<code>random</code>）</a></li><li><a href="/archives/2025030562adce42/#3-安装和使用第三方库（pip）">安装和使用第三方库（<code>pip</code>）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，使用 <code>random</code> 模块生成随机密码。</li><li>编写一个程序，使用 <code>os</code> 模块列出当前目录下的所有文件。</li></ul></li></ul><h4 id="Day-5-6：面向对象编程（OOP）"><a href="#Day-5-6：面向对象编程（OOP）" class="headerlink" title="Day 5-6：面向对象编程（OOP）"></a>Day 5-6：<a href="/archives/20250307a70bebd8/">面向对象编程（OOP）</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250307a70bebd8/#1-类与对象">类与对象</a></li><li><a href="/archives/20250307a70bebd8/#2-属性与方法">属性与方法</a></li><li><a href="/archives/20250307a70bebd8/#3-继承与多态">继承与多态</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个简单的类，表示一个学生（属性：姓名、成绩；方法：计算平均分）。</li><li>编写一个类，表示一个银行账户（属性：余额；方法：存款、取款）。</li></ul></li></ul><h4 id="Day-7：项目规划与工具"><a href="#Day-7：项目规划与工具" class="headerlink" title="Day 7：项目规划与工具"></a>Day 7：<a href="/archives/20250309726318bf/">项目规划与工具</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250309726318bf/#1-项目结构规划">项目结构规划</a></li><li><a href="/archives/20250309726318bf/#2-使用版本控制（git）">使用版本控制（<code>git</code>）</a></li><li><a href="/archives/20250309726318bf/#3-虚拟环境（venv）">虚拟环境（<code>venv</code>）</a></li></ul></li><li><strong>练习</strong>：<ul><li>创建一个虚拟环境并安装 Flask。</li><li>初始化一个 <code>git</code> 仓库并提交代码。</li></ul></li></ul><h2 id="5-个难度递增的项目"><a href="#5-个难度递增的项目" class="headerlink" title="5 个难度递增的项目"></a>5 个难度递增的项目</h2><h3 id="项目-1：简单的待办事项列表（To-Do-List）"><a href="#项目-1：简单的待办事项列表（To-Do-List）" class="headerlink" title="项目 1：简单的待办事项列表（To-Do List）"></a>项目 1：简单的待办事项列表（To-Do List）</h3><ul><li><strong>描述</strong>：创建一个命令行待办事项列表，用户可以添加、查看和删除任务。</li><li><strong>关键概念</strong>：<ul><li>列表操作</li><li>函数封装</li><li>用户输入处理</li></ul></li></ul><h3 id="项目-2：天气查询工具"><a href="#项目-2：天气查询工具" class="headerlink" title="项目 2：天气查询工具"></a>项目 2：天气查询工具</h3><ul><li><strong>描述</strong>：使用第三方 API（如 OpenWeatherMap）获取用户输入城市的天气信息。</li><li><strong>关键概念</strong>：<ul><li>请求库（<code>requests</code>）</li><li>JSON 数据处理</li><li>异常处理</li></ul></li></ul><h3 id="项目-3：简单的博客系统（Flask）"><a href="#项目-3：简单的博客系统（Flask）" class="headerlink" title="项目 3：简单的博客系统（Flask）"></a>项目 3：简单的博客系统（Flask）</h3><ul><li><strong>描述</strong>：使用 Flask 创建一个简单的博客系统，支持发布和查看文章。</li><li><strong>关键概念</strong>：<ul><li>Flask 路由</li><li>HTML 模板渲染</li><li>表单处理</li></ul></li></ul><h3 id="项目-4：数据可视化工具"><a href="#项目-4：数据可视化工具" class="headerlink" title="项目 4：数据可视化工具"></a>项目 4：数据可视化工具</h3><ul><li><strong>描述</strong>：使用 <code>matplotlib</code> 或 <code>seaborn</code> 对 CSV 文件中的数据进行可视化。</li><li><strong>关键概念</strong>：<ul><li>文件读取</li><li>数据清洗</li><li>数据可视化</li></ul></li></ul><h3 id="项目-5：个人财务管理工具"><a href="#项目-5：个人财务管理工具" class="headerlink" title="项目 5：个人财务管理工具"></a>项目 5：个人财务管理工具</h3><ul><li><strong>描述</strong>：创建一个命令行工具，帮助用户记录收入和支出，并生成简单的财务报表。</li><li><strong>关键概念</strong>：<ul><li>面向对象编程</li><li>文件持久化</li><li>数据分析</li></ul></li></ul><h3 id="项目-6：基于-Flask-Restful-api-mysql-的后端项目，使用-docker-部署"><a href="#项目-6：基于-Flask-Restful-api-mysql-的后端项目，使用-docker-部署" class="headerlink" title="项目 6：基于 Flask + Restful api + mysql 的后端项目，使用 docker 部署"></a>项目 6：基于 Flask + Restful api + mysql 的后端项目，使用 docker 部署</h3><ul><li><strong>描述</strong>：创建一个基于 Flask 和 Restful API 的后端应用，结合 MySQL 数据库存储数据，并使用 Docker 进行部署。该应用旨在帮助用户通过 API 接口记录任务，并生成简单的任务记录。用户可以通过 API 添加、查询、更新和删除任务记录，方便用户进行任务管理。</li><li><strong>关键概念</strong>：<ul><li>Flask 框架：用于构建轻量级的 Web 应用程序，提供路由、请求处理等功能。</li><li>Restful API：遵循 REST 架构风格设计的 API，支持常见的 HTTP 方法（GET、POST、PUT、DELETE），实现与前端或其他服务的交互。</li><li>MySQL 数据库：用于持久化存储用户的任务记录，确保数据的安全性和可靠性。</li><li>Docker 容器化：使用 Docker 将应用及其依赖打包成容器，简化部署流程，确保开发环境与生产环境的一致性。</li><li>面向对象编程 (OOP)：通过定义类和对象来组织代码，提高代码的可维护性和复用性。</li><li>API 文档：编写详细的 API 文档，方便开发者和用户了解如何使用 API 进行操作。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>2 周学习计划</strong>：专注于 Python 的核心语法和常用功能，快速掌握基础知识。</li><li><strong>5 个项目</strong>：从简单到复杂，逐步提升编程能力，覆盖 Python 的核心概念和实际应用。</li><li><strong>学习方法</strong>：通过实践和项目驱动学习，培养独立解决问题的能力。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDZTA.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AI学习Prompt</title>
    <link href="https://www.gaotianyang.top/archives/2025022044c50b8a/"/>
    <id>https://www.gaotianyang.top/archives/2025022044c50b8a/</id>
    <published>2025-02-20T12:19:14.000Z</published>
    <updated>2025-02-23T00:18:33.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDVwd.jpg" alt="首屏图"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在快速发展的 AI 时代，掌握有效的学习方法对于技术爱好者和从业者至关重要。本指南旨在帮助您利用 AI 辅助学习，快速掌握新技术的核心概念，并通过实践项目巩固所学知识。</p><p>我参考数字游牧人的视频，提供了两个实用的学习模板，模板如下：</p><h2 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[X]是技术名称 ## [X]是Python</span><br><span class="line">[Y]是时间周期 ## [Y]是2</span><br><span class="line"></span><br><span class="line">我想学习[X]。请按照二八法则 （80-20 原则）制定一个全面的学习计划，重点关注能让我开始构建项目的 20%核心概念。请将计划按周安排，总计[Y]周，每周涵盖特定的学习主题。</span><br><span class="line">在完成这[Y]周的核心学习后，请推荐 5 个难度递增的项目（从入门到进阶），帮助我应用和拓展[X]的知识。对于每个项目，请提供简要描述并列出它将帮助强化的关键概念。</span><br><span class="line">请确保计划详细到足以让初学者跟随，同时也要有足够的挑战性来培养独立思考和解决问题的能力。</span><br></pre></td></tr></table></figure><p><a href="/archives/202502214537ccef/">使用范例</a></p><h2 id="技术各章节知识点学习"><a href="#技术各章节知识点学习" class="headerlink" title="技术各章节知识点学习"></a>技术各章节知识点学习</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[X]是技术名称 ## [X]是Python</span><br><span class="line">[Z]是知识点名称 ## [Z]是知识点名称</span><br><span class="line"></span><br><span class="line">我正在学习[X]中的[Z]。请提供：</span><br><span class="line"></span><br><span class="line">1. 简明扼要地解释[Z]，包括其用途和常见使用用场景。</span><br><span class="line">2. 一个演示[Z]的简单代码示例。</span><br><span class="line">3. 初学者关于[Z]常见的三个错误或误解，以及如何避免它们。</span><br><span class="line">4. 两个[Z]特别有用的实际应用场景或用例。</span><br><span class="line">5. 三个难度递进的练习题，帮助我练习使用[Z]。请只提供题目描述，不要提供解答。</span><br><span class="line"></span><br><span class="line">在提供以上信息后，请向我提出一个关于[Z]的发人深省的问题，引导我更深入地思考它的应用或影响。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>数字游牧人的视频：<a href="https://www.bilibili.com/video/BV1DkwYegEPS">微软码农致全地球人，0 基础 AI 编程速成指南【干货分享】</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDVwd.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="AI" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/AI/"/>
    
    <category term="Prompt" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/AI/Prompt/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="AI" scheme="https://www.gaotianyang.top/tags/AI/"/>
    
    <category term="Prompt" scheme="https://www.gaotianyang.top/tags/Prompt/"/>
    
  </entry>
  
  <entry>
    <title>从业经历给我带来的成长与感悟</title>
    <link href="https://www.gaotianyang.top/archives/20250214ff1a378a/"/>
    <id>https://www.gaotianyang.top/archives/20250214ff1a378a/</id>
    <published>2025-02-14T01:23:57.000Z</published>
    <updated>2025-02-14T04:07:49.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/14/pEuXLff.jpg" alt="首屏图"></p><a id="more"></a><h2 id="轨道交通行业的收获：时间观念与细节意识"><a href="#轨道交通行业的收获：时间观念与细节意识" class="headerlink" title="轨道交通行业的收获：时间观念与细节意识"></a>轨道交通行业的收获：时间观念与细节意识</h2><p>在轨道交通行业，教会了我，时间就是效率，让我对时间管理有了极高的要求，个人的时间出现延误问题，就会牵一发动全身，对整个团队造成影响。以及细节决定成败，因为细节关乎安全，而安全是重中之重。这段经历，为我后续的职业转型奠定了坚实的基础。</p><h2 id="互联网行业的成长：团队、行业选择与技术市场关系"><a href="#互联网行业的成长：团队、行业选择与技术市场关系" class="headerlink" title="互联网行业的成长：团队、行业选择与技术市场关系"></a>互联网行业的成长：团队、行业选择与技术市场关系</h2><p>在后来进入互联网行业，我也收获了很多，首先是要找到一个好的团队，不论是职业素养，还是专业程度，又或者是团队氛围，都是好团队的不同标尺。再有，就是要选择一个好的行业，好的赛道。我从互联网金融，转到物联网，再到数据平台，以及医疗行业，使我逐步形成了这个概念。团队的强弱，决定了事情的下限，而行业的优劣，决定了事情的上限。</p><p>再次就是技术与市场的关系，我认为，技术与市场是相辅相成的。好的技术可以帮助产品去在竞品中获取优势，但不可过分执着于技术，而是应该把市场作为导向，由技术去辅佐达成目标。因为如果没有市场的正向反馈，产品的生命力就会大打折扣。回顾下来，其实我们也开发过不少的产品，不敢说多么优秀，但是也不应该算差的那一类。那么为什么没有成功的产品呢，我感觉还是对市场的敏感度不够强，在当下的大环境下，让投资者或者老板，去无条件的相信你的产品未来可期，是不够的。因此，我们需要站在更高的视野，对产品进行全面规划与设计。但是要以核心功能为发力点，快速迭代出一个可以落地的基础版本，避免闭门造车。这些经历让我逐渐意识到，职业发展不仅需要技术和团队的支持，更需要清晰的自我认知和规划。</p><h2 id="个人反思与未来规划：慢下来思考，尝试新的方向"><a href="#个人反思与未来规划：慢下来思考，尝试新的方向" class="headerlink" title="个人反思与未来规划：慢下来思考，尝试新的方向"></a>个人反思与未来规划：慢下来思考，尝试新的方向</h2><p>在 2024 年，我看到身边的朋友，伙伴们事业有成，家庭美满，也让我也去思考，我还有什么不足之处。有些是在公司里，做到了技术骨干的位置，有些是家庭上，添丁进口。因此，这一年我感觉我有些迷惘，感觉来到了十字路口，向左走？向右走？还是继续向前？坚持下去是对的吗？焦虑和困惑会慢慢在不经意间向我袭来，一度让我迷失了方向。因此我选择了慢下来，给自己一个充分的思考空间，不急于做决定，多看，多想，多尝试。并且也和爱人利用这宝贵的闲暇时间，一起多出去走走看看，弥补一下在一起多年来，因工作忙一直没什么机会一起出去的遗憾。在慢下来的过程中，让我逐渐找到内心的平静。</p><p>我尝试过考公考编考社区，因为经验不足，错失机会，现在看来，也许还得幸于当时自己的考试经验不足，导致的考试失利，不然也就不会有今天的事情发展，一切都是命运最好的安排。尝试过托人进国企央企，不过求人不如求己，现如今的大环境下，进入国企央企也不是那么容易轻松的事情。也尝试过继续互联网行业，做了技术的积累与沉淀，回顾自己以往用过的，接触学习当下流行的自己没用过的，从而提升自己的竞争力。</p><h2 id="未来的行动与展望：全身心投入，持续学习，共创事业"><a href="#未来的行动与展望：全身心投入，持续学习，共创事业" class="headerlink" title="未来的行动与展望：全身心投入，持续学习，共创事业"></a>未来的行动与展望：全身心投入，持续学习，共创事业</h2><p>在这个新的开始，一个更大的平台，一个当下正热门的赛道，与一批优秀的人才一起共事，使我看到了一个可能，一个把工作变成事业的可能。那么我应该如何去做呢？</p><p>首先是全身心的投入，把产品做好做优。站在本职岗位的角度上思考问题的同时，也要跳出这个位置，站在更高的角度去思考，如何让产品可以变得更好。其次是持续的学习，把握住在大平台，和这些优秀的人一起工作的机会，去充分的汲取养分，充实自己。不论是技术方面还是工作方法，不论是思维方式还是处世哲学。不拘泥于一事一物。还要善于思考，及时的总结经验，分析自己的不足与改进的方案，并积极主动与同事沟通交流。例如保证每月一次，与团队成员的深度交流。</p><p>我相信，只要全身心的投入，持续的学习，未来定将更加光明美好。谋事在人，成事在天，尽自己最大的努力，不留遗憾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/14/pEuXLff.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="年度总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="年度总结" scheme="https://www.gaotianyang.top/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>温榆河公园</title>
    <link href="https://www.gaotianyang.top/archives/20250210423ded45/"/>
    <id>https://www.gaotianyang.top/archives/20250210423ded45/</id>
    <published>2025-02-10T05:12:37.000Z</published>
    <updated>2025-02-15T11:29:14.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/15/pEK0sWF.jpg" alt="首屏图"></p><a id="more"></a><p>2025 年 2 月 10 日，农历正月初三，年味正浓。趁着难得的假期，我们决定逃离城市的喧嚣，自驾前往温榆河公园东园，感受冬日里别样的宁静与美好。下午一点，阳光正好，一路向北，车窗外的风景不断变换，高楼大厦逐渐褪去，心情也随之放松下来。</p><p>停好车后，我步行几分钟便来到了东园的入口。虽然已是午后，但冬日的阳光依然温暖，洒在身上驱散了寒意。进入公园后，我们沿着栈桥一路向东，开启了这段冬日漫步之旅。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEK0yz4.jpg" alt="温榆河公园北"></p><p>栈桥两侧是冰封的湖面，在阳光的照射下闪烁着晶莹的光芒，仿佛一块巨大的水晶。偶尔能看到几只野鸭在冰面上悠闲地散步，为这静谧的冬日增添了几分生机。</p><p>下了栈桥之后，我们被一阵阵欢快的笑声吸引。循声望去，原来是一处供儿童游玩的冰雪游乐场。孩子们在雪地里，玩得不亦乐乎。看着他们天真烂漫的笑容，我也不禁被感染，仿佛回到了童年。</p><p>继续前行，道路的尽头是一座高大的瞭望台。我登上台顶，整个公园的景色尽收眼底。远处的城市高楼林立，近处的树木银装素裹，构成了一幅美丽的冬日画卷。我深吸一口气，感受着冬日里难得的清新空气，心中充满了宁静与喜悦。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEK0rJU.jpg" alt="温榆河公园西"></p><p>两小时的游览时间很快就过去了，我依依不舍地离开了温榆河公园东园。这次冬日之旅，让我感受到了大自然的魅力，也让我对生活充满了希望。我相信，只要心中有阳光，冬天也会变得温暖而美好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/15/pEK0sWF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="温榆河公园" scheme="https://www.gaotianyang.top/tags/%E6%B8%A9%E6%A6%86%E6%B2%B3%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
</feed>
