<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Hexo</title>
  
  
  <link href="https://www.gaotianyang.top/atom.xml" rel="self"/>
  
  <link href="https://www.gaotianyang.top/"/>
  <updated>2023-11-29T03:00:24.150Z</updated>
  <id>https://www.gaotianyang.top/</id>
  
  <author>
    <name>迷途的羔羊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react个人站建站总结</title>
    <link href="https://www.gaotianyang.top/archives/202311282f46f162/"/>
    <id>https://www.gaotianyang.top/archives/202311282f46f162/</id>
    <published>2023-11-28T09:02:14.000Z</published>
    <updated>2023-11-29T03:00:24.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/11/29/piDNnQf.png" alt="首屏图"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于 react-antd-admin 搭建的前端简历网站 <a href="https://me.gaotianyang.top">预览地址</a></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ul><li><strong>react-antd-admin-template</strong> 基于 <code>React</code> 和 <code>Ant Design</code> 的后台管理系统模板</li><li><strong>antd</strong> <code>Web</code> <code>UI</code> 组件库</li><li><strong>echarts</strong> <code>echarts-wordcloud</code> 词云库</li><li><strong>仿钉钉官网动效</strong> 基于 <code>JavaScript</code> <code>Css</code> 的滚动动效</li><li><strong>仿 antd 图片预览</strong> 基于 <code>Ant Design</code> <code>Modal</code> 的图片预览功能</li><li><strong>axios</strong> 基于 <code>promise</code> 的 <code>HTTP</code> 库</li><li><strong>mockjs</strong> 模拟数据生成器</li><li><strong>lodash</strong> <code>JavaScript</code> 实用工具库</li><li><strong>dayjs</strong> <code>JavaScript</code> 时间处理工具库</li></ul><h2 id="功能与问题"><a href="#功能与问题" class="headerlink" title="功能与问题"></a>功能与问题</h2><h3 id="Mockjs-实现数据过滤"><a href="#Mockjs-实现数据过滤" class="headerlink" title="Mockjs 实现数据过滤"></a>Mockjs 实现数据过滤</h3><p>基于 Mockjs，在<code>项目列表</code>接口请求时，实现了数据的过滤、分页等功能。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDU8BD.png" alt="mockjs"></p><h3 id="仿钉钉官网动效"><a href="#仿钉钉官网动效" class="headerlink" title="仿钉钉官网动效"></a>仿钉钉官网动效</h3><p>在实现此动效的时候，遇到了一些问题。例如原 demo 为原生 <code>html</code> <code>css</code> <code>js</code> 实现的，需要对其进行 react 的迁移与改造。另外，因为在项目中的使用场景为 dashboard 页面下使用，因此原本监听页面滚动事件，触发动效将不再生效。解决方案为将滚动监听，变更为 antd layout 组件，并将监听结果挂载于 window 自定义变量中。页面根据挂载的自定义变量，进行页面的重绘。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDNnQf.png" alt="dashboard"></p><h3 id="echarts-词云"><a href="#echarts-词云" class="headerlink" title="echarts 词云"></a>echarts 词云</h3><p>在使用词云效果的自定义词云形状时，会遇到因背景图加载原因，导致的首次渲染白屏的问题。解决方案为，将词云首次绘制，执行于背景图加载完毕后(<code>maskImage.onload</code>)。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDUtNd.png" alt="wordcloud"></p><h3 id="仿-antd-图片预览"><a href="#仿-antd-图片预览" class="headerlink" title="仿 antd 图片预览"></a>仿 antd 图片预览</h3><p>本项目的 <code>Ant Design</code> 版本为 V3.X，尚未加入图片预览功能，因此基于 <code>Ant Design</code> 的 <code>Modal</code> 组件二次封装了图片预览组件，并基于 <code>css</code> <code>js</code> 实现了缩放、翻转、旋转这些功能。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDUGHe.png" alt="imagePreview"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/NLRX-WJC/react-antd-admin-template">react-antd-admin-template</a></li><li><a href="https://www.bilibili.com/video/BV12z4y1s7nE/?vd_source=2e6014e07f90a9d8b3424eb1c055a867">复刻钉钉官网滚动动画</a></li><li><a href="https://gitee.com/vary-space/hello-world/tree/12z4y1s7nE">代码仓库-复刻钉钉官网滚动动画</a></li><li><a href="https://www.npmjs.com/package/echarts-wordcloud">echarts-wordcloud npm 词云</a></li><li><a href="https://www.cnblogs.com/art-poet/p/13936076.html">react 项目使用 echarts-wordcloud（文字云）</a></li><li><a href="https://blog.csdn.net/Zeng__Yi/article/details/106197891">react+typeScript 框架 config-overrides 中设置 Alias 路径 报错的解决方法</a></li><li><a href="https://blog.csdn.net/m0_47670683/article/details/124025972">最优雅解决 typescript 报错：“元素隐式具有 “any“ 类型，因为类型为 “string“ 的表达式不能用于索引类型”</a></li><li><a href="https://cloud.tencent.com/developer/article/2233289">react antd 实现图片自定义预览</a></li><li><a href="https://github.com/liuguanhua/liuguanhua.github.io">刘关化的前端简历 参考</a></li><li><a href="https://github.com/sunniejs/sunniejs.github.io">宋楠的前端简历 参考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/11/29/piDNnQf.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>医院预算管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120bdee9ed5/"/>
    <id>https://www.gaotianyang.top/archives/20231120bdee9ed5/</id>
    <published>2023-11-20T07:59:07.000Z</published>
    <updated>2023-12-05T02:04:15.012Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7xSPJ.png" alt="首屏图"></p><a id="more"></a><ol><li>Antd ProList 实现<a href="packages/setting-ui/src/routes/period/components/smpList.tsx">数据卡片</a><br><img src="https://z1.ax1x.com/2023/11/28/piBxEd0.png" alt="ProList"><br><img src="https://z1.ax1x.com/2023/11/28/piBxFLn.png" alt="ProList"><ol><li>数据超长缩略</li><li>空数据处理</li></ol></li><li>Antd ProTable 实现<a href="packages/setting-ui/src/routes/account/components/accountList.tsx">树形列表</a><br><img src="https://z1.ax1x.com/2023/11/28/piBxAZq.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/28/piBxaSe.png" alt="ProTable"><ol><li>存在子集复选、操作按钮禁用</li><li>未勾选复选框 公共操作按钮禁用</li></ol></li><li>Antd ProTable 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piBxdQH.png" alt="ProTable"></li><li>editable-table 实现<a href="packages/setting-ui/src/routes/performance/components/performanceForm.tsx">可编辑表格</a><br><img src="https://z1.ax1x.com/2023/09/26/pP7xSPJ.png" alt="editable"><ol><li>数据联动编辑 指标属性=&gt;比较方法=&gt;计量单位</li><li>多行数据存储删除 <code>array.filter()</code></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7xSPJ.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>日常质量管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120671c213d/"/>
    <id>https://www.gaotianyang.top/archives/20231120671c213d/</id>
    <published>2023-11-20T07:58:47.000Z</published>
    <updated>2023-12-05T02:04:10.285Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vvaF.png" alt="首屏图"></p><a id="more"></a><ol><li>rc-banner-anim 实现 login 幻灯片效果<br><img src="https://z1.ax1x.com/2023/11/28/piB2Tgg.png" alt="banner"><!-- ![banner](./项目视频/登录.mov) --></li><li>cloud-charts 实现图表<br><img src="https://z1.ax1x.com/2023/11/28/piB2buj.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/09/26/pP7vvaF.png" alt="cloud-charts"></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/28/piB2XEq.png" alt="organization"><ol><li>组织架构与菜单联动 动态生成顶级 root 节点</li></ol></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piBx9zQ.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/28/piBxpRg.png" alt="ProTable"></li><li>封装顶部<a href="packages/adverse-event-ui/src/routes/statistics/reportDept/topStatistics/index.tsx">数据统计条</a>组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/11/28/piB27vQ.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/28/piBxSJS.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vvaF.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>高质量发展建设管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120ca98070b/"/>
    <id>https://www.gaotianyang.top/archives/20231120ca98070b/</id>
    <published>2023-11-20T06:47:54.000Z</published>
    <updated>2023-12-05T02:03:40.418Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vx54.png" alt="首屏图"></p><a id="more"></a><ol><li>tgg-large-screen 实现数据大屏全屏缩放效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjWdS.png" alt="dashboard"></li><li>react-transition-group 实现数据大屏横向切换效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjfIg.png" alt="dashboard"><ol><li>使用 location 承接 <code>trend</code> 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ol></li><li>cloud-charts 实现图表<br><img src="https://z1.ax1x.com/2023/11/28/piB244f.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/28/piB2hUP.png" alt="cloud-charts"></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/28/piB22DA.png" alt="organization"></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piB2IC8.png" alt="ProTable"></li><li>封装顶部数据统计条组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/09/26/pP7vx54.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vx54.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>全面质量管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120c020518/"/>
    <id>https://www.gaotianyang.top/archives/20231120c020518/</id>
    <published>2023-11-20T05:58:58.000Z</published>
    <updated>2023-12-05T10:36:43.356Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vjVU.png" alt="首屏图"></p><a id="more"></a><ol><li>3D card 实现九宫格卡片交互效果<br><img src="https://z1.ax1x.com/2023/09/26/pP7vjVU.png" alt="dashboard"><ol><li><a href="https://codepen.io/robin-dela/pen/jVddbq">3D card - 卡片交互效果</a></li><li><a href="https://codepen.io/smpnjn/pen/qBVPvpZ">Flippable Playing Cards - 卡片交互效果</a></li></ol></li><li>tgg-large-screen 实现数据大屏全屏缩放效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjaVO.png" alt="dashboard"></li><li>react-transition-group 实现数据大屏横向切换效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjNqK.png" alt="dashboard"><ol><li>使用 location 承接 <code>trend</code> 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ol></li><li>使用 CreateJS 创建数据大屏画布<ol><li>使用 Shape Class 绘制图形</li><li>使用 Graphics Class 绘制图形</li></ol></li><li><a href="https://cloud-charts.gitee.io/example/Recommendation">cloud-charts</a> 实现图表<br><img src="https://z1.ax1x.com/2023/11/23/pidblee.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/23/pidbUQf.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/23/pidbay8.png" alt="cloud-charts"><ol><li>使用 Wline 实现折线图</li><li>使用 Wbar 实现柱图</li><li>使用 Wpie 实现环图</li><li>使用 Wlinebar 实现线柱图</li><li>使用 Wnightingale 实现玫瑰图</li></ol></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/23/pidb1dH.png" alt="organization"></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/23/pidbJJI.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/23/pidjBPH.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/23/pidjwIe.png" alt="ProTable"></li><li>封装顶部数据统计条组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/11/23/pidbGFA.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/23/pidbNSP.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/23/pidjDGd.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li><li>使用 <a href="https://designable-antd.formilyjs.org/">formilyjs</a> 实现表单<br><img src="https://z1.ax1x.com/2023/11/23/pidbYWt.png" alt="formilyjs"><br><img src="https://z1.ax1x.com/2023/11/23/pidjrRA.png" alt="formilyjs"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vjVU.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>NicePhoto建站经验总结</title>
    <link href="https://www.gaotianyang.top/archives/202303104356a8d7/"/>
    <id>https://www.gaotianyang.top/archives/202303104356a8d7/</id>
    <published>2023-03-10T09:43:09.000Z</published>
    <updated>2023-12-04T08:27:15.733Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2022/06/06/XwoBsP.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论你是摄影师、设计师、艺术家还是创作者，在线电子相册都可以满足你的需求。通过这个平台，可以建立自己的个人品牌，并与更多的人建立起联系和合作。此项目共分为门户网站、前台展示、后台管理、数据大屏四部分。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppMxywR.png" alt="NicePhoto"></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ul><li><strong>Next</strong> react 应用程序框架，构建高性能、可扩展和易于维护的 Web 应用程序</li><li><strong>surrealdb</strong> 分布式多模型数据库</li><li><strong>swr</strong> 用于数据请求的 React Hooks 库</li><li><strong>tinytime</strong> 时间处理</li><li><strong>xbytes</strong> 字节格式转换</li><li><strong>tailwindcss</strong> css 样式库</li><li><strong>tremor</strong> UI 库</li><li><strong>vercel</strong> 代码托管平台</li></ul><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="nice-photo-site-门户"><a href="#nice-photo-site-门户" class="headerlink" title="nice-photo-site 门户"></a>nice-photo-site 门户</h3><p><a href="https://nice-photo.xiangshi.app/">门户网址链接</a></p><p><img src="https://s1.ax1x.com/2023/03/13/ppQZA9H.png" alt="门户项目"></p><h4 id="会员服务"><a href="#会员服务" class="headerlink" title="会员服务"></a>会员服务</h4><table><thead><tr><th>限制</th><th>免费版</th><th>高级版</th><th>独立部署</th></tr></thead><tbody><tr><td>专辑数量限制</td><td>2</td><td>无限</td><td>无限</td></tr><tr><td>相册数量限制</td><td>4</td><td>无限</td><td>无限</td></tr><tr><td>图片空间限制</td><td>100MB</td><td>1000MB</td><td>无限</td></tr><tr><td>图片访问流量</td><td>500MB/月</td><td>4G/月</td><td>无限</td></tr><tr><td>销售线索</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>服务价格</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>自定义域名前缀</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>私有部署</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>定价</td><td>免费</td><td>¥99/年</td><td>¥899/年</td></tr></tbody></table><h3 id="nice-photo-client-前台项目"><a href="#nice-photo-client-前台项目" class="headerlink" title="nice-photo-client 前台项目"></a>nice-photo-client 前台项目</h3><p><a href="https://flavor-magic.np.xiangshi.app/">前台网址链接</a></p><p><img src="https://s1.ax1x.com/2023/03/13/ppQVvcR.png" alt="前台项目"></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>NicePhoto 是一个功能强大的在线照片展示平台，为用户提供了丰富的展示、管理、销售照片的工具和功能。我们致力于打造一个简单易用、高效可靠、安全稳定的产品，帮助用户快速创建和发布自己的照片展示网站，并与客户进行交流和合作。NicePhoto 不仅可以用于个人摄影师、艺术家、设计师等行业，也可以服务于各种商业和非营利机构，帮助他们展示和推广自己的品牌和形象。无论您是需要展示照片、卖照片、展示作品、销售商品还是拓展业务，NicePhoto 都能为您提供定制化的解决方案和优质的服务，让您的想象力得到最大的释放和发挥。</p><h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><ul><li><strong>多种展示方式</strong> 多种照片和作品展示方式，包括幻灯片、画廊、网格等多种形式，让你的作品展示更加独特和个性化。</li><li><strong>高效上传和管理</strong> 高效、便捷的上传和管理功能，让你可以轻松地上传、编辑、删除你的作品。</li><li><strong>销售线索收集</strong> 销售线索收集功能，可以让你通过网站访问者的注册信息、留言信息等途径收集潜在客户的联系信息，为你的业务销售提供有力支持。</li><li><strong>服务介绍</strong> 提供了服务介绍功能，可以详细介绍您能提供的各种服务及其优势，方便您的客户了解服务内容。</li><li><strong>摄影专业化</strong> 我们的产品针对摄影行业进行了更多的优化，使网站更具有摄影专业性和个性化。</li><li><strong>灵活性</strong> 我们的产品功能非常灵活，您可以根据自己的需求自由选择需要展示的功能，使网站更加个性化和专业化。</li></ul><h3 id="nice-photo-manage-后台管理"><a href="#nice-photo-manage-后台管理" class="headerlink" title="nice-photo-manage 后台管理"></a>nice-photo-manage 后台管理</h3><p><a href="https://nice-photo-manage.xiangshi.app/">后台网址链接</a></p><p>后台管理共分为概览、专辑管理、相册管理、首页特效、销售线索、介绍信息、套系价格、系统设置几大模块。</p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>在系统中，您可以通过系统概览页面快速查看各个模块的概要信息、空间总占用情况以及最新的销售线索信息等。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQkDXV.png" alt="概览"></p><p>如果您需要对销售线索进行快速操作，则可以在概览模块中进行相关设置。</p><p>此外，我们建议您经常查看系统概览页面，因为它可以提供有关系统使用状况的重要信息。</p><h4 id="专辑管理"><a href="#专辑管理" class="headerlink" title="专辑管理"></a>专辑管理</h4><p>在“作品展示”菜单下的第一个模块是“专辑管理”，这是本系统的重要模块之一。在设置完站点的基本信息后，首先您需要在这里创建一个专辑。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAVcq.png" alt="专辑管理"></p><p>添加专辑非常简单，只需点击“添加专辑”按钮即可，然后在弹出的表单中填写主标题、副标题和选择一个展示效果即可。</p><p>展示效果包括：轮播、滑轨、瀑布流、网格等五大类，在每个大类下还有对应的细节参数可以进行设置。</p><p>成功添加专辑后，您可以在当前页面看到刚刚添加的专辑。如果您需要排序多个专辑，仅需将左侧的十字图标拖动到您想要放置的位置即可。</p><p>对于每个已创建的专辑，右侧分别有三个按钮：进入专辑下的相册管理模块、编辑专辑信息、删除专辑。您可以根据需要单击这些按钮执行不同的操作。</p><h4 id="相册管理"><a href="#相册管理" class="headerlink" title="相册管理"></a>相册管理</h4><p>创建了第一个专辑后，左侧的“作品管理”菜单下会多出一个“相册管理”。进入相册管理，默认显示的是最新一个专辑下的所有相册。如果您需要切换到其他专辑，请在页面左上角的下拉菜单中进行选择。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAVcq.png" alt="相册管理"></p><p>添加相册非常简单，只需点击“添加相册”按钮即可，然后在弹出的表单中填写主标题、副标题和选择一个展示效果即可。</p><p>展示效果包括：轮播、滑轨、瀑布流、网格、自适应等七大类，在每个大类下还有对应的细节参数可以进行设置。</p><p>成功添加相册后，您可以在当前页面看到刚刚添加的相册。如果您需要排序多个相册，仅需将卡片底部的十字图标拖动到您想要放置的位置即可。单击卡片中间的编辑按钮，即可对相册的封面图片进行设置。</p><p>对于每个已创建的相册，卡片底部分别有三个按钮：进入相册下的照片管理模块、编辑相册信息、删除相册。您可以根据需要单击这些按钮执行不同的操作。</p><p>点击相册卡片底部的绿色“照片”按钮即可进入照片模块。在照片模块中，只需将要上传的图片拖到上传文件区域即可，同时您也可以一次性上传多张图片。</p><p>一旦图片上传完成，您可以对它们的顺序进行排列以满足您自己的需求。您可以将鼠标悬停在照片上方以显示一个“移动”图标，然后单击并拖动该图标以调整照片的顺序。点击红色的删除按钮可删除这个图片。</p><h4 id="首页特效"><a href="#首页特效" class="headerlink" title="首页特效"></a>首页特效</h4><p>在首页特效模块中有两个子模块，分别是“首页作品”和“首页背景”。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQANDK.png" alt="首页特效"></p><p>在相册管理模块中，用户可以点击黄色的编辑按钮，并在弹出框中选择发布至首页，这样就可以在“首页作品”子模块中看到对应的相册了。</p><p>在“首页作品”子模块页面下方的简介卡片上，用户可以点击编辑按钮并为首页需要展示的作品添加一段简要的介绍。</p><p>在系统设置模块的站点导航卡片上，用户可以点击编辑按钮将“首页浏览作品”改为显示，这样用户就可以在首页上快速地看到了对应的作品。</p><p>在“首页背景”子模块中，用户可以快速地上传多张背景图。这些图片将以淡入淡出并加上稍微放大的效果在首页背景轮流显示。</p><h4 id="销售线索"><a href="#销售线索" class="headerlink" title="销售线索"></a>销售线索</h4><p>销售线索模块会展示所有在网站上给您留言咨询的信息。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAHK0.png" alt="销售线索"></p><p>后台界面上会有明显的未读提示，让您可以清晰地了解哪些信息尚未被查看过。</p><p>该模块还提供接入飞书 APP 提醒的能力，方便您及时跟进销售线索的动态。</p><p>您也可以便捷地设置这些线索是否已经被跟踪过，以便于管理和追踪。</p><h4 id="介绍信息"><a href="#介绍信息" class="headerlink" title="介绍信息"></a>介绍信息</h4><p>介绍信息模块下设关于我们、工作室、精修照片三个子模块。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAxPJ.png" alt="关于我们"></p><p>关于我们模块：该模块用于编辑公司/工作室的介绍信息，上传对应的 VI 图。在此模块内，用户可以添加、编辑和删除介绍信息，并上传一张符合 VI 形象的图片。具体操作流程如下：</p><p>点击“关于我们”模块，添加/编辑介绍信息，可以选择字体样式、大小和颜色等属性，上传 VI 图。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAzG9.png" alt="工作室"></p><p>工作室模块：该模块用于展示工作室的办公场景和体现企业文化。在此模块内，用户可以添加和删除工作室场景照片。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQES2R.png" alt="精修照片"></p><p>精修照片模块：该模块用于展示照片精修前后的对比效果。针对摄影工作室而言，该模块非常实用。在此模块内，用户可以上传精修前后的照片。</p><h4 id="套系价格"><a href="#套系价格" class="headerlink" title="套系价格"></a>套系价格</h4><p>在此模块内，用户可以添加、编辑和删除服务套系的资料，并设置相关价格和描述信息等。具体操作流程如下：</p><ul><li>点击“套系价格”模块</li><li>添加/编辑服务套系资料，包括名称、价格、描述等信息</li><li>删除服务套系资料</li></ul><p><img src="https://s1.ax1x.com/2023/03/13/ppQEDdU.png" alt="套系价格"></p><h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><p>本软件的系统设置模块提供编辑站点信息、上传标识图标、自定义二级域名等功能，有助于网站的优化和定制。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQEroF.png" alt="系统设置"></p><p>网站的基本信息包括网站的名称、描述、关键字、版权信息等，这些信息对于搜索引擎优化(SEO)来说非常重要。具体操作流程如下：</p><ul><li>点击“站点信息”卡片</li><li>填写站点的基本信息：网站标题、描述、关键字、版权等。</li><li>确认并保存修改</li></ul><hr><p>站点图标卡片：该卡片可上传网站的 favicon，使得用户可以在浏览器书签栏、标签页或收藏夹中看到网站的标识。具体操作流程如下：</p><ul><li>点击“站点图标”卡片</li><li>上传 favicon 图片，建议大小为 16x16 像素或 32x32 像素</li><li>确认并保存修改</li></ul><hr><p>站点 LOGO 卡片：该卡片可上传位于网站左上角的 LOGO，方便用户在浏览网站时更加直观地了解该网站的品牌和主题。具体操作流程如下：</p><ul><li>点击“站点 LOGO”卡片</li><li>上传 LOGO 图片，建议大小为 60x60 像素</li><li>确认并保存修改</li></ul><hr><p>备案信息卡片的使用方法和操作流程</p><ul><li>点击“备案信息”卡片</li><li>填写备案所需信息：备案号、单位名称、网站名称、主办单位等。</li><li>填写备案连接</li><li>确认并保存修改</li></ul><hr><p>自定义域名卡片：该卡片可让用户自定义一个二级域名，方便用户记忆和分享。具体操作流程如下：</p><ul><li>点击“帮到域名”卡片</li><li>输入想要的二级域名</li><li>确认并保存修改</li></ul><hr><p>站点导航可控制各个模块的展示状态，包括首页、作品、套系价格、关于我们、联系我们等，在网站的导航栏中进行显示。</p><ul><li>首页：左上角导航首页按钮的显示状态</li><li>作品：左上角导航作品按钮的显示状态</li><li>套系价格：左上角导航套系价格按钮的显示状态</li><li>关于我们：左上角导航关于我们按钮的显示状态</li><li>联系我们：左上角导航联系我们按钮的显示状态</li><li>介绍侧边栏：左上角导航 “…”按钮的显示状态</li><li>首页浏览作品：是否在首页左半部分区域展示首页作品集</li><li>首页联系我们：是否在首页右半部分区域展示联系我们按钮</li></ul><hr><p>许可密钥是一种授权码，可用于购买和激活软件的高级版，也称为 License。</p><p>许可密钥和 License 是用于购买和使用软件的重要凭证，具体操作流程如下：</p><ul><li>购买软件高级版</li><li>在购买过程中获取许可密钥</li><li>打开软件并输入许可密钥</li><li>完成激活升级至高级版</li></ul><p>注意：每个许可密钥只能激活一次，因此请务必妥善保管。</p><h3 id="nice-photo-dashboard-数据大屏"><a href="#nice-photo-dashboard-数据大屏" class="headerlink" title="nice-photo-dashboard 数据大屏"></a>nice-photo-dashboard 数据大屏</h3><p>数据大屏是一种用于展示和分析数据的可视化工具，通过对数据进行多维度的汇总和展示，可以为用户提供全面、直观、清晰的数据信息。除了方便运维人员对平台运行状态进行快速了解之外，数据大屏还可以扩展以下作用：</p><p>监控业务数据：数据大屏可以实时监控平台的各项业务数据，如注册量、用户活跃度、转化率等，帮助运营人员了解业务状况，及时调整策略，提高运营效率和用户满意度。</p><p>优化资源配置：通过数据大屏可以了解到平台各项资源的使用情况，包括图片资源存储、当日新增图片、当日新增资源大小、资源使用量用户排名等，从而根据数据分析结果进行资源的优化配置，减少浪费，提高资源利用率，降低运营成本。</p><p>数据大屏作为一种数据可视化工具，具有方便、直观、全面、清晰等优点，对于运营、管理、决策等方面都有着重要的作用。</p><h2 id="上线和优化"><a href="#上线和优化" class="headerlink" title="上线和优化"></a>上线和优化</h2><p>项目依托于 nextjs 进行代码的封装加密与构建。并通过使用环境变量来存储一些敏感值，并在代码中引用它们。针对富文本数据，需要使用 js 的编码与转码对数据进行处理。方便后续维护时的数据库迁移，导入导出操作。</p><p>数据库响应超时问题优化，目前暂时先通过使用免费版进行托管，后续如果用户量提升了，再考虑进行付费版服务迁移。</p><h2 id="推广经验"><a href="#推广经验" class="headerlink" title="推广经验"></a>推广经验</h2><p>目前主要的客群是摄影师、设计师、艺术家还是创作者，想成立自己的工作室，有推广建站诉求，但又不希望过多投入。</p><p>社交媒体宣传：在 v2ex、小红书、朋友圈等平台，发布关于 NicePhoto 的信息和案例，并与感兴趣的目标客户建立联系。</p><p>创意营销活动：通过各种创意营销活动，例如比赛、抽奖、推荐奖励等，吸引更多的潜在客户关注并尝试 NicePhoto。</p><p>提供试用版：提供免费试用版、正式会员体验券，让潜在客户可以尝试使用 NicePhoto，感受电子相册带来的便利和优势。</p><p>与其他行业协作：与相关行业如摄影器材厂商、艺术教育机构等协作，共同推广 NicePhoto。</p><p>通过口碑宣传：口碑宣传是营销的重要方式之一，因此建议与现有用户建立良好的关系，促进他们分享他们的使用经验和推荐。</p><p>利用 SEO 优化：使用搜索引擎优化（SEO）的技巧，优化您的网站和内容，以便更多的潜在客户可以找到您的 NicePhoto 服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2022/06/06/XwoBsP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nicephoto" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nicephoto/"/>
    
    <category term="next" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nicephoto/next/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nicephoto" scheme="https://www.gaotianyang.top/tags/nicephoto/"/>
    
    <category term="next" scheme="https://www.gaotianyang.top/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>高频面试题</title>
    <link href="https://www.gaotianyang.top/archives/202207034117e5b/"/>
    <id>https://www.gaotianyang.top/archives/202207034117e5b/</id>
    <published>2022-07-03T08:24:11.000Z</published>
    <updated>2023-12-05T02:25:47.194Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg" alt="首屏图"></p><a id="more"></a><h2 id="简单页面"><a href="#简单页面" class="headerlink" title="简单页面"></a>简单页面</h2><h3 id="CSS-选择器样式优先级"><a href="#CSS-选择器样式优先级" class="headerlink" title="CSS 选择器样式优先级"></a>CSS 选择器样式优先级</h3><ul><li>说一下 CSS 的选择器有哪些</li><li>优先级是怎样的</li><li>权重计算方式</li></ul><p>CSS 选择器包括行内样式、id 选择器、class 选择器、标签选择器。优先级依次降低，!important 可用于优先级提升，比行内样式优先级还要高，权重的计算依次为 1000,100,10,1，!important 的优先级为正无穷。</p><p>但实际上，1000,100,10,1 不是十进制中的 1000,100,10,1，而是进制数，不是 2 进制，不是 10 进制，而是 256 进制，就是 0 到 255 后+1 才是 1，比如通配符的权重为 0，伪元素的权重为 1，中间相差了 255，依次类推。</p><p>并且，!important 的权重虽然为正无穷，但也是可以计算的，比如正无穷+1 或者*2 就比正无穷大，原因是计算机中的正无穷是有界的，不是数学上无界的概念。</p><blockquote><p>参考：<a href="https://juejin.cn/post/6844904159305531406">面试官：说下 CSS 选择器优先级</a></p></blockquote><h3 id="CSS-实现三列布局（左右固定宽度，中间自适应）"><a href="#CSS-实现三列布局（左右固定宽度，中间自适应）" class="headerlink" title="CSS 实现三列布局（左右固定宽度，中间自适应）"></a>CSS 实现三列布局（左右固定宽度，中间自适应）</h3><blockquote><p>无论是什么布局方式，无外乎需要应用 float、inline-block、table、absolute、flex、grid 这 6 种布局属性，<br>然后再配合负 margin、calc()函数、bfc、增加结构等来实现布局</p><p>自适应包括两种情况：一种是宽度由内容撑开，一种是宽度自动撑满父元素剩余宽度<br>可实现宽度由内容撑开的属性有： float、inline、inline-block、table、table-cell、absolute、fixed、flex、grid<br>可实现宽度自动撑满父元素剩余宽度的属性有： overflow(配合 float)、table、flex、grid</p></blockquote><h4 id="CSS-浮动"><a href="#CSS-浮动" class="headerlink" title="CSS 浮动"></a>CSS 浮动</h4><p>第一个 float:left，第二个 float:right，第三个设置 margin-left 和 margin-right</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绝对定位法"><a href="#绝对定位法" class="headerlink" title="绝对定位法"></a>绝对定位法</h4><p>第一个定位到 left，第二个定位到 right，第三个设置 margin-left 和 margin-right</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  //或者</span><br><span class="line">  <span class="selector-tag">flex</span>: 0 0 200<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  //或者</span><br><span class="line">  <span class="selector-tag">flex</span>: 0 0 200<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://juejin.cn/post/6844903720149483528">三列布局几种经典实现方式</a></p></blockquote><h3 id="如果要做优化，CSS-提高性能的方法有哪些？"><a href="#如果要做优化，CSS-提高性能的方法有哪些？" class="headerlink" title="如果要做优化，CSS 提高性能的方法有哪些？"></a>如果要做优化，CSS 提高性能的方法有哪些？</h3><ul><li>内联首屏关键 CSS</li><li>异步加载 CSS</li><li>资源压缩</li><li>合理使用选择器</li><li>减少使用昂贵的属性</li><li>不要使用 @import</li></ul><h3 id="Flex-容器属性"><a href="#Flex-容器属性" class="headerlink" title="Flex 容器属性"></a>Flex 容器属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><blockquote><p>flex-direction 主轴方向</p></blockquote><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><blockquote><p>flex-wrap 是否换行</p></blockquote><ul><li>nowrap（默认值）：不换行。</li><li>wrap：换行。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h4 id="flex-flow（12-简写形式）"><a href="#flex-flow（12-简写形式）" class="headerlink" title="flex-flow（12 简写形式）"></a>flex-flow（12 简写形式）</h4><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><blockquote><p>justify-content 项目在主轴上的对齐方式</p></blockquote><ul><li>flex-start（默认值）：左对齐（即上面页面展示效果）</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><blockquote><p>align-items 该属性可以控制弹性容器中成员在当前行内的对齐方式。当成员设置了 align-self 属性时，父容器的 align-items 值则不再对它生效</p></blockquote><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><blockquote><p>align-content 当弹性容器在正交轴方向还存在空白时，该属性可以控制其中所有行的对齐方式</p></blockquote><ul><li>stretch（默认值）：元素被拉伸以适应容器</li><li>center：元素位于容器的中心</li><li>flex-start：元素位于容器的开头</li><li>flex-end：元素位于容器的结尾</li><li>space-between：元素位于各行之间留有空白的容器内</li><li>space-around：元素位于各行之前、之间、之后都留有空白的容器内</li></ul><h3 id="标准盒模型和怪异盒模型的区别"><a href="#标准盒模型和怪异盒模型的区别" class="headerlink" title="标准盒模型和怪异盒模型的区别"></a>标准盒模型和怪异盒模型的区别</h3><h3 id="rem-的特点"><a href="#rem-的特点" class="headerlink" title="rem 的特点"></a>rem 的特点</h3><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><h3 id="防抖和节流，应用场景"><a href="#防抖和节流，应用场景" class="headerlink" title="防抖和节流，应用场景"></a>防抖和节流，应用场景</h3><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><h3 id="继承有哪些方法"><a href="#继承有哪些方法" class="headerlink" title="继承有哪些方法"></a>继承有哪些方法</h3><h3 id="什么是深-浅拷贝，有哪些实现方式"><a href="#什么是深-浅拷贝，有哪些实现方式" class="headerlink" title="什么是深/浅拷贝，有哪些实现方式"></a>什么是深/浅拷贝，有哪些实现方式</h3><h3 id="数组有哪些常用方法，引出下一个问题-slice-和-splice-区别"><a href="#数组有哪些常用方法，引出下一个问题-slice-和-splice-区别" class="headerlink" title="数组有哪些常用方法，引出下一个问题,slice 和 splice 区别"></a>数组有哪些常用方法，引出下一个问题,slice 和 splice 区别</h3><h3 id="Promise-all-和-Promise-race-的区别，应用场景"><a href="#Promise-all-和-Promise-race-的区别，应用场景" class="headerlink" title="Promise.all 和 Promise.race 的区别，应用场景"></a>Promise.all 和 Promise.race 的区别，应用场景</h3><h3 id="微任务和宏任务的区别"><a href="#微任务和宏任务的区别" class="headerlink" title="微任务和宏任务的区别"></a>微任务和宏任务的区别</h3><h3 id="数组和字符串的相互转换"><a href="#数组和字符串的相互转换" class="headerlink" title="数组和字符串的相互转换"></a>数组和字符串的相互转换</h3><h3 id="js-判断数据类型的几种方法"><a href="#js-判断数据类型的几种方法" class="headerlink" title="js 判断数据类型的几种方法"></a>js 判断数据类型的几种方法</h3><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><h3 id="es6-新特性"><a href="#es6-新特性" class="headerlink" title="es6 新特性"></a>es6 新特性</h3><h3 id="MVVM-模式"><a href="#MVVM-模式" class="headerlink" title="MVVM 模式"></a>MVVM 模式</h3><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h3 id="http-请求过程"><a href="#http-请求过程" class="headerlink" title="http 请求过程"></a>http 请求过程</h3><h3 id="前端如何实现跨域"><a href="#前端如何实现跨域" class="headerlink" title="前端如何实现跨域"></a>前端如何实现跨域</h3><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="Vue-中的的通信方式有几种？隔代组件的通信你用那种方式解决"><a href="#Vue-中的的通信方式有几种？隔代组件的通信你用那种方式解决" class="headerlink" title="Vue 中的的通信方式有几种？隔代组件的通信你用那种方式解决"></a>Vue 中的的通信方式有几种？隔代组件的通信你用那种方式解决</h3><h3 id="v-show-和-v-if-指令的共同点和不同点"><a href="#v-show-和-v-if-指令的共同点和不同点" class="headerlink" title="v-show 和 v-if 指令的共同点和不同点"></a>v-show 和 v-if 指令的共同点和不同点</h3><h3 id="为什么使用-key"><a href="#为什么使用-key" class="headerlink" title="为什么使用 key"></a>为什么使用 key</h3><h3 id="简述-computed-和-watch-的使用场景"><a href="#简述-computed-和-watch-的使用场景" class="headerlink" title="简述 computed 和 watch 的使用场景"></a>简述 computed 和 watch 的使用场景</h3><h3 id="params-和-query-的区别（怎么定义-vue-router-的动态路由-怎么获取传过来的值？）"><a href="#params-和-query-的区别（怎么定义-vue-router-的动态路由-怎么获取传过来的值？）" class="headerlink" title="params 和 query 的区别（怎么定义 vue-router 的动态路由? 怎么获取传过来的值？）"></a>params 和 query 的区别（怎么定义 vue-router 的动态路由? 怎么获取传过来的值？）</h3><h3 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="$route 和 $router 的区别"></a>$route 和 $router 的区别</h3><h3 id="vue-router-有哪几种导航钩子"><a href="#vue-router-有哪几种导航钩子" class="headerlink" title="vue-router 有哪几种导航钩子"></a>vue-router 有哪几种导航钩子</h3><h3 id="Vue-实例的生命周期讲一下-mounted-阶段真实-DOM-存在了嘛"><a href="#Vue-实例的生命周期讲一下-mounted-阶段真实-DOM-存在了嘛" class="headerlink" title="Vue 实例的生命周期讲一下, mounted 阶段真实 DOM 存在了嘛"></a>Vue 实例的生命周期讲一下, mounted 阶段真实 DOM 存在了嘛</h3><h3 id="vuex-有哪几种属性，怎么使用？哪种功能场景使用它"><a href="#vuex-有哪几种属性，怎么使用？哪种功能场景使用它" class="headerlink" title="vuex 有哪几种属性，怎么使用？哪种功能场景使用它"></a>vuex 有哪几种属性，怎么使用？哪种功能场景使用它</h3><h3 id="vuex-中-state-存储的数据如果页面刷新此时数据还会有吗"><a href="#vuex-中-state-存储的数据如果页面刷新此时数据还会有吗" class="headerlink" title="vuex 中 state 存储的数据如果页面刷新此时数据还会有吗"></a>vuex 中 state 存储的数据如果页面刷新此时数据还会有吗</h3><h3 id="v-bind-和-v-model-的区别，-v-model-原理知道吗"><a href="#v-bind-和-v-model-的区别，-v-model-原理知道吗" class="headerlink" title="v-bind 和 v-model 的区别， v-model 原理知道吗"></a>v-bind 和 v-model 的区别， v-model 原理知道吗</h3><h3 id="Vue-中的常见指令有那些"><a href="#Vue-中的常见指令有那些" class="headerlink" title="Vue 中的常见指令有那些"></a>Vue 中的常见指令有那些</h3><h3 id="改变-this-指向-call、apply-与-bind-区别"><a href="#改变-this-指向-call、apply-与-bind-区别" class="headerlink" title="改变 this 指向 call、apply 与 bind 区别"></a>改变 this 指向 call、apply 与 bind 区别</h3><h3 id="vue-路由的两种模式"><a href="#vue-路由的两种模式" class="headerlink" title="vue 路由的两种模式"></a>vue 路由的两种模式</h3><h3 id="vue-的响应式原理"><a href="#vue-的响应式原理" class="headerlink" title="vue 的响应式原理"></a>vue 的响应式原理</h3><h3 id="vue-的插槽（slot）主要分三种"><a href="#vue-的插槽（slot）主要分三种" class="headerlink" title="vue 的插槽（slot）主要分三种"></a>vue 的插槽（slot）主要分三种</h3><h3 id="vue-数据的双向绑定"><a href="#vue-数据的双向绑定" class="headerlink" title="vue 数据的双向绑定"></a>vue 数据的双向绑定</h3><h3 id="vue-中的-keep-alive"><a href="#vue-中的-keep-alive" class="headerlink" title="vue 中的 keep-alive"></a>vue 中的 keep-alive</h3><h3 id="vue-nextTick-方法"><a href="#vue-nextTick-方法" class="headerlink" title="vue.nextTick()方法"></a>vue.nextTick()方法</h3><h3 id="Vue-和-React-的区别是什么"><a href="#Vue-和-React-的区别是什么" class="headerlink" title="Vue 和 React 的区别是什么"></a>Vue 和 React 的区别是什么</h3><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="常用的-git-命令"><a href="#常用的-git-命令" class="headerlink" title="常用的 git 命令"></a>常用的 git 命令</h3><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="webpack-的作用是什么，谈谈你对它的理解"><a href="#webpack-的作用是什么，谈谈你对它的理解" class="headerlink" title="webpack 的作用是什么，谈谈你对它的理解"></a>webpack 的作用是什么，谈谈你对它的理解</h3><h3 id="webpack-的工作原理"><a href="#webpack-的工作原理" class="headerlink" title="webpack 的工作原理"></a>webpack 的工作原理</h3><h3 id="webpack-打包原理"><a href="#webpack-打包原理" class="headerlink" title="webpack 打包原理"></a>webpack 打包原理</h3><h3 id="webpack-的核心概念"><a href="#webpack-的核心概念" class="headerlink" title="webpack 的核心概念"></a>webpack 的核心概念</h3><h3 id="Webpack-的基本功能有哪些"><a href="#Webpack-的基本功能有哪些" class="headerlink" title="Webpack 的基本功能有哪些"></a>Webpack 的基本功能有哪些</h3><h3 id="gulp、grunt-与-webpack-的区别是什么"><a href="#gulp、grunt-与-webpack-的区别是什么" class="headerlink" title="gulp、grunt 与 webpack 的区别是什么"></a>gulp、grunt 与 webpack 的区别是什么</h3><h3 id="webpack-是解决什么问题而生的"><a href="#webpack-是解决什么问题而生的" class="headerlink" title="webpack 是解决什么问题而生的"></a>webpack 是解决什么问题而生的</h3><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h3 id="前端工程化理解（模块化、组件化、规范化、自动化）"><a href="#前端工程化理解（模块化、组件化、规范化、自动化）" class="headerlink" title="前端工程化理解（模块化、组件化、规范化、自动化）"></a>前端工程化理解（模块化、组件化、规范化、自动化）</h3><h3 id="组件封装过程"><a href="#组件封装过程" class="headerlink" title="组件封装过程"></a>组件封装过程</h3><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="Typescript-中的内置类型"><a href="#Typescript-中的内置类型" class="headerlink" title="Typescript 中的内置类型"></a>Typescript 中的内置类型</h3><p>Number String Boolean Null Void Undefined</p><h3 id="TS-的接口是什么意思"><a href="#TS-的接口是什么意思" class="headerlink" title="TS 的接口是什么意思"></a>TS 的接口是什么意思</h3><p>接口是在我们的应用程序中充当契约的结构。它定义了要遵循的类的语法，这意味着实现接口的类必须实现它的所有成员。它不能被实例化，但是可以被实现它的类对象引用。无论对象是否具有特定的结构，TypeScript 编译器都使用接口进行类型检查</p><h3 id="nodejs-搭建一个简单的-http-服务器过程"><a href="#nodejs-搭建一个简单的-http-服务器过程" class="headerlink" title="nodejs 搭建一个简单的 http 服务器过程"></a>nodejs 搭建一个简单的 http 服务器过程</h3><h3 id="Typescript-中的类的特征"><a href="#Typescript-中的类的特征" class="headerlink" title="Typescript 中的类的特征"></a>Typescript 中的类的特征</h3><p>继承、封装、多态性、抽象</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.toutiao.com/article/7282982136313807371">金九银十秋招前端必看的 2023 年前端高频面试题汇总（附答案）</a></li></ul><!-- 2023-12-04 -->]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>crawler的使用</title>
    <link href="https://www.gaotianyang.top/archives/20220607a78aa02e/"/>
    <id>https://www.gaotianyang.top/archives/20220607a78aa02e/</id>
    <published>2022-06-07T01:32:00.000Z</published>
    <updated>2022-06-07T08:13:58.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/07/XBGM2q.png" alt="首屏图"></p><a id="more"></a><blockquote><p>node-crawler：一个轻量级爬虫工具</p></blockquote><h2 id="这就是-node-crawler"><a href="#这就是-node-crawler" class="headerlink" title="这就是 node-crawler"></a>这就是 node-crawler</h2><p><code>node-crawler</code> 是一个轻量级的 node.js 爬虫工具，兼顾了高效与便利性，支持分布式爬虫系统，支持硬编码，支持 http 前级代理。</p><p><code>node-crawler</code> 完全由 nodejs 写成，天生支持非阻塞异步 IO，为爬虫的流水线作业机制提供了极大便利。同时支持对 <code>DOM</code> 的快速选择，对于抓取网页的特定部分的任务可以说是杀手级功能，无需再手写正则表达式，提高爬虫开发效率。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>DOM 元素快速解析 &amp; 符合 jQuery 语法的选择器功能(默认使用 Cheerio，支持更换为 <code>JSDOM</code> 等其它 DOM 解析器)</li><li>支持连接池模式，并发数和重连数均可配置</li><li>支持请求队列的优先权（即不同 URL 的请求能有不同的优先级）</li><li>支持延时功能（某些服务器对每分钟内连接数有限制）</li><li>支持 <code>forceUTF8</code> 模式以应对复杂的编码问题，当然你也可以自己为不同的连接设置编码</li><li>支持 4.x 及更高版本的 Nodejs</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_2">安装</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_3">最简单的使用实例</a></li><li>回调处理</li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_4">并发控制及慢速模式</a></li></ul><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_2">自定义参数</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_3">使用 http 代理</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_4">处理原始返回数据</a></li><li>分布式爬虫</li><li>链式模型</li><li>使用 POST,GET,PUT 等请求方法</li><li>使用 Cookie</li></ul><h2 id="参数详细介绍"><a href="#参数详细介绍" class="headerlink" title="参数详细介绍"></a>参数详细介绍</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_2">回调设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_3">调度参数</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_4">重试控制</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_5">DOM 选项</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_6">编码设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_7">缓存设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_8">其它</a></li></ul><h2 id="Crawler-类捕获事件"><a href="#Crawler-类捕获事件" class="headerlink" title="Crawler 类捕获事件"></a>Crawler 类捕获事件</h2><ul><li>Event: ‘schedule’</li><li>Event: ‘limiterChange’</li><li>Event: ‘request’</li><li>Event: ‘drain’</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><blockquote><p>循环爬取列表数据，并根据列表数据获取对应详情页数据。</p></blockquote><h3 id="获取列表数据"><a href="#获取列表数据" class="headerlink" title="获取列表数据"></a>获取列表数据</h3><p>根据数据源页面规律，构建爬取 url 列表。并爬取列表基础数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入爬虫插件</span></span><br><span class="line"><span class="keyword">const</span> Crawler = <span class="built_in">require</span>(<span class="string">&#x27;crawler&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入导出文件插件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//系统路径模块</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> format = <span class="built_in">require</span>(<span class="string">&#x27;./utils/format.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils/utils.js&#x27;</span>);</span><br><span class="line"><span class="comment">// 临时存储数据</span></span><br><span class="line"><span class="keyword">let</span> datas = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Crawler(&#123;</span><br><span class="line">  maxConnections: <span class="number">1</span>,</span><br><span class="line">  followRedirect: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在每个请求处理完毕后将调用此回调函数</span></span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params">error, res, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`错误条目<span class="subst">$&#123;res.options.title&#125;</span>%`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// $ 默认为 Cheerio 解析器</span></span><br><span class="line">      <span class="comment">// 它是核心jQuery的精简实现，可以按照jQuery选择器语法快速提取DOM元素</span></span><br><span class="line">      <span class="comment">// var $ = res.$;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化json(将dom结构解析为json数据)</span></span><br><span class="line">      <span class="keyword">let</span> json = format.formatList(res, host);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 合并数据</span></span><br><span class="line">      datas = [...datas, ...json];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取并输出进度(当queue插入的数据是数组对象时，可以根据res.options获取数据对应的属性)</span></span><br><span class="line">      <span class="keyword">let</span> progress = utils.getProgress(res.options.key, num);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`进度<span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当爬取完毕输出</span></span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(datas);</span><br><span class="line">      <span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line">      <span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;urlList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.options.key === num) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础配置</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">1</span>; <span class="comment">// 设置起始请求页数</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>; <span class="comment">// 设置请求页数总数</span></span><br><span class="line"><span class="keyword">let</span> host = <span class="string">&#x27;https://www.dytt8.net&#x27;</span>; <span class="comment">// 目标网站域名</span></span><br><span class="line"><span class="keyword">let</span> urls = []; <span class="comment">// 存储爬取页面列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建爬取列表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; num + <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> item = &#123;&#125;;</span><br><span class="line">  item.key = i;</span><br><span class="line">  <span class="comment">// 循环生成列表数据</span></span><br><span class="line">  item.uri = host + <span class="string">&#x27;/html/gndy/dyzz/list_23_&#x27;</span> + i + <span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">  urls.push(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将一个URL加入请求队列，并使用默认回调函数</span></span><br><span class="line">c.queue(urls);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将多个URL加入请求队列</span></span><br><span class="line"><span class="comment">// c.queue([&#x27;http://www.google.com/&#x27;, &#x27;http://www.yahoo.com&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------开始爬取---------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取详情数据"><a href="#获取详情数据" class="headerlink" title="获取详情数据"></a>获取详情数据</h3><p>根据第一步爬取的列表数据，进入详情页爬取详情数据，并通过正则匹配，处理成需要的数据格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Crawler = <span class="built_in">require</span>(<span class="string">&#x27;crawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> format = <span class="built_in">require</span>(<span class="string">&#x27;./utils/format.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils/utils.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> datas = [];</span><br><span class="line"><span class="comment">// 获取原始链接数据</span></span><br><span class="line"><span class="keyword">let</span> urlList = <span class="built_in">require</span>(<span class="string">&#x27;./json/urlList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Crawler(&#123;</span><br><span class="line">  maxConnections: <span class="number">1</span>,</span><br><span class="line">  followRedirect: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在每个请求处理完毕后将调用此回调函数</span></span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params">error, res, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`错误条目<span class="subst">$&#123;res.options.title&#125;</span>%`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// $ 默认为 Cheerio 解析器</span></span><br><span class="line">      <span class="comment">// 它是核心jQuery的精简实现，可以按照jQuery选择器语法快速提取DOM元素</span></span><br><span class="line">      <span class="comment">// var $ = res.$;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化json</span></span><br><span class="line">      <span class="keyword">let</span> json = format.formatDetails(res);</span><br><span class="line">      datas.push(json);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> progress = utils.getProgress(res.options.key, urlList.length);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`进度<span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line">      <span class="comment">// 当爬取完毕输出</span></span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(datas);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line">      <span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;movieList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.options.key === urlList.length) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>; <span class="comment">// 设置起始值</span></span><br><span class="line"><span class="keyword">let</span> urls = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = num; i &lt; urlList.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (urlList[i]) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = &#123;&#125;;</span><br><span class="line">    item.key = i + <span class="number">1</span>;</span><br><span class="line">    item.uri = urlList[i].url;</span><br><span class="line">    item.id = urlList[i].id;</span><br><span class="line">    item.title = urlList[i].title;</span><br><span class="line">    item.url = urlList[i].url;</span><br><span class="line">    item.date = urlList[i].date;</span><br><span class="line">    item.desc = urlList[i].desc;</span><br><span class="line">    item.img = urlList[i].img;</span><br><span class="line">    urls.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c.queue(urls);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------开始爬取---------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="清洗详情数据"><a href="#清洗详情数据" class="headerlink" title="清洗详情数据"></a>清洗详情数据</h3><p>数据中存在错误数据，异常数据，可以通过清洗脚本，批量赋默认值处理。例如清洗图片 404 的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 系统路径模块</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 异常图片地址列表</span></span><br><span class="line"><span class="keyword">const</span> formatConfig = <span class="built_in">require</span>(<span class="string">&#x27;./utils/formatConfig.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> formatList = <span class="built_in">require</span>(<span class="string">&#x27;./json/movieList.json&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置默认图片链接</span></span><br><span class="line"><span class="keyword">let</span> baseImage = <span class="string">&#x27;https://img9.doubanio.com/view/photo/l_ratio_poster/public/p.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; formatList.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 若img字段为空，赋默认值</span></span><br><span class="line">  <span class="keyword">if</span> (formatList[i].img === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    formatList[i].img = baseImage;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若img字段符合异常数据列表，赋默认值</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; formatConfig.errUrl.length; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (formatList[i].img.includes(formatConfig.errUrl[j])) &#123;</span><br><span class="line">      formatList[i].img = baseImage;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 格式化json</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(formatList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line"><span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;formatFinsh.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.npmjs.com/package/crawler">crawler 的 NPM 地址</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/">Node-Crawler 介绍</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/07/XBGM2q.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="爬虫" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="爬虫" scheme="https://www.gaotianyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>亿欧数据项目总结</title>
    <link href="https://www.gaotianyang.top/archives/2022060613e4dc3d/"/>
    <id>https://www.gaotianyang.top/archives/2022060613e4dc3d/</id>
    <published>2022-06-06T01:35:23.000Z</published>
    <updated>2022-06-07T08:26:25.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/XwopCj.jpg" alt="首屏图"></p><a id="more"></a><h2 id="📣v1-3-2022-05-31"><a href="#📣v1-3-2022-05-31" class="headerlink" title="📣v1.3(2022.05.31)"></a>📣v1.3(2022.05.31)</h2><blockquote><p><strong>总结：</strong>增加指标列表的计算功能，指标图表详情添加去分析。首页新增投融资周报列表、精选报告列表。优化跳转后高级筛选弹框可控，支持查看企业招投标数据、专利信息数据。支持简报删除的恢复。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-指标列表新增【计算】</td><td>1.首页/工作台-新增投融资周报分享</td><td>1.查看企业情报-跳转直接执行减少弹窗操作页面</td><td>1.简报的恢复功能</td></tr><tr><td>2.指标图表详情页-增加【去分析】入口</td><td>2.数据分析-亿欧特色新增【企业门店数据】</td><td>2.领域详情页-增加缓存提升加载性能问题</td><td></td></tr><tr><td></td><td></td><td>3.可支持查看企业招投标和专利信息</td></tr></tbody></table><h2 id="📣v1-2-1-2022-05-18"><a href="#📣v1-2-1-2022-05-18" class="headerlink" title="📣v1.2.1(2022.05.18)"></a>📣v1.2.1(2022.05.18)</h2><blockquote><p><strong>总结：</strong>增加情报监测模块信息维度，方便用户快速查看企业情报，支持上传情报源，拓展企业信息，优化高级/简单筛选查询逻辑。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.情报监测模块新增政策列表</td><td>1.数据分析-亿欧特色新增【公司经营数据】</td><td>1.支持高级筛选和普通筛选共用</td></tr><tr><td>2.企业列表支持选中企业查看对应情报信息</td><td>2.企业详情页增加经营数据-独家分析</td><td>2.主搜索的排序问题</td></tr><tr><td>3.支持客户上传情报源</td><td>3.企业详情页增加经营数据-招投标数据</td><td></td></tr><tr><td>4.企业详情页-融资历史支持下载图片</td><td>4.企业详情页增加经营数据-专利数据</td><td></td></tr><tr><td></td><td>5.企业详情页增加经营数据-行政处罚</td></tr></tbody></table><h2 id="📣v1-2-2022-04-28"><a href="#📣v1-2-2022-04-28" class="headerlink" title="📣v1.2(2022.04.28)"></a>📣v1.2(2022.04.28)</h2><blockquote><p><strong>总结：</strong>增加画图面板功能，支持图表样式、数据点的编辑，支持模板的保存与共享，支持插入自定义图表。</p><p><strong>亮点：</strong>添加画图面板功能，可自行配置图表样式、数据并存储为模板。根据自定义图表数据的不变特性，优化为插入图片方式。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-功能区新增【画图面板】</td><td>1.数据分析-亿欧特色新增【线上电商数据】</td><td>1.简报右侧数据组排序问题</td></tr><tr><td>2.画图面板支持图表样式设置和数据点编辑</td><td></td><td></td></tr><tr><td>3.支持样式模板创建，同组织下共享</td><td></td><td></td></tr><tr><td>4.设置好样式的图表支持简报插入</td><td></td></tr></tbody></table><h2 id="📣v1-1-1-2022-03-29"><a href="#📣v1-1-1-2022-03-29" class="headerlink" title="📣v1.1.1(2022.03.29)"></a>📣v1.1.1(2022.03.29)</h2><blockquote><p><strong>总结：</strong>数据分析添加查看情报入口，报告详情关联指标数据，新增行业图表，调整各模块权限。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-指标目录列表新增【查看报告】</td><td>1.数据分析-亿欧特色新增【报告指标】</td><td>1.行业分析-行业标签改名为【行业体系】</td><td>1.动态表格关联企业变更后的忽略/更新提示</td></tr><tr><td>2.报告详情页，新增报告关键指标数据</td><td></td><td>2.优化游客登录交互提示</td><td>2.宏观类型情报的主题展示和筛选</td></tr><tr><td>3.行业分析-新增行业图表页面</td><td></td><td>3.优化放宽访客权益</td></tr></tbody></table><h2 id="📣v1-1-2022-03-16"><a href="#📣v1-1-2022-03-16" class="headerlink" title="📣v1.1(2022.03.16)"></a>📣v1.1(2022.03.16)</h2><blockquote><p><strong>总结：</strong>添加动态表格更新提醒，新增权益中心，企业分析列表配置表单添加排序，新增宏观类型情报，权限弹框优化，注册页优化。</p><p><strong>亮点：</strong>拓展 antd 穿梭框排序功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.工作台-动态表格更新提醒</td><td>1.指标缩略图抽离组件</td><td>1.简报/报告插入 X 轴非时间类型的图表</td></tr><tr><td>2.底部 footer 区权益中心说明</td><td>2.权限弹窗优化升级</td><td>2.简报/报告在富文本删掉指标图表、情报和企业，对应树结构去掉勾选</td></tr><tr><td>3.企业分析-配置表单的穿梭框支持排序</td><td>3.注册页添加返回登录按钮</td><td></td></tr><tr><td>4.情报监测-新增【宏观】类型情报数据</td><td>4.工作台-侧边栏自动收起非当前项</td></tr></tbody></table><h2 id="📣v1-0-2022-02-28"><a href="#📣v1-0-2022-02-28" class="headerlink" title="📣v1.0(2022.02.28)"></a>📣v1.0(2022.02.28)</h2><blockquote><p><strong>总结：</strong>数据分析支持添加/编辑指标，优化登录后回到原页面，统一项目内各类弹框样式。高级筛选避免请求参数超长改为 POST 传参。</p><p><strong>亮点：</strong>通过不同场景进入登录页，记录原页面路由(参数)，并在登录后进行返回。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.数据分析-新增【添加指标】功能</td><td>1.登录完成后仍定位原位置</td></tr><tr><td>2.数据分析-产品指标数据支持【编辑】功能</td><td>2.权限弹窗优化升级</td></tr><tr><td>3.工作台-动态表格新增【分享】功能</td><td>3.产品弹窗样式统一</td></tr><tr><td></td><td>4.动态表格-批量添加结构，接口优化</td></tr><tr><td></td><td>5.工作台-高级筛选接口优化</td></tr></tbody></table><h2 id="📣-v0-9-2022-01-27"><a href="#📣-v0-9-2022-01-27" class="headerlink" title="📣 v0.9(2022.01.27)"></a>📣 v0.9(2022.01.27)</h2><blockquote><p><strong>总结：</strong>简报/报告支持插入追踪企业，支持导出长图。领域活跃机构支持导出。公共 footer 样式调整，全局样式统一，优化首页加载性能。</p><p><strong>亮点：</strong>加载性能优化，添加图片懒加载，调整代码组织结构，将第三方组件打包进行优化，项目图片改用 icon 并精简图片。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.工作台的简报管理/报告管理-新增【企业追踪】模块</td><td>1.追踪分组和简报/报告追踪分组排序优化：按更新时间倒序</td><td>1.注册按钮连点问题修复</td></tr><tr><td>2.工作台的简报管理/报告管理-新增【导出长图】功能</td><td>2.简报/报告插入情报的评论信息处理</td><td>2.首页加载过慢性能优化</td></tr><tr><td>3.领域详情页的活跃机构-新增【导出】功能</td><td>3.时间段筛选默认开始时间为‘00:00:00’，结束时间为‘23:59:59’</td><td>3.工作台的简报/报告插入政策数据展示问题</td></tr><tr><td></td><td>4.公共 footer 区优化</td><td></td></tr><tr><td></td><td>5.其他样式调整</td></tr></tbody></table><h2 id="📣v0-8-2021-01-10"><a href="#📣v0-8-2021-01-10" class="headerlink" title="📣v0.8(2021.01.10)"></a>📣v0.8(2021.01.10)</h2><blockquote><p><strong>总结：</strong>添加企业追踪功能，添加生成动态表格功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.企业分析下企业列表-新增【企业追踪】功能</td><td>1.产品模块页面加载乱序问题</td></tr><tr><td>2.企业分析下企业列表-新增【生成动态表格】功能</td><td>2.产品图片模糊问题</td></tr><tr><td>3.工作台-新增【动态表格】功能</td></tr></tbody></table><h2 id="📣v0-7-2021-12-08"><a href="#📣v0-7-2021-12-08" class="headerlink" title="📣v0.7(2021.12.08)"></a>📣v0.7(2021.12.08)</h2><blockquote><p><strong>总结：</strong>添加首页、亿欧专家，企业筛选新增特色推荐，企业标签添加资质标签。登录界面改版。</p><p><strong>亮点：</strong>首页利用 CSS3 样式，添加各类特效。动图改用 webp 格式，缩小文件尺寸。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.新增【首页】模块</td><td>1.登录页面更新背景图</td><td>1.工作台下简报/报告插入饼环状图问题</td></tr><tr><td>2.行业分析模块-新增【亿欧专家】页面</td><td>2.企业标签新增展示「资质标签」</td><td>2.饼环状图下载图片不圆问题</td></tr><tr><td>3.企业分析下企业列表-新增【特色推荐】信息</td><td></td></tr></tbody></table><h2 id="📣v0-6-2-2021-11-24"><a href="#📣v0-6-2-2021-11-24" class="headerlink" title="📣v0.6.2(2021.11.24)"></a>📣v0.6.2(2021.11.24)</h2><blockquote><p><strong>总结：</strong>领域详情添加企业、事件、机构分析图表，新增产品指标图表详情，数据分析支持饼环图。全局 button 样式统一。</p><p><strong>亮点：</strong>新增领域分布图，基于 echart 矩形树图，拓展左键下钻右键跳转功能。丰富领域详情数据的展示形式，将列表数据转化为图表，使用户理解更直观。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.领域详情页-新增企业、事件和机构的分析图表</td><td>1.数据分析-亿欧特色新增【企业分析】</td><td>1.行业分析下全部报告高级筛选增加「报告原文附件是否为空」选项</td></tr><tr><td>2.行业分析-新增产品指标图表详情页</td><td>2.数据分析-亿欧特色新增【交易分析】</td><td>2.全局操作 button 统一样式</td></tr><tr><td>3.数据分析下图表类型-新增饼环状图</td><td>3.数据分析-亿欧特色新增【机构分析】</td></tr></tbody></table><h2 id="📣v0-6-1-2021-11-03"><a href="#📣v0-6-1-2021-11-03" class="headerlink" title="📣v0.6.1(2021.11.03)"></a>📣v0.6.1(2021.11.03)</h2><blockquote><p><strong>总结：</strong>新增全部报告、报告图表、报告详情页。简报报告右侧数据支持关键词搜索，新增个人中心的权益说明。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.行业分析模块-新增【全部报告】页面</td><td>1.简报/报告右侧数据信息支持关键词检索</td></tr><tr><td>2.行业分析模块-新增【报告图表】页面</td><td>2.个人中心-账号权益期限说明</td></tr><tr><td>3.行业分析模块-新增【报告详情页】</td></tr></tbody></table><h2 id="📣v0-6-2021-10-20"><a href="#📣v0-6-2021-10-20" class="headerlink" title="📣v0.6(2021.10.20)"></a>📣v0.6(2021.10.20)</h2><blockquote><p><strong>总结：</strong>新增图表追踪功能，简报/报告支持插入指标图表、企业摘要。</p><p><strong>亮点：</strong>插入简报/报告的图表存在动态数据与静态数据两种情况，动态数据根据 id 进行实时渲染，静态为 base64 图片。导出 PDF 时首先生成 base64 图片再传递给后端进行处理。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.数据分析模块-新增图表【追踪】功能</td></tr><tr><td>2.工作台-新增【数据追踪】页面</td></tr><tr><td>3.工作台-新增【追踪图表详情页】</td></tr><tr><td>4.简报/报告插入数据维度-新增【指标图表】数据</td></tr><tr><td>5.简报/报告插入数据维度-新增【企业摘要】数据</td></tr></tbody></table><h2 id="📣v0-5-2021-09-30"><a href="#📣v0-5-2021-09-30" class="headerlink" title="📣v0.5(2021.09.30)"></a>📣v0.5(2021.09.30)</h2><blockquote><p><strong>总结：</strong>新增数据分析模块，指标的搜索过滤，支持指标图形化展示，数据点位列表展示，基础图形配置切换。</p><p><strong>亮点：</strong>组件化开发，组件拆分为指标目录、指标列表、筛选器、图表、最近浏览指标列表、数据列表。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【数据分析】模块</td></tr></tbody></table><h2 id="📣v0-4-1-2021-08-20"><a href="#📣v0-4-1-2021-08-20" class="headerlink" title="📣v0.4.1(2021.08.20)"></a>📣v0.4.1(2021.08.20)</h2><blockquote><p><strong>总结：</strong>新增外部专家列表、产业图谱页面、全局搜索功能。高级筛选筛组件支持搜索过滤。</p><p><strong>亮点：</strong>优化高级筛选选项，全部支持搜索过滤。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.行业分析模块-新增【外部专家】页面</td><td>1.企业列表高级筛选对应「企业画像」优化为树状结构</td><td>1.权益弹窗文案修复</td></tr><tr><td>2.行业分析模块-新增【产业图谱】页面</td><td>2.高级筛选对应关键词输入支持中英文逗号隔开</td><td>2.榜单数据清洗逻辑</td></tr><tr><td>3.新增【全局搜索】</td><td></td></tr></tbody></table><h2 id="📣v0-4-2021-08-06"><a href="#📣v0-4-2021-08-06" class="headerlink" title="📣v0.4(2021.08.06)"></a>📣v0.4(2021.08.06)</h2><blockquote><p><strong>总结：</strong>新增行业分析，全局各模块的用户权限体系，新增用户注册。丰富高级筛选选项，添加数值类型的介于筛选。</p><p><strong>亮点：</strong>使用 antd 树形组件，并对数据进行缓存，减少请求次数。丰富高级筛选选项类型(输入框、数字框、时间框、下拉框、树形下拉框、多选下拉等)。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.新增【行业分析】模块</td><td>1.高级筛选对于数值项新增「介于」</td><td>1.企业和事件列表，高级筛选「不为空」修复</td></tr><tr><td>2.新增全局用户权益体系</td><td></td><td>2.企业经营数据来源完善</td></tr><tr><td>3.新增用户注册页面</td><td></td><td></td></tr><tr><td>4.情报高级筛选增加「行业主题」维度</td><td></td></tr></tbody></table><h2 id="📣v0-3-2-2021-07-20"><a href="#📣v0-3-2-2021-07-20" class="headerlink" title="📣v0.3.2(2021.07.20)"></a>📣v0.3.2(2021.07.20)</h2><blockquote><p><strong>总结：</strong>新增企业榜单功能，支持保存榜单筛选项，进行定制榜单内容，支持导出企业列表、企业 logo 列表图片。</p><p><strong>亮点：</strong>使用 html2canvas 进行导出长图操作，解决导出图片空白问题，由于 html2canvas 与 antd 的 modal 组件冲突。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【企业榜单】功能</td></tr></tbody></table><h2 id="📣v0-3-1-2021-07-11"><a href="#📣v0-3-1-2021-07-11" class="headerlink" title="📣v0.3.1(2021.07.11)"></a>📣v0.3.1(2021.07.11)</h2><blockquote><p><strong>总结：</strong>拓展企业详情维度，展示更多企业信息。</p><p><strong>亮点：</strong>封装详情页 tab 分页业务功能组件，包含静态样式、权限判断，方便后续模块复用。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【企业详情页】模块</td></tr></tbody></table><h2 id="📣v0-3-2021-06-30"><a href="#📣v0-3-2021-06-30" class="headerlink" title="📣v0.3(2021.06.30)"></a>📣v0.3(2021.06.30)</h2><blockquote><p><strong>总结：</strong>新增企业列表、投融资事件列表，并封装对应的高级筛选组件。</p><p><strong>亮点：</strong>高级筛选组件，并编写支持筛选、保存、编辑、回填信息等一些列操作的公共方法，方便后期复用。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【全部企业列表】模块</td></tr><tr><td>2.企业分析模块-新增【企业投融资事件】模块</td></tr><tr><td>3.全部企业列表-新增【高级筛选】功能</td></tr></tbody></table><h2 id="📣v0-2-1-2021-06-15"><a href="#📣v0-2-1-2021-06-15" class="headerlink" title="📣v0.2.1(2021.06.15)"></a>📣v0.2.1(2021.06.15)</h2><blockquote><p><strong>总结：</strong>新增情报追踪功能，并添加情报详情的评论/@同组织员工的功能，并添加消息提醒。</p><p><strong>亮点：</strong>拓展 antd 评论组件，支持@同组织下的用户。拓展富文本编辑器插入情报功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.工作台模块-新增追踪列表</td></tr><tr><td>2.情报监测模块-新增【用户评论】功能</td></tr><tr><td>3.工作台模块-用户消息及红点</td></tr></tbody></table><h2 id="📣v0-2-2021-05-28"><a href="#📣v0-2-2021-05-28" class="headerlink" title="📣v0.2(2021.05.28)"></a>📣v0.2(2021.05.28)</h2><blockquote><p><strong>总结：</strong>新增简报管理模块，通过 wangEditer 富文本编辑器对文本进行编辑。</p><p><strong>亮点：</strong>拓展富文本编辑器目录功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【工作台】模块</td></tr><tr><td>2.工作台模块-新增简报管理模块</td></tr></tbody></table><h2 id="📣v0-1-2021-04-27"><a href="#📣v0-1-2021-04-27" class="headerlink" title="📣v0.1(2021.04.27)"></a>📣v0.1(2021.04.27)</h2><blockquote><p><strong>总结：</strong>确认项目选型，项目初始化，搭建项目结构。添加情报监测模块，新增用户中心模块。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【情报监测】模块</td></tr><tr><td>2.新增用户中心</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://data.iyiou.com/share/briefing/t2dbYZZ03m">亿欧数据版本记录</a></li><li><a href="https://data.iyiou.com/share/briefing/sTwN2aP01X">亿欧数据使用手册</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/XwopCj.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>前端面试经23</title>
    <link href="https://www.gaotianyang.top/archives/20220330b5b74555/"/>
    <id>https://www.gaotianyang.top/archives/20220330b5b74555/</id>
    <published>2022-03-30T06:56:56.000Z</published>
    <updated>2023-12-13T02:36:19.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前端面试汇总"><a href="#前端面试汇总" class="headerlink" title="前端面试汇总"></a>前端面试汇总</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><h4 id="最近的工作经历及项目经验，用到了哪些技术，负责哪些工作"><a href="#最近的工作经历及项目经验，用到了哪些技术，负责哪些工作" class="headerlink" title="最近的工作经历及项目经验，用到了哪些技术，负责哪些工作"></a>最近的工作经历及项目经验，用到了哪些技术，负责哪些工作</h4><ul><li>React<ul><li>hook<ul><li>useState 是一个 React Hook，它允许你向组件添加一个状态变量。</li><li>useEffect 是一个 React Hook，它允许你将组件与外部系统同步。<ul><li>第二个可选参数为 [] 时初始化获取数据</li><li>第二个可选参数为 一个 或 多个值 时，监听这些值的变化而进行操作</li><li>使用 return 的清除机制 <a href="https://zh-hans.legacy.reactjs.org/docs/hooks-effect.html">文档传送门</a></li></ul></li><li>useRef 是一个 React Hook，它能帮助引用一个不需要渲染的值<ul><li>useRef 用于操作 DOM 元素 <code>useRef().current.reload()</code> <a href="https://zhuanlan.zhihu.com/p/609933594">文档传送门</a></li></ul></li><li>useMemo 是一个 React Hook，它在每次重新渲染的时候能够缓存计算的结果。</li></ul></li></ul></li><li>Antd<ul><li>pro-components</li><li>pro-table</li><li>pro-card</li></ul></li><li>single-spa</li><li>charts<ul><li>cloud-charts</li><li>echarts</li></ul></li><li>formilyjs</li><li>classNames 一个简单的支持动态多类名的工具库</li><li>eventemitter2 组件间进行事件的监听与传递</li><li>协同开发<ul><li>墨刀 在线原型</li><li>codesign 在线设计稿</li><li>Yapi 后端代码联调</li><li>禅道/JIRA 开发任务拆分管理</li><li>Jenkins CI/CD</li></ul></li><li>tailwindcss[‘teilˌwind] 它是一个 CSS 样式库，为我们提供了构建定制设计而无需使用自定义样式所需的所有构建块</li></ul><h4 id="遇到了什么问题及怎么处理的"><a href="#遇到了什么问题及怎么处理的" class="headerlink" title="遇到了什么问题及怎么处理的"></a>遇到了什么问题及怎么处理的</h4><ul><li>优化问题<ul><li>数据大屏仿 PPT 横向切换 react-transition-group<ul><li>使用 location 承接 trend 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ul></li></ul></li><li>兼容问题<ul><li>九宫格动效低版本浏览器效果差异</li></ul></li><li>菜单定制化需求<ul><li>委员会管理的树形菜单与联动</li><li>根节点重复</li></ul></li><li>formilyjs 复杂场景<ul><li>数据联动</li><li>数据字典获取<ul><li>window.__globalData</li><li>window.__globalData.currentUser</li></ul></li><li>数据异步获取<ul><li>await window.__api.func()</li></ul></li><li>表单的动态生成</li></ul></li></ul><h3 id="CSS-相关"><a href="#CSS-相关" class="headerlink" title="CSS 相关"></a>CSS 相关</h3><h4 id="BFC-简单介绍，什么是-BFC，如何创建-BFC，BFC-的特性有什么。BFC-上下两个相邻的容器有什么特点"><a href="#BFC-简单介绍，什么是-BFC，如何创建-BFC，BFC-的特性有什么。BFC-上下两个相邻的容器有什么特点" class="headerlink" title="BFC 简单介绍，什么是 BFC，如何创建 BFC，BFC 的特性有什么。BFC 上下两个相邻的容器有什么特点"></a>BFC 简单介绍，什么是 BFC，如何创建 BFC，BFC 的特性有什么。BFC 上下两个相邻的容器有什么特点</h4><p>什么是 BFC(块级格式化上下文)：Block Formatting Context，解释为块级格式化上下文</p><p>创建方式：</p><ol><li>display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex</li><li>overflow 的值不是 visible（overflow:hidden、overflow:scroll）</li><li>float 的值不是 none。（float:left 或者 float:right）</li><li>position 的值不是 static 或者 relative。（position:absolute 或者 position:fixed）</li><li>父元素与正常文件流的子元素（非浮动子元素）自动形成一个 BFC</li></ol><p>特性：</p><ol><li>父亲管儿子(子元素浮动，父元素不再塌陷)</li><li>兄弟之间划清界限(兄弟元素其一浮动重叠，另一个元素设置 BFC 便不再重叠)</li></ol><h3 id="JS-相关"><a href="#JS-相关" class="headerlink" title="JS 相关"></a>JS 相关</h3><h4 id="null-与-undefined-的区别"><a href="#null-与-undefined-的区别" class="headerlink" title="null 与 undefined 的区别"></a>null 与 undefined 的区别</h4><p>null 表示没有对象，即该处不应该有值。<br>典型用法是:作为函数的参数，表示该函数的参数不是对象。作为对象原型链的终点。</p><p>undefined 表示缺少值，就是此处应该有一个值，但是还没有定义。<br>典型用法是:变量被声明了，但没有赋值时，就等于 undefined。</p><h4 id="typeOf-判断-null-的时候是-object-还是一个普通数据类型"><a href="#typeOf-判断-null-的时候是-object-还是一个普通数据类型" class="headerlink" title="typeOf 判断 null 的时候是 object 还是一个普通数据类型"></a>typeOf 判断 null 的时候是 object 还是一个普通数据类型</h4><p>可参考 <a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#检测变量的类型并区分数组和对象">检测变量的类型并区分数组和对象</a></p><table><thead><tr><th>值</th><th>类型</th></tr></thead><tbody><tr><td>typeof 1</td><td>“number”</td></tr><tr><td>typeof NaN</td><td>“number”</td></tr><tr><td>typeof “1”</td><td>“string”</td></tr><tr><td>typeof true</td><td>“boolean”</td></tr><tr><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>typeof null</td><td>“object”</td></tr><tr><td>typeof []</td><td>“object”</td></tr><tr><td>typeof {}</td><td>“object”</td></tr></tbody></table><ul><li>如果返回 number，判断是否是 NAN，isNaN(a) ，</li><li>首先使用 typeof 判断，如果返回 object，判断是否为 null</li><li>判断数组 or 对象<ul><li>最后使用 toString 如果是”[object Object]”是对象，否则是数组。</li><li>最后使用 <code>[] instanceof Array</code> <code>&#123;&#125; instanceof Array</code>如果是 false 是对象，否则是数组。</li></ul></li></ul><p>为什么 null 的类型判断是 Object 呢？</p><table><thead><tr><th>数据类型</th><th>机器码标识</th></tr></thead><tbody><tr><td>对象(Object)</td><td>000</td></tr><tr><td>整数</td><td>1</td></tr><tr><td>浮点数</td><td>010</td></tr><tr><td>字符串</td><td>100</td></tr><tr><td>布尔</td><td>110</td></tr><tr><td>undefined</td><td>-2^31(即全为 1)</td></tr><tr><td>null</td><td>全为 0</td></tr></tbody></table><p>在判断数据类型时，是根据机器码低位标识来判断的，而 null 的机器码标识为全 0，而对象的机器码低位标识为 000。所以 typeof null 的结果被误判为 Object。</p><p><a href="https://juejin.cn/post/6844903895177805837">为什么 typeof null 的结果是 Object?</a></p><h4 id="扩展运算符是深拷贝还是浅拷贝"><a href="#扩展运算符是深拷贝还是浅拷贝" class="headerlink" title="扩展运算符是深拷贝还是浅拷贝"></a>扩展运算符是深拷贝还是浅拷贝</h4><blockquote><p>元素是简单类型是深拷贝，元素是引用类型是浅拷贝</p></blockquote><p>如果只是一层数组或是对象，其元素只是简单类型的元素，那么属于深拷贝 (就是一层拷贝，暂时就理解为深拷贝吧! ! ! ! )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = [...aa];</span><br><span class="line">bb.age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>如果数组或对象中的元素是引用类型的元素，那么就是浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  address: &#123;</span><br><span class="line">    city: <span class="string">&#x27;shanghai&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = [...aa];</span><br><span class="line">bb.address.city = <span class="string">&#x27;shenzhen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.address.city); <span class="comment">// shenzhen;</span></span><br></pre></td></tr></table></figure><p>如何使得深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  address: &#123;</span><br><span class="line">    city: <span class="string">&#x27;shanghai&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = &#123;</span><br><span class="line">  ...aa,</span><br><span class="line">  address: &#123; ...aa.address &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bb.address.city = <span class="string">&#x27;shenzhen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.address.city); <span class="comment">// shanghai</span></span><br></pre></td></tr></table></figure><p>或者利用 JSON.parse(JSON.stringfy(xxx))来实现深拷贝<br>注意: JSON.parse(JSON.stringfy(xxx))的方法，如果变量中含有 Promise 对象，则不可以使用该方法</p><p><a href="https://blog.csdn.net/weixin_43925630/article/details/111299038">第一层深拷贝第二层浅拷贝</a></p><h4 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h4><ol><li>语法更加简洁、清晰</li><li>箭头函数不会创建自己的 this（重要！！深入理解！！）</li><li>箭头函数继承而来的 this 指向永远不变</li><li>.call()/.apply()/.bind()无法改变箭头函数中 this 的指向</li><li>箭头函数不能作为构造函数使用</li><li>箭头函数没有自己的 arguments</li><li>箭头函数没有原型 prototype</li><li>箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</li></ol><p><a href="https://juejin.cn/post/6844903805960585224">ES6 - 箭头函数、箭头函数与普通函数的区别</a></p><h4 id="箭头函数为什么不能当做构造函数"><a href="#箭头函数为什么不能当做构造函数" class="headerlink" title="箭头函数为什么不能当做构造函数"></a>箭头函数为什么不能当做构造函数</h4><ul><li>从上面的运行结果也可以看到箭头函数与构造函数相比，缺少了很多东西，比如：caller，arguments，prototype，但同时也可以看到，箭头函数是有<strong>proto</strong>属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是原型链到箭头函数这一环就停止了，因为它自己没有 prototype 属性，没法让他的实例的<strong>proto</strong>属性指向，所以箭头函数也就无法作为构造函数。</li><li>同时我们可以看到，由于箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数，不能绑定 this，所以 call()和 apply()的第一个参数会被忽略。</li></ul><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#箭头函数能作为构造函数吗">箭头函数能作为构造函数吗</a></p><h4 id="new-的执行过程是怎样的"><a href="#new-的执行过程是怎样的" class="headerlink" title="new 的执行过程是怎样的"></a>new 的执行过程是怎样的</h4><ol><li>创建一个新对象</li><li>将新对象的<em>proto</em>指向构造函数的 prototype 对象</li><li>将构造函数的作用域赋值给新对象 （也就是 this 指向新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = &#123;&#125;;</span><br><span class="line">Obj._proto_ = Person.prototype();</span><br><span class="line">Person.call(Obj);</span><br></pre></td></tr></table></figure><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#New关键词干了什么">New 关键词干了什么</a></p><h4 id="new-操作符实例化对象时-构造函数有返回值-字符串-会怎么样"><a href="#new-操作符实例化对象时-构造函数有返回值-字符串-会怎么样" class="headerlink" title="new 操作符实例化对象时 构造函数有返回值(字符串)会怎么样"></a>new 操作符实例化对象时 构造函数有返回值(字符串)会怎么样</h4><blockquote><p>正常将对象实例化</p></blockquote><p>当构造函数返回了函数或非 null 对象时(func、[]、{})<br>执行 var x = new X()，此时只是将 X 作为普通的函数执行，<br>函数执行的返回值直接作为变量 x 的值，变量 x 不是类 X 的实例化对象，X.prototype 也不是变量 x 的原型。</p><p>其他情况（构造函数无返回值、返回值不是对象也不是函数、返回值是 null），正常将对象实例化。</p><p><a href="https://blog.csdn.net/iispring/article/details/105108178">JavaScript 中使用 new 操作符实例化对象时构造函数有返回值的情况分析</a></p><h4 id="class-和-function-的区别"><a href="#class-和-function-的区别" class="headerlink" title="class 和 function 的区别"></a>class 和 function 的区别</h4><p>相同点：</p><p>都可以成为构造函数</p><p>不同点：</p><ul><li>class 构造函数必须使用 new 操作符</li><li>class 声明不可以提升</li><li>class 不可以用 call、apply、bind 改变执行上下文</li></ul><p><a href="https://blog.csdn.net/Jack_lzx/article/details/121098261">JavaScript class 和 function 的区别</a><br><a href="https://zhuanlan.zhihu.com/p/657235691">JavaScript ES6-class 和 ES5-构造函数 function 的区别</a></p><h4 id="class-里存在-this-吗"><a href="#class-里存在-this-吗" class="headerlink" title="class 里存在 this 吗"></a>class 里存在 this 吗</h4><p>有 this 但是不可以通过 .call 的方式进行指向</p><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="浏览器解析流程"><a href="#浏览器解析流程" class="headerlink" title="浏览器解析流程"></a>浏览器解析流程</h4><ol><li>DNS 域名解析</li><li>发起 TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回响应结果</li><li>浏览器解析渲染页面</li><li>断开连接</li></ol><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#输入地址后的过程">输入地址后的过程</a></p><h4 id="DNS-域名解析有哪些操作"><a href="#DNS-域名解析有哪些操作" class="headerlink" title="DNS 域名解析有哪些操作"></a>DNS 域名解析有哪些操作</h4><ol><li>查看浏览器缓存</li><li>查看系统缓存</li><li>查看路由器缓存</li><li>查看 ISP DNS 缓存</li><li>询问根域名服务器</li><li>询问顶级域名服务器</li><li>询问权威域名（主域名）服务器</li><li>保存结果至缓存</li></ol><p><a href="https://www.sfn.cn/news/technology/detail/222.html?navId=22">一文读懂 DNS 原理及解析过程</a></p><h4 id="TCP-链接过程-3-次握手-4-次挥手"><a href="#TCP-链接过程-3-次握手-4-次挥手" class="headerlink" title="TCP 链接过程 3 次握手 4 次挥手"></a>TCP 链接过程 3 次握手 4 次挥手</h4><p><a href="https://bbs.huaweicloud.com/blogs/233667">一文搞懂 TCP 的三次握手和四次挥手</a></p><h4 id="请求如果阻塞要如何处理"><a href="#请求如果阻塞要如何处理" class="headerlink" title="请求如果阻塞要如何处理"></a>请求如果阻塞要如何处理</h4><p><a href="https://blog.csdn.net/qq_34337333/article/details/131239848">前端请求队列，解决多个请求同时请求一个接口导致阻塞的问题</a></p><h4 id="是否了解-UDP-用户数据报协议-协议"><a href="#是否了解-UDP-用户数据报协议-协议" class="headerlink" title="是否了解 UDP(用户数据报协议)协议"></a>是否了解 UDP(用户数据报协议)协议</h4><p>UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。当强调传输性能而不是传输的完整性时适合使用此种协议.</p><p><a href="https://baike.baidu.com/item/UDP/571511?fr=ge_ala">UDP 协议</a></p><h4 id="浏览器如何渲染-html"><a href="#浏览器如何渲染-html" class="headerlink" title="浏览器如何渲染 html"></a>浏览器如何渲染 html</h4><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><p><a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#浏览器渲染过程">浏览器渲染过程</a></p><h4 id="有哪些因素会阻塞浏览器渲染"><a href="#有哪些因素会阻塞浏览器渲染" class="headerlink" title="有哪些因素会阻塞浏览器渲染"></a>有哪些因素会阻塞浏览器渲染</h4><p>白屏时间的瓶颈主要体现在下载 CSS 文件、下载 JavaScript 文件和执行 JavaScript； 所以要想缩短白屏时长，可以有以下策略：</p><ol><li>内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了，但并不是所有的场合都适合内联。</li><li>尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。</li><li>将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 async 或者 defer。</li><li>利用媒体查询属性，在特定的场景下加载特定的 CSS 文件。</li></ol><p><a href="https://juejin.cn/post/7083752157085696014">漫漫前端路之浏览器基础——页面渲染阻塞原因分析篇</a></p><h4 id="CDN-的原理是什么"><a href="#CDN-的原理是什么" class="headerlink" title="CDN 的原理是什么"></a>CDN 的原理是什么</h4><p>CDN 的原理是: 基于分布式架构，通过将源服务器上的内容分发到多个节点服务器上，使用户能够从最近的服务器中获取所需内容。<br>这些节点服务器被称为 边缘服务器，它们通常位于不同的地理位置，并通过高速互联网连接互相交换数据。<br>用户通过接入离他们最近的 边缘服务器 来获取所需的内容，从而降低了响应时间和延迟，提高了网站的访问速度。</p><p><a href="https://www.51cto.com/article/750758.html">CDN 原理入门，你学会了吗？</a></p><h3 id="react-相关"><a href="#react-相关" class="headerlink" title="react 相关"></a>react 相关</h3><h4 id="React-函数组件和类组件的区别"><a href="#React-函数组件和类组件的区别" class="headerlink" title="React 函数组件和类组件的区别"></a>React 函数组件和类组件的区别</h4><ol><li>语法上<ol><li>函数组件它接收一个 <code>props</code> 对象返回一个 <code>react</code> 元素</li><li>类组件需要去继承 <code>React.Component</code> 并且创建 <code>render</code> 函数返回 <code>react</code> 元素</li></ol></li><li><del>状态管理</del> 使用 hooks 解决</li><li><del>生命周期钩子</del> 使用 hooks 解决</li><li>调用方式<ol><li>函数组件直接调用函数使用</li><li>类组件需要先用 <code>new</code> 操作符将其实例化，然后调用刚才生成实例的 <code>render</code> 方法</li></ol></li><li>获取渲染时的值</li></ol><ul><li>语法上</li></ul><p>函数组件是一个纯函数，它接收一个 <code>props</code> 对象返回一个 <code>react</code> 元素；<br>类组件需要去继承 <code>React.Component</code> 并且创建 <code>render</code> 函数返回 <code>react</code> 元素，虽然实现的效果相同，但需要更多的代码。</p><ul><li><del>状态管理</del></li></ul><p>因为函数组件是一个纯函数，所以不能在组件中使用 <code>setState()</code>，这也是为什么把函数组件称作为无状态组件。<br>如果要在组件中使用 <code>state</code> ，可以选择创建一个类组件或者将 <code>state</code> 提升到你的父组件中，然后通过 <code>props</code> 对象传递到子组件。</p><blockquote><p>注意：在 <code>react16.8</code> 版本中添加了 <code>hooks</code> ，使得我们可以在函数组件中使用 <code>useState</code> 钩子去管理 <code>state</code> ，使用 <code>useEffect</code> 钩子去使用生命周期函数。<br>因此，2、3 两点就不是它们的区别点。而从这个改版中我们也可以看出 React 团队更看重函数组件，而且曾提及到在 <code>react</code> 之后的版本将会对函数组件的性能方面进行提升。</p></blockquote><ul><li><del>生命周期钩子</del></li></ul><p>函数组件中不能使用生命周期钩子，原因和不能使用 <code>state</code> 一样，所有的生命周期钩子都来自于继承的 <code>React.Component</code> 中。<br>因此，如果要使用生命周期钩子，就需要使用类组件。</p><blockquote><p>注意：在 <code>react16.8</code> 版本中添加了 <code>hooks</code> ，使得我们可以在函数组件中使用 <code>useState</code> 钩子去管理 <code>state</code> ，使用 <code>useEffect</code> 钩子去使用生命周期函数。<br>因此，2、3 两点就不是它们的区别点。而从这个改版中我们也可以看出 React 团队更看重函数组件，而且曾提及到在 <code>react</code> 之后的版本将会对函数组件的性能方面进行提升。</p></blockquote><ul><li>调用方式</li></ul><p>如果 <code>SayHi</code> 是一个函数， <code>React</code> 需要调用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你的代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// React 内部</span></span><br><span class="line"><span class="keyword">const</span> result = SayHi(props); <span class="comment">// » &lt;p&gt;Hello, React&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>如果 <code>SayHi</code> 是一个类， <code>React</code> 需要先用 <code>new</code> 操作符将其实例化，然后调用刚才生成实例的 <code>render</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHi</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// React 内部</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> SayHi(props); <span class="comment">// » SayHi &#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> result = instance.render(); <span class="comment">// » &lt;p&gt;Hello, React&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>可想而知，函数组件重新渲染将重新调用组件方法返回新的 <code>react</code> 元素，类组件重新渲染将 <code>new</code> 一个新的组件实例，<br>然后调用 <code>render</code> 类方法返回 <code>react</code> 元素，这也说明为什么类组件中 <code>this</code> 是可变的。</p><ul><li>获取渲染时的值</li></ul><p>考虑以下组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserProfile</code> 组件很简单，就一个 <code>Follow</code> 按钮，该按钮使用了 <code>setTimeout</code> 模拟网络请求。<br>用户点击这个按钮之后会弹出一个警告框。如果 <code>props.user</code> 为 <code>&#39;Dan&#39;</code>，它将在三秒钟后显示 <code>&#39;Followed Dan&#39;</code>。</p><p>我们如何将其编写为类？天真的翻译可能像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage() &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + <span class="built_in">this</span>.props.user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.showMessage.bind(<span class="built_in">this</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常认为这两个代码段是等效的。人们经常在这些模式之间自由重构，而没有注意到它们的含义</p><p>但是，这两个代码段是完全不同的。</p><p>分别按下面的顺序来操作 Follow 按钮：</p><ol><li>先点击 Follow 按钮</li><li>在 3s 之前更改下拉选择项的选项</li><li>阅读弹出的警告框内容</li></ol><p>这就发现函数组件和类组件是有区别的：</p><ul><li>函数组件：按上面所列的三个步骤操作时，当用户在 3s 前更改下拉选择框的选项时，h1 的用户名会立马改变，而 3s 后弹出的警告框中的用户名并不会改变</li><li>类组件：按上面所列的三个步骤操作时，当用户在 3s 前更改下拉选择框的选项时，h1 中的用户名会立马改变，而 3s 后弹出的警告框中的用户名也会改变</li></ul><p>我们可以在类的构造函数中绑定这些方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 获取 props</span></span><br><span class="line">    cosnt props = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它们不是类方法</span></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，函数组件和类组件所达到的效果都一样了。在类组件中可以捕获渲染时的 props。效果上看上去是一样了，但看起来怪怪的。如果在类组件中的 render 中定义函数而不是使用类方法，那么还有使用类的必要性？</p><p><a href="https://cloud.tencent.com/developer/article/1843744">React 函数组件和类组件的区别</a></p><h4 id="Usememo-是否了解，原理是什么"><a href="#Usememo-是否了解，原理是什么" class="headerlink" title="Usememo 是否了解，原理是什么"></a>Usememo 是否了解，原理是什么</h4><ul><li>useMemo 是用来缓存计算属性的，它会在发现依赖未发生改变的情况下返回旧的计算属性值的地址。</li><li>useMemo 绝不是用的越多越好，缓存这项技术本身也需要成本。</li><li>useMemo 的使用场景之一是:只需要给拥有巨大计算量的计算属性缓存即可。</li><li>useMemo 的另一个使用场景是：当有计算属性被传入子组件，并且子组件使用了 react.memo 进行了缓存的时候,为了避免子组件不必要的渲染时使用</li></ul><p><a href="https://juejin.cn/post/7108278900085489671">React 性能优化篇之 useMemo 的使用场景及其深度解读</a></p><h4 id="为什么使用-hooks"><a href="#为什么使用-hooks" class="headerlink" title="为什么使用 hooks"></a>为什么使用 hooks</h4><ol><li>更容易复用代码</li><li>清爽的代码风格+代码量更少</li><li>代码可读性更强</li><li>组件树层级变浅</li><li>不用再去考虑 this 的指向问题</li></ol><p><a href="https://zhuanlan.zhihu.com/p/392191865">为什么要使用 Hooks？</a></p><ul><li>优点：<ul><li>更容易复用代码</li><li>代码量更少</li></ul></li><li>缺点：<ul><li>响应式的 useEffect</li><li>hooks 不擅长异步的代码</li><li>custom hooks 有时严重依赖参数的不可变性</li></ul></li><li>解决方案：<ul><li>不要在 useEffect 里面写太多的依赖项，划分这些依赖项成多个单一功能的 useEffect。其实这点是遵循了软件设计的“单一职责模式”。</li><li>如果你碰到状态不同步的问题，可以考虑下手动传递参数到函数。</li><li>拆分组件，细化组件的粒度。复杂业务场景中使用 hooks，应尽可能地细分组件，使得组件的功能尽可能单一，这样的 hooks 组件更好维护。</li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/88593858">谈谈 react hooks 的优缺点</a></p><h4 id="usestate-赋值操作是同步的还是异步的，多次赋值，界面会渲染几次"><a href="#usestate-赋值操作是同步的还是异步的，多次赋值，界面会渲染几次" class="headerlink" title="usestate 赋值操作是同步的还是异步的，多次赋值，界面会渲染几次"></a>usestate 赋值操作是同步的还是异步的，多次赋值，界面会渲染几次</h4><p>严格来说，不是异步也不是同步。setState 有时候不会即时更新是因为 React 的优化机制，在事件处理器中批量处理更新。<br>而在某些时候，setState 会同步更新。分别看一下这两种情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>组件只会更新一次</p><p>而在异步代码（promise、async/await、setTimeout/setInterval、fetch）中的更新，不会批量处理， 比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  callAPI().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>组件会更新两次，我们称这样的更新是 outside of react event handlers,<br>发生在 react 事件处理器之外，此时的回调在 react 执行机制完成之后进行，react 没办法批量更新。</p><p><a href="https://juejin.cn/post/6997020924205596702">关于 useState 你需要知道的一切</a></p><h4 id="为什么虚拟-dom-优于操作真实-dom"><a href="#为什么虚拟-dom-优于操作真实-dom" class="headerlink" title="为什么虚拟 dom 优于操作真实 dom"></a>为什么虚拟 dom 优于操作真实 dom</h4><ul><li>虚拟 DOM 不一定会比操作原生 DOM 更快。</li><li>虚拟 DOM 的优势在于节点进行改动的时候尽量减少开销</li><li>React 从来没说过虚拟 DOM 会比原生更快。</li><li>框架的本质是提升开发效率，让我们的注意力更集中于数据</li></ul><p><a href="https://juejin.cn/post/7130538545063657486">使用虚拟 DOM 一定会比直接操作真实 DOM 快吗？这还真不一定。</a></p><h4 id="是否了解-react-的优化算法，是如何优化的"><a href="#是否了解-react-的优化算法，是如何优化的" class="headerlink" title="是否了解 react 的优化算法，是如何优化的"></a>是否了解 react 的优化算法，是如何优化的</h4><ol><li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li><li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li><li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li></ol><p><a href="https://juejin.cn/post/7116326409961734152">「React 深入」一文吃透虚拟 DOM 和 diff 算法</a></p><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><h4 id="全面质量管理系统"><a href="#全面质量管理系统" class="headerlink" title="全面质量管理系统"></a>全面质量管理系统</h4><ul><li>九宫格 card 动效 低版本浏览器兼容性 图片替代 css 效果</li><li>大屏横向切换 渐进渐出 白屏处理</li><li>使用 cloud-charts 展示图表信息</li><li>使用 formilyjs 渲染表单 快速搭建页面 动态生成页面 复杂场景需求 联动、全局字典</li><li>组织架构 菜单与组织架构树状图联动效果</li><li>使用了 single-spa 微服务项目架构 各个子应用间的相互引用 在基座上挂载子应用</li></ul><h4 id="如何进行的各个子应用相互间引用"><a href="#如何进行的各个子应用相互间引用" class="headerlink" title="如何进行的各个子应用相互间引用"></a>如何进行的各个子应用相互间引用</h4><p>useHistory()、useLocation()需要从外层使用应用获取并传递至引用的应用</p><h4 id="各个子应用之间的-css-样式污染"><a href="#各个子应用之间的-css-样式污染" class="headerlink" title="各个子应用之间的 css 样式污染"></a>各个子应用之间的 css 样式污染</h4><ol><li>设置 ElConfigProvider</li><li>设置 SCSS 和 CSS 变量</li><li>定义子应用的 class 包裹</li></ol><p><a href="https://juejin.cn/post/7114882453956722724">微前端基座样式，污染子应用样式的解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Lighthouse测试</title>
    <link href="https://www.gaotianyang.top/archives/202201056cf0f9a5/"/>
    <id>https://www.gaotianyang.top/archives/202201056cf0f9a5/</id>
    <published>2022-01-05T01:35:42.000Z</published>
    <updated>2022-01-06T09:19:11.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s4.ax1x.com/2022/01/05/TXBKnH.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Lighthouse-简介"><a href="#Lighthouse-简介" class="headerlink" title="Lighthouse 简介"></a>Lighthouse 简介</h2><p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。只要为 Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p><h2 id="Lighthouse-使用方式"><a href="#Lighthouse-使用方式" class="headerlink" title="Lighthouse 使用方式"></a>Lighthouse 使用方式</h2><p>目前官方提供了 4 种使用方式：</p><ul><li><a href="https://github.com/GoogleChrome/lighthouse#using-lighthouse-in-chrome-devtools">Chrome 开发者工具（DevTools）</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-chrome-extension">Chrome 扩展</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-cli">Node CLI</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-module">Node Module</a></li></ul><p>以 Chrome 开发者工具为例，在 Lighthouse 面板下，用户可以配置测试平台、测试类目、限速方式等，可以方便快捷地发起一次测试。</p><p><img src="https://s4.ax1x.com/2022/01/06/TxXM7D.png" alt="Lighthouse"></p><h2 id="Lighthouse-测试报告"><a href="#Lighthouse-测试报告" class="headerlink" title="Lighthouse 测试报告"></a>Lighthouse 测试报告</h2><p>测试结束后，默认会生成 HTML 格式的报告，如下图所示，在报告中涵盖了 5 大类别（categories）的测试评分：</p><p><img src="https://s4.ax1x.com/2022/01/05/TXB84P.jpg" alt="categories"></p><p>每个类别都包含一系列的审计项（audit），针对审计项的运行结果，Lighthouse 会给出特定的优化建议与诊断结果帮助开发者有针对性地进行优化。</p><h3 id="First-Contentful-Paint-首次内容绘制-FCP"><a href="#First-Contentful-Paint-首次内容绘制-FCP" class="headerlink" title="First Contentful Paint 首次内容绘制(FCP)"></a>First Contentful Paint 首次内容绘制(FCP)</h3><p>首次内容绘制 (FCP) 是测量感知加载速度的一个以用户为中心的重要指标，因为该项指标会在用户首次在屏幕上看到任何内容时，<br>在页面加载时间轴中标记出相应的点，迅捷的 FCP 有助于让用户确信某些事情正在进行。</p><h4 id="什么是-FCP"><a href="#什么是-FCP" class="headerlink" title="什么是 FCP"></a>什么是 FCP</h4><p>首次内容绘制 (FCP) 指标测量页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。对于该指标，”内容”指的是文本、图像（包括背景图像）、<code>&lt;svg&gt;</code>元素或非白色的<code>&lt;canvas&gt;</code>元素。</p><p><img src="https://s4.ax1x.com/2022/01/05/TXBxUI.png" alt="FCP"></p><p>在上方的加载时间轴中，FCP 发生在第二帧，因为那是首批文本和图像元素在屏幕上完成渲染的时间点。</p><p>您会注意到，虽然部分内容已完成渲染，但并非所有内容都已经完成渲染。<br>这是首次内容绘制 (FCP) 与<em>Largest Contentful Paint 最大内容绘制 (LCP)</em>（旨在测量页面的主要内容何时完成加载）之间的重要区别。</p><h4 id="如何改进-FCP"><a href="#如何改进-FCP" class="headerlink" title="如何改进 FCP"></a>如何改进 FCP</h4><p><a href="https://web.dev/i18n/zh/fcp/">常见解决方案:</a></p><ul><li>消除阻塞渲染的资源</li><li>缩小 CSS</li><li>移除未使用的 CSS</li><li>预连接到所需的来源</li><li>减少服务器响应时间 (TTFB)</li><li>避免多个页面重定向</li><li>预加载关键请求</li><li>避免巨大的网络负载</li><li>使用高效的缓存策略服务静态资产</li><li>避免 DOM 过大</li><li>最小化关键请求深度</li><li>确保文本在网页字体加载期间保持可见</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Time-to-Interactive-可交互时间-TTI"><a href="#Time-to-Interactive-可交互时间-TTI" class="headerlink" title="Time to Interactive 可交互时间(TTI)"></a>Time to Interactive 可交互时间(TTI)</h3><p>可交互时间 (TTI) 是测量加载响应度的重要实验室指标。该指标有助于识别看起来具备交互性但实际上并非如此的页面情况。迅捷的 TTI 有助于确保页面的有效性。</p><h4 id="什么是-TTI"><a href="#什么是-TTI" class="headerlink" title="什么是 TTI"></a>什么是 TTI</h4><p>TTI 指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。</p><p>如需根据网页的性能跟踪计算 TTI，请执行以下步骤：</p><ul><li>先进行 First Contentful Paint 首次内容绘制 (FCP)。</li><li>沿时间轴正向搜索时长至少为 5 秒的安静窗口，其中，安静窗口的定义为：没有长任务且不超过两个正在处理的网络 GET 请求。</li><li>沿时间轴反向搜索安静窗口之前的最后一个长任务，如果没有找到长任务，则在 FCP 步骤停止执行。</li><li>TTI 是安静窗口之前最后一个长任务的结束时间（如果没有找到长任务，则与 FCP 值相同）。</li></ul><p>下图将有助于您更直观地理解上述步骤：</p><p><img src="https://web-dev.imgix.net/image/admin/WZM0n4aXah67lEyZugOT.svg" alt="显示 TTI 计算方式的页面加载时间轴"></p><p>长久以来，开发者为了追求更快的渲染速度而对页面进行了优化，但有时，这会以牺牲 TTI 为代价。</p><p>服务器端渲染 (SSR) 等技术可能会导致页面看似具备交互性（即，链接和按钮在屏幕上可见），<br>但实际上并不能进行交互，因为主线程被阻塞或是因为控制这些元素的 JavaScript 代码尚未完成加载。</p><p>当用户尝试与看似具备交互性但实际上并非如此的页面进行交互时，他们可能会有如下两种反应：</p><ul><li>在最好的情况下，他们会因为页面响应缓慢而感到恼火。</li><li>在最坏的情况下，他们会认为页面已损坏，因此很可能直接离开。他们甚至可能对您的品牌价值丧失信心或信任。</li></ul><p>为了避免这个问题，请尽一切努力将 FCP 和 TTI 之间的差值降至最低。如果两者在某些情况下确实存在明显差异，请通过视觉指示器清楚表明页面上的组件还无法进行交互。</p><h4 id="如何改进-TTI"><a href="#如何改进-TTI" class="headerlink" title="如何改进 TTI"></a>如何改进 TTI</h4><p><a href="https://web.dev/i18n/zh/tti/">常见解决方案:</a></p><ul><li>缩小 JavaScript</li><li>预连接到所需的来源</li><li>预加载关键请求</li><li>减少第三方代码的影响</li><li>最小化关键请求深度</li><li>减少 JavaScript 执行时间</li><li>最小化主线程工作</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Speed-Index-速度指数"><a href="#Speed-Index-速度指数" class="headerlink" title="Speed Index 速度指数"></a>Speed Index 速度指数</h3><p>速度指数是 Lighthouse 报告的“性能”部分中跟踪的六个指标之一。每个指标都捕获页面加载速度的某些方面。</p><p>Lighthouse 以秒为单位显示速度指数：</p><p><img src="https://s4.ax1x.com/2022/01/06/TzSAQs.png" alt="Speed Index"></p><h4 id="什么是速度指数"><a href="#什么是速度指数" class="headerlink" title="什么是速度指数"></a>什么是速度指数</h4><p>速度指数衡量页面加载期间内容的视觉显示速度。 Lighthouse 首先捕获浏览器中页面加载的视频，并计算帧之间的视觉进展。<br>Lighthouse 然后使用 Speedline Node.js 模块生成速度指数分数。</p><h4 id="如何改进速度指数"><a href="#如何改进速度指数" class="headerlink" title="如何改进速度指数"></a>如何改进速度指数</h4><p><a href="https://web.dev/speed-index/">常见解决方案:</a></p><ul><li>最小化主线程工作</li><li>减少 JavaScript 执行时间</li><li>确保文本在字体文件加载期间保持可见</li></ul><h3 id="Total-Blocking-Time-总阻塞时间-TBT"><a href="#Total-Blocking-Time-总阻塞时间-TBT" class="headerlink" title="Total Blocking Time 总阻塞时间(TBT)"></a>Total Blocking Time 总阻塞时间(TBT)</h3><p>总阻塞时间 (TBT) 是测量加载响应度的重要实验室指标，因为该项指标有助于量化在页面交互性变为可靠前，不可交互程度的严重性，较低的 TBT 有助于确保页面的可用性。</p><h4 id="什么是-TBT"><a href="#什么是-TBT" class="headerlink" title="什么是 TBT"></a>什么是 TBT</h4><p>总阻塞时间 (TBT) 指标测量 First Contentful Paint 首次内容绘制 (FCP)与 Time to Interactive 可交互时间 (TTI)之间的总时间，<br>这期间，主线程被阻塞的时间过长，无法作出输入响应。</p><p>每当出现长任务（在主线程上运行超过 50 毫秒的任务）时，主线程都被视作”阻塞状态”。我们说主线程处于”阻塞状态”是因为浏览器无法中断正在进行的任务。<br>因此，如果用户在某个长任务运行期间与页面进行交互，那么浏览器必须等到任务完成后才能作出响应。</p><p>如果任务时长足够长（例如超过 50 毫秒），那么用户很可能会注意到延迟，并认为页面缓慢或卡顿。</p><p>某个给定长任务的阻塞时间是该任务持续时间超过 50 毫秒的部分。一个页面的总阻塞时间是在 FCP 和 TTI 之间发生的每个长任务的阻塞时间总和。</p><p>例如，请看以下这张页面加载期间浏览器主线程的图表：</p><p><img src="https://web-dev.imgix.net/image/admin/clHG8Yv239lXsGWD6Iu6.svg" alt="主线程上的任务时间轴"></p><p>上方的时间轴上有五个任务，其中三个是长任务，因为这些任务的持续时间超过 50 毫秒。下图显示了各个长任务的阻塞时间：</p><p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xKxwKagiz8RliuOI2Xtc.svg" alt="显示阻塞时间的主线程任务时间轴"></p><p>因此，虽然在主线程上运行任务的总时间为 560 毫秒，但其中只有 345 毫秒被视为阻塞时间。</p><table><thead><tr><th></th><th style="text-align:center">任务持续时间</th><th style="text-align:center">任务阻塞时间</th></tr></thead><tbody><tr><td>任务一</td><td style="text-align:center">250 毫秒</td><td style="text-align:center">200 毫秒</td></tr><tr><td>任务二</td><td style="text-align:center">90 毫秒</td><td style="text-align:center">40 毫秒</td></tr><tr><td>任务三</td><td style="text-align:center">35 毫秒</td><td style="text-align:center">0 毫秒</td></tr><tr><td>任务四</td><td style="text-align:center">30 毫秒</td><td style="text-align:center">0 毫秒</td></tr><tr><td>任务五</td><td style="text-align:center">155 毫秒</td><td style="text-align:center">105 毫秒</td></tr><tr><td>总阻塞时间</td><td style="text-align:center"></td><td style="text-align:center">345 毫秒</td></tr></tbody></table><h4 id="TBT-与-TTI-有什么关系"><a href="#TBT-与-TTI-有什么关系" class="headerlink" title="TBT 与 TTI 有什么关系"></a>TBT 与 TTI 有什么关系</h4><p>TBT 是 TTI 的一个出色的配套指标，因为 TBT 有助于量化在页面交互性变为可靠前，不可交互程度的严重性。</p><p>TTI 会在主线程至少有五秒钟没有长任务时，认为页面具备”可靠交互性”。也就是说，<br>分布在 10 秒钟里的三个 51 毫秒长的任务与单个 10 秒长的任务对 TTI 的影响是相同的，但对于试图与页面进行交互的用户来说，这两种情况给人的感觉是截然不同的。</p><p>在第一种情况下，三个 51 毫秒的任务的 TBT 为 3 毫秒。而单个 10 秒长的任务的 TBT 为 9950 毫秒。第二种情况下较大的 TBT 值对较差的体验进行了量化。</p><h4 id="如何改进-TBT"><a href="#如何改进-TBT" class="headerlink" title="如何改进 TBT"></a>如何改进 TBT</h4><p><a href="https://web.dev/i18n/zh/tbt/">常见解决方案:</a></p><ul><li>减少第三方代码的影响</li><li>减少 JavaScript 执行时间</li><li>最小化主线程工作</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Largest-Contentful-Paint-最大内容绘制-LCP"><a href="#Largest-Contentful-Paint-最大内容绘制-LCP" class="headerlink" title="Largest Contentful Paint 最大内容绘制(LCP)"></a>Largest Contentful Paint 最大内容绘制(LCP)</h3><p>最大内容绘制 (LCP) 是测量感知加载速度的一个以用户为中心的重要指标，因为该项指标会在页面的主要内容基本加载完成时，<br>在页面加载时间轴中标记出相应的点，迅捷的 LCP 有助于让用户确信页面是有效的。</p><p>长久以来，对于网页开发者来说，测量网页主要内容的加载速度和内容对用户的显示速度一直是一个挑战。</p><p>诸如 load（加载）或 DOMContentLoaded（DOM 内容加载完毕）这样的旧有指标并不是很好，因为这些指标不一定与用户在屏幕上看到的内容相对应。<br>而像 First Contentful Paint 首次内容绘制 (FCP)这类以用户为中心的较新性能指标只会捕获加载体验最开始的部分。<br>如果某个页面显示的是一段启动画面或加载指示，那么这些时刻与用户的关联性并不大。</p><p>我们以往推荐过一些性能指标，例如 First Meaningful Paint 首次有效绘制 (FMP)和 Speed Index 速度指数 (SI) （两个指标都包含在灯塔工具中），<br>这些指标有助于捕获到更多初始绘制后的加载体验，但这些指标十分复杂、难以解释，而且常常出错，也就意味着这些指标仍然无法识别出页面主要内容加载完毕的时间点。</p><p>有时候简胜于繁。根据 W3C Web 性能工作组的讨论以及 Google 进行的研究，我们发现更准确地测量页面主要内容加载完毕的时间点的方法是查看最大元素完成渲染的时间点。</p><h4 id="什么是-LCP"><a href="#什么是-LCP" class="headerlink" title="什么是 LCP"></a>什么是 LCP</h4><p>最大内容绘制 (LCP) 指标会根据页面首次开始加载的时间点来报告可视区域内可见的最大图像或文本块完成渲染的相对时间。</p><p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/elqsdYqQEefWJbUM2qMO.svg" alt="良好的 LCP 值为 2.5 秒，较差的值大于 4.0 秒，两者之间的任何东西都需要改进"></p><h4 id="如何改进-LCP"><a href="#如何改进-LCP" class="headerlink" title="如何改进 LCP"></a>如何改进 LCP</h4><p>LCP 主要受四个因素影响：</p><ul><li>缓慢的服务器响应速度</li><li>JavaScript 和 CSS 渲染阻塞</li><li>资源加载时间</li><li>客户端渲染</li></ul><p><a href="https://web.dev/i18n/zh/lcp/">常见解决方案:</a></p><ul><li>使用 PRPL 模式做到即时加载</li><li>优化关键渲染路径</li><li>优化您的 CSS</li><li>优化您的图像</li><li>优化网页字体</li><li>优化您的 JavaScript（针对客户端渲染的网站）</li></ul><h3 id="Cumulative-Layout-Shift-累积布局偏移-CLS"><a href="#Cumulative-Layout-Shift-累积布局偏移-CLS" class="headerlink" title="Cumulative Layout Shift 累积布局偏移 (CLS)"></a>Cumulative Layout Shift 累积布局偏移 (CLS)</h3><p>重要词汇: 累积布局偏移 (CLS) 是测量视觉稳定性的一个以用户为中心的重要指标，因为该项指标有助于量化用户经历意外布局偏移的频率，较低的 CLS 有助于确保一个页面是令人愉悦的。</p><p>您是否曾经历过在网上阅读一篇文章，结果页面上的某些内容突然发生改变？文本在毫无预警的情况下移位，导致您找不到先前阅读的位置。<br>或者更糟糕的情况：您正要点击一个链接或一个按钮，但在您手指落下的瞬间，诶？链接移位了，结果您点到了别的东西！</p><p>大多数情况下，这些体验只是令人恼火，但在某些情况下，却可能带来真正的破坏。</p><p><img src="https://s4.ax1x.com/2022/01/06/TzmqMV.gif" alt="截屏视频说明了布局不稳定性会对用户产生怎样的负面影响。"></p><p>页面内容的意外移动通常是由于异步加载资源，或者动态添加 DOM 元素到页面现有内容的上方。<br>罪魁祸首可能是未知尺寸的图像或视频、实际渲染后比后备字体更大或更小的字体，或者是动态调整自身大小的第三方广告或小组件。</p><p>让这个问题变得更加棘手的是，网站在开发环境中的运作方式通常与用户在网站上的实际体验大不相同。<br>个性化或第三方内容在开发环境中的表现通常与其在实际情况中的表现不同，测试图像通常已经在开发者的浏览器缓存中了，并且本地调用 API 的速度一般非常快，几乎察觉不到延迟。</p><p>累积布局偏移 (CLS) 指标通过测量真实用户体验中发生偏移的频率来帮助您解决这一问题。</p><h4 id="什么是-CLS"><a href="#什么是-CLS" class="headerlink" title="什么是 CLS"></a>什么是 CLS</h4><p>CLS 测量整个页面生命周期内发生的所有意外布局偏移中最大一连串的布局偏移分数。</p><p>每当一个可见元素的位置从一个已渲染帧变更到下一个已渲染帧时，就发生了布局偏移 。（有关单次布局偏移分数计算方式的详细信息，请参阅下文。）</p><p>一连串的布局偏移，也叫会话窗口，是指一个或多个快速连续发生的单次布局偏移，每次偏移相隔的时间少于 1 秒，且整个窗口的最大持续时长为 5 秒。</p><p>最大的一连串是指窗口内所有布局偏移累计分数最大的会话窗口。</p><p><img src="https://s4.ax1x.com/2022/01/06/TznXlt.gif" alt="会话窗口示例。蓝色竖条代表每个单次布局偏移的分数。"></p><h4 id="如何改进-CLS"><a href="#如何改进-CLS" class="headerlink" title="如何改进 CLS"></a>如何改进 CLS</h4><p><a href="https://web.dev/i18n/zh/cls/">常见解决方案:</a></p><ul><li><strong>始终在您的图像和视频元素上包含尺寸属性，或者通过使用 CSS 长宽比容器之类的方式预留所需的空间。</strong>这种方法可以确保浏览器能够在加载图像期间在文档中分配正确的空间大小。请注意，您还可以使用 unsized-media 功能策略在支持功能策略的浏览器中强制执行此行为。</li><li><strong>除非是对用户交互做出响应，否则切勿在现有内容的上方插入内容。</strong>这样能够确保发生的任何布局偏移都在预期之内。</li><li><strong>首选转换动画，而不是触发布局偏移的属性动画。</strong>动画过渡的目标是提供状态与状态之间的上下文连续性。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://web.dev/">web.dev</a></li><li><a href="https://zhuanlan.zhihu.com/p/91365316">Lighthouse 测试内幕</a></li><li><a href="https://blog.csdn.net/terrychinaz/article/details/113870644">LightHouse 是什么？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s4.ax1x.com/2022/01/05/TXBKnH.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="chrome" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/chrome/"/>
    
    <category term="html" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/chrome/html/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="html" scheme="https://www.gaotianyang.top/tags/html/"/>
    
    <category term="chrome" scheme="https://www.gaotianyang.top/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>http-server使用</title>
    <link href="https://www.gaotianyang.top/archives/2021120964e0b1f7/"/>
    <id>https://www.gaotianyang.top/archives/2021120964e0b1f7/</id>
    <published>2021-12-09T01:33:49.000Z</published>
    <updated>2021-12-09T04:02:45.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2021/12/09/ofeKKK.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很多情况下，需要在本地开启 http 服务器来测试。所以就需要一个简单的省事好用的 http 服务器。<br>以前的时候，都是使用 php 的本地环境，但是，自从学了 nodejs，发现了 http-server 好东西。<br>不用配置直接在当前文件夹内打开 cmd，就能够使用，简单易用，轻松方便。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>http-server</code> 是一个简单的零配置命令行 http 服务器。<br>它对于生产使用来说是足够强大的，但它的测试，本地开发和学习足够简单易用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装通过 npm 进行全局安装</p><p><code>npm install http-server -g</code></p><p>这将 <code>http-server</code> 全局安装，以便它可以从命令行运行。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开 cmd，移动进入当前文件夹，在当前文件夹内输入命令即可</p><p><code>http-server [path] [options]</code></p><p><code>[path]</code>默认为<code>./public</code> (若文件夹存在)，否则为<code>./</code>。</p><p>现在，您可以访问 <code>http://localhost:8080</code> 来查看您的服务器</p><h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><table><thead><tr><th>命令</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-p</code> 或 <code>--port</code></td><td>要使用的端口</td><td>8080</td></tr><tr><td><code>-a</code></td><td>要使用的地址</td><td>0.0.0.0</td></tr><tr><td><code>-d</code></td><td>显示目录列表</td><td><code>true</code></td></tr><tr><td><code>-i</code></td><td>显示自动索引</td><td><code>true</code></td></tr><tr><td><code>-g</code> 或<code>--gzip</code></td><td>启用时，它将用于<code>./public/some-file.js.gz</code> 代替<code>./public/some-file.js</code>zip 压缩版本的文件，并且该请求接受 gzip 编码。如果 brotli 也被启用，它会首先尝试服务 brotli。</td><td><code>false</code></td></tr><tr><td><code>-b</code> 或<code>--brotli</code></td><td>启用时，它将用于<code>./public/some-file.js.br</code> 代替<code>./public/some-file.js</code>zip 压缩版本的文件，并且该请求接受 br 编码。如果 gzip 也被启用，它会首先尝试服务 brotli。</td><td><code>false</code></td></tr><tr><td><code>-e</code> 或<code>--ext</code></td><td>默认文件扩展名（如果没有提供）（默认为’html’）</td><td><code>html</code></td></tr><tr><td><code>-s</code> 或<code>--silent</code></td><td>从输出中抑制日志消息</td><td></td></tr><tr><td><code>--cors</code></td><td>通过 <code>Access-Control-Allow-Origin</code> 标题启用 CORS</td><td></td></tr><tr><td><code>-o</code> [path]</td><td>启动服务器后打开浏览器窗口 例如：<code>-o /other/dir/</code></td><td></td></tr><tr><td><code>-c</code></td><td>设置缓存控制 max-age 头的缓存时间（以秒为单位），例如-c10 10 秒。要禁用缓存，请使用-c-1。</td><td><code>3600</code></td></tr><tr><td><code>-U</code> 或<code>--utc</code></td><td>在日志消息中使用 UTC 时间格式。</td><td></td></tr><tr><td><code>--log-ip</code></td><td>启用客户端 IP 地址的日志记录</td><td><code>false</code></td></tr><tr><td><code>-P</code> 或<code>--proxy</code></td><td>将所有无法在本地解析到给定 url 的请求代理。例如：<code>-P http://someurl.com</code></td><td></td></tr><tr><td><code>--proxy-options</code></td><td>使用嵌套的虚线对象传递代理选项。例如：<code>--proxy-options.secure false</code></td><td></td></tr><tr><td><code>--username</code></td><td>用于基本身份验证的用户名</td><td></td></tr><tr><td><code>--password</code></td><td>基本认证密码</td><td></td></tr><tr><td><code>-S</code> 或<code>--ssl</code></td><td>启用 https。</td><td><code>false</code></td></tr><tr><td><code>-C</code> 或<code>--certssl</code></td><td>证书文件的路径</td><td><code>cert.pem</code></td></tr><tr><td><code>-K</code> 或<code>--keyssl</code></td><td>密钥文件的路径</td><td><code>key.pem</code></td></tr><tr><td><code>-r</code> 或<code>--robots</code></td><td>提供一个/robots.txt（其内容默认为’User-agent：* \ nDisallow：/‘）</td><td><code>false</code></td></tr><tr><td><code>--no-dotfiles</code></td><td>不显示点文件</td><td></td></tr><tr><td><code>--mimetypes</code></td><td>自定义 mimetype 定义的 .types 文件的路径</td><td></td></tr><tr><td><code>-h</code> 或<code>--help</code></td><td>打印此列表并退出。</td><td></td></tr><tr><td><code>-v</code> 或<code>--version</code></td><td>打印版本并退出。</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_30100043/article/details/73105362">使用 http-server 零配置在本地开启 http 服务器</a></li><li><a href="https://www.npmjs.com/package/http-server">npm http-server</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2021/12/09/ofeKKK.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nodejs" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nodejs/"/>
    
    <category term="http服务器" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nodejs/http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nodejs" scheme="https://www.gaotianyang.top/tags/nodejs/"/>
    
    <category term="http服务器" scheme="https://www.gaotianyang.top/tags/http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>颐和园</title>
    <link href="https://www.gaotianyang.top/archives/20211204a807dcde/"/>
    <id>https://www.gaotianyang.top/archives/20211204a807dcde/</id>
    <published>2021-12-04T12:26:31.000Z</published>
    <updated>2023-12-11T13:07:00.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/12/04/piyoch4.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>携夫人和老付、志伟、二吉，来颐和园拍属于我们的《冬日恋歌》。</p></blockquote><p><img src="https://z1.ax1x.com/2023/12/01/pirHX3d.jpg" alt="颐和园"><br><img src="https://z1.ax1x.com/2023/12/01/pirHO9H.jpg" alt="空镜"><br><img src="https://z1.ax1x.com/2023/12/01/pirHq4e.jpg" alt="&gt;-&lt;"><br><img src="https://z1.ax1x.com/2023/12/01/pirbNb6.jpg" alt="落叶黄了"><br><img src="https://z1.ax1x.com/2023/12/01/pirbw5D.jpg" alt="美美哒~"><br><img src="https://z1.ax1x.com/2023/12/01/pisK74K.jpg" alt="靓照"><br><img src="https://z1.ax1x.com/2023/12/01/pisKb9O.jpg" alt="你在我眼中是star"><br><img src="https://z1.ax1x.com/2023/12/01/pisKq3D.jpg" alt="秋天适合见面"><br><img src="https://z1.ax1x.com/2023/12/04/piyy2p8.jpg" alt="和小美女贴贴"><br><img src="https://z1.ax1x.com/2023/12/01/pisKjud.jpg" alt="心仪女孩常驻身边"><br><img src="https://z1.ax1x.com/2023/12/01/pisKOjH.jpg" alt="小手一牵我俩甜甜"><br><img src="https://z1.ax1x.com/2023/12/04/piy6GuQ.jpg" alt="你是我的银河"><br><img src="https://z1.ax1x.com/2023/12/04/piy6fC6.jpg" alt="分享喜欢"><br><img src="https://z1.ax1x.com/2023/12/04/piy6L5t.jpg" alt="牛气冲天"><br><img src="https://z1.ax1x.com/2023/12/04/piy6xxS.jpg" alt="动感光波"><br><img src="https://z1.ax1x.com/2023/12/04/piycprQ.jpg" alt="她看他"><br><img src="https://z1.ax1x.com/2023/12/04/piycZxU.jpg" alt="拥你入怀"><br><img src="https://z1.ax1x.com/2023/12/04/piycuqJ.jpg" alt="开心就要咔呲咔呲"><br><img src="https://z1.ax1x.com/2023/12/04/piyoR39.jpg" alt="❤️"><br><img src="https://z1.ax1x.com/2023/12/04/piyoq9H.jpg" alt="树的光影"><br><img src="https://z1.ax1x.com/2023/12/04/piyoch4.jpg" alt="水天一线"><br><img src="https://z1.ax1x.com/2023/12/04/piyovut.jpg" alt="金光洒落湖面"><br><img src="https://z1.ax1x.com/2023/12/04/piyTF3j.jpg" alt="她在发光"><br><img src="https://z1.ax1x.com/2023/12/04/piyTVuq.jpg" alt="慈福"><br><img src="https://z1.ax1x.com/2023/12/04/piyTJDx.jpg" alt="红墙黄瓦"><br><img src="https://z1.ax1x.com/2023/12/04/piyTyrt.jpg" alt="古树参天"><br><img src="https://z1.ax1x.com/2023/12/11/piWZ790.jpg" alt="披萨"><br><img src="https://z1.ax1x.com/2023/12/11/piWZqjU.jpg" alt="树莓果酱鸡翅"><br><img src="https://z1.ax1x.com/2023/12/11/piWZXB4.jpg" alt="甜辣酱鸡翅"><br><img src="https://z1.ax1x.com/2023/12/11/piWZjHJ.jpg" alt="奶酪沙拉"><br><img src="https://z1.ax1x.com/2023/12/11/piWZxE9.jpg" alt="薯条"><br><img src="https://z1.ax1x.com/2023/12/11/piWZzNR.jpg" alt="站点披萨"><br><img src="https://z1.ax1x.com/2023/12/11/piWeC36.jpg" alt="丰盛的一餐"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/12/04/piyoch4.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="颐和园" scheme="https://www.gaotianyang.top/tags/%E9%A2%90%E5%92%8C%E5%9B%AD/"/>
    
    <category term="站点披萨" scheme="https://www.gaotianyang.top/tags/%E7%AB%99%E7%82%B9%E6%8A%AB%E8%90%A8/"/>
    
  </entry>
  
  <entry>
    <title>整数反转</title>
    <link href="https://www.gaotianyang.top/archives/20211121e3e2e8e/"/>
    <id>https://www.gaotianyang.top/archives/20211121e3e2e8e/</id>
    <published>2021-11-21T02:01:29.000Z</published>
    <updated>2021-11-25T02:09:24.137Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/11/25/oF0jxI.jpg" alt="首屏图"></p><a id="more"></a><h2 id="LeetCode-题目总结-整数反转"><a href="#LeetCode-题目总结-整数反转" class="headerlink" title="LeetCode 题目总结 - 整数反转"></a>LeetCode 题目总结 - 整数反转</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围  [−2<sup>31</sup>,  2<sup>31</sup> − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><blockquote><p>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</p></blockquote><h4 id="解法一-数组翻转法"><a href="#解法一-数组翻转法" class="headerlink" title="解法一: 数组翻转法"></a>解法一: 数组翻转法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊值处理</span></span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">2147483647</span> || x &lt; <span class="number">-2147483648</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数值</span></span><br><span class="line">  <span class="keyword">let</span> flag = x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">let</span> str = x &gt; <span class="number">0</span> ? x.toString() : (-x).toString();</span><br><span class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 转化</span></span><br><span class="line">  num = arr.reverse().join(<span class="string">&#x27;&#x27;</span>) * flag;</span><br><span class="line">  <span class="comment">// 校验转化值大小</span></span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">2147483647</span> || num &lt; <span class="number">-2147483648</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解法二-模运算转换法"><a href="#解法二-模运算转换法" class="headerlink" title="解法二: 模运算转换法"></a>解法二: 模运算转换法</h4><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>首先我们想一下，怎么去反转一个整数？<br>用栈？或者把整数变成字符串，再去反转这个字符串？<br>这两种方式是可以，但并不好。实际上我们只要能拿到这个整数的 <strong>末尾数字</strong> 就可以了。</p><p>以 <code>12345</code> 为例，先拿到 <code>5</code>，再拿到 <code>4</code>，之后是 <code>3</code>，<code>2</code>，<code>1</code>，<br>我们按这样的顺序就可以反向拼接处一个数字了，也就能达到 <strong>反转</strong> 的效果。<br>怎么拿末尾数字呢？好办，用取模运算就可以了</p><p><img src="https://z3.ax1x.com/2021/11/24/oP0Bgx.jpg" alt="1"></p><ol><li>将 <code>12345 % 10</code> 得到 5，之后将 <code>12345 / 10</code></li><li>将 <code>1234 % 10</code> 得到 4，再将 <code>1234 / 10</code></li><li>将 <code>123 % 10</code> 得到 3，再将 <code>123 / 10</code></li><li>将 <code>12 % 10</code> 得到 2，再将 <code>12 / 10</code></li><li>将 <code>1 % 10</code> 得到 1，再将 <code>1 / 10</code></li></ol><p>这么看起来，一个循环就搞定了，循环的判断条件是 x&gt;0<br>但这样不对，因为忽略了 <strong>负数</strong></p><p>循环的判断条件应该是 <code>while(x!=0)</code>，无论正数还是负数，按照上面不断的<code>/10</code> 这样的操作，最后都会变成 0，所以判断终止条件就是<code>!=0</code><br>有了取模和除法操作，对于像 <code>12300</code> 这样的数字，也可以完美的解决掉了。</p><p>看起来这道题就这么解决了，但请注意，题目上还有这么一句</p><blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为  [−2<sup>31</sup>, 2<sup>31</sup> − 1]。</p></blockquote><p>也就是说我们不能用 <code>long</code> 存储最终结果，而且有些数字可能是合法范围内的数字，但是<strong>反转</strong>过来就超过范围了。<br>假设有 <code>1147483649</code> 这个数字，它是小于最大的 32 位整数 <code>2147483647</code> 的，但是将这个数字反转过来后就变成了 <code>9463847411</code>，这就比最大的 32 位整数还要大了，这样的数字是没法存到 <code>int</code> 里面的，所以肯定要返回 <code>0</code>(溢出了)。</p><p>复杂度分析</p><ul><li>时间复杂度 O(log∣x∣)。翻转的次数即 xx 十进制的位数。</li><li>空间复杂度 O(1)</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 每次取末尾数字</span></span><br><span class="line">    <span class="keyword">const</span> digit = x % <span class="number">10</span>;</span><br><span class="line">    x = ~~(x / <span class="number">10</span>);</span><br><span class="line">    rev = rev * <span class="number">10</span> + digit;</span><br><span class="line">    <span class="comment">// 判断是否 大于 最大32位整数或 小于 最小32位整数</span></span><br><span class="line">    <span class="keyword">if</span> (rev &lt; <span class="built_in">Math</span>.pow(<span class="number">-2</span>, <span class="number">31</span>) || rev &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></li><li><a href="https://segmentfault.com/a/1190000003731938">JS 按位非运算符(<code>~</code>)及双非(<code>~~</code>)的使用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/11/25/oF0jxI.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/LeetCode/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/tags/LeetCode/"/>
    
    <category term="每日一练" scheme="https://www.gaotianyang.top/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
    <category term="简单" scheme="https://www.gaotianyang.top/tags/%E7%AE%80%E5%8D%95/"/>
    
    <category term="整数反转" scheme="https://www.gaotianyang.top/tags/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>Z字形变换</title>
    <link href="https://www.gaotianyang.top/archives/20211101e3e2e8e/"/>
    <id>https://www.gaotianyang.top/archives/20211101e3e2e8e/</id>
    <published>2021-11-01T11:59:46.000Z</published>
    <updated>2021-11-25T02:11:19.141Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/11/02/IikjQ1.jpg" alt="首屏图"></p><a id="more"></a><h2 id="LeetCode-题目总结-Z-字形变换"><a href="#LeetCode-题目总结-Z-字形变换" class="headerlink" title="LeetCode 题目总结 - Z 字形变换"></a>LeetCode 题目总结 - Z 字形变换</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行  Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code>  行数为 <code>3</code> 时，排列如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释：</span><br><span class="line">P     I     N</span><br><span class="line">A   L S   I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;A&quot;, numRows = 1</span><br><span class="line">输出：&quot;A&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由英文字母（小写和大写）、<code>&#39;,&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li><li><code>1 &lt;= numRows &lt;= 1000</code></li></ul><h4 id="解法一-公式枚举法"><a href="#解法一-公式枚举法" class="headerlink" title="解法一: 公式枚举法"></a>解法一: 公式枚举法</h4><ul><li>时间复杂度 O(n<sup>3</sup>)</li><li>空间复杂度 O(1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取%的值</span></span><br><span class="line">    <span class="keyword">let</span> m = i % (<span class="number">2</span> * numRows - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; numRows) &#123;</span><br><span class="line">      arr[m].push(s.charAt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[<span class="number">2</span> * (numRows - <span class="number">1</span>) - m].push(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">      str += arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回新数据</span></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取%的值</span></span><br><span class="line">    <span class="keyword">let</span> m = i % (<span class="number">2</span> * numRows - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; numRows) &#123;</span><br><span class="line">      arr[m].push(s.charAt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[<span class="number">2</span> * (numRows - <span class="number">1</span>) - m].push(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二维数组转一维</span></span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  newArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  str = newArr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 返回新数据</span></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解法二-标识法"><a href="#解法二-标识法" class="headerlink" title="解法二: 标识法"></a>解法二: 标识法</h4><ul><li><p>题目理解</p><ul><li>字符串 <code>s</code> 是以 Z 字形为顺序存储的字符串，目标是按行打印。</li><li>设 <code>numRows</code> 行字符串分别为 S1,S2,…,Sn，则容易发现：按顺序遍历字符串 <code>s</code> 时，每个字符 <code>c</code> 在 Z 字形中对应的 <strong>行索引</strong> 先从 S1 增大至 Sn，再从 Sn 减小至 S1 …… 如此反复。</li><li>因此，解决方案为：模拟这个行索引的变化，在遍历 <code>s</code> 中把每个字符填到正确的行 <code>res[i]</code> 。</li></ul></li><li><p>算法流程 按顺序遍历字符串 <code>s</code>；</p><ul><li><code>res[i] += c</code>： 把每个字符 <code>c</code> 填入对应行 Si；</li><li><code>i += flag</code>： 更新当前字符 <code>c</code> 对应的行索引；</li><li><code>flag = - flag</code>： 在达到 Z 字形转折点时，执行反向。</li></ul></li><li><p>复杂度分析：</p><ul><li>时间复杂度 O(N)O(N) ：遍历一遍字符串 <code>s</code>；</li><li>空间复杂度 O(N)O(N) ：各行字符串共占用 O(N)O(N) 额外空间。</li></ul></li></ul><p><img src="https://z3.ax1x.com/2021/11/15/Ig46G6.gif" alt="z形变换"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    arr[index].push(s.charAt(i));</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span> || index === numRows - <span class="number">1</span>) flag = -flag;</span><br><span class="line">    index += flag;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二维数组转一维</span></span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  newArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  str = newArr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/zigzag-conversion/">Z 字形变换</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/11/02/IikjQ1.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/LeetCode/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/tags/LeetCode/"/>
    
    <category term="Z字形变换" scheme="https://www.gaotianyang.top/tags/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
    
    <category term="中等" scheme="https://www.gaotianyang.top/tags/%E4%B8%AD%E7%AD%89/"/>
    
    <category term="每日一练" scheme="https://www.gaotianyang.top/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>常用轮子汇总</title>
    <link href="https://www.gaotianyang.top/archives/20211025c746f65b/"/>
    <id>https://www.gaotianyang.top/archives/20211025c746f65b/</id>
    <published>2021-10-25T10:28:19.000Z</published>
    <updated>2021-10-26T04:08:41.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/10/26/55cbE8.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中，一直听到有人讨论是不是需要重复造轮子，我觉得有能力的人，轮子得造。<br>但是往往开发周期短，轮子的使用节省的时间可以更好的去理解业务，使用到业务中,<br>也能发现轮子的利弊，发现了问题可以造更好的轮子。<br>这是我开发中常用到的轮子。也欢迎大家把开发中用到的非常好的轮子在评论区评论。</p><h2 id="UI-组件库"><a href="#UI-组件库" class="headerlink" title="UI 组件库"></a>UI 组件库</h2><ul><li><a href="https://element.eleme.cn/#/zh-CN">element</a></li><li><a href="https://youzan.github.io/vant/#/zh-CN/">vant</a></li><li><a href="https://www.iviewui.com/">View UI</a></li><li><a href="https://ant.design/index-cn">ant design</a></li><li><a href="https://vux.li/#/">VUX</a></li></ul><p>没用过</p><ul><li><a href="https://www.naiveui.com/zh-CN/light">Naive UI</a></li><li><a href="https://mint-ui.github.io/#!/zh-cn">Mint UI</a></li><li><a href="http://getskeleton.com/">getskeleton</a></li></ul><h2 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h2><ul><li><a href="https://animate.style/">Animate.css</a></li></ul><h2 id="滚动插件"><a href="#滚动插件" class="headerlink" title="滚动插件"></a>滚动插件</h2><ul><li><a href="http://www.mescroll.com/api.html">mescroll.js</a></li></ul><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><ul><li><a href="https://www.swiper.com.cn/">swiper</a></li></ul><h2 id="满屏滚动"><a href="#满屏滚动" class="headerlink" title="满屏滚动"></a>满屏滚动</h2><ul><li><a href="https://github.com/alvarotrigo/fullPage.js">fullPage.js</a></li></ul><h2 id="函数库"><a href="#函数库" class="headerlink" title="函数库"></a>函数库</h2><ul><li><a href="https://www.lodashjs.com/">lodash.js</a></li><li><a href="https://dayjs.fenxianglu.cn/">day.js</a></li><li><a href="http://momentjs.cn/">momentjs</a></li><li><a href="https://github.com/hustcc/timeago.js">timeago.js</a></li></ul><h2 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h2><ul><li><a href="https://github.com/ckpack/vue-color">vue-color</a></li></ul><h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><ul><li><a href="https://www.itxst.com/vue-draggable/tutorial.html">vue-draggable</a></li></ul><p>react</p><ul><li><a href="https://www.npmjs.com/package/react-moveable">react-moveable</a></li></ul><h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><ul><li><a href="https://www.npmjs.com/package/qrcodejs2">qrcodejs2</a></li><li><a href="https://www.npmjs.com/package/vue-qr">vue-qr</a></li></ul><h2 id="图片剪裁"><a href="#图片剪裁" class="headerlink" title="图片剪裁"></a>图片剪裁</h2><ul><li><a href="https://github.com/xyxiao001/vue-cropper">vue-cropper</a></li></ul><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><ul><li><a href="https://www.npmjs.com/package/vue-lazyload">vue-lazyload</a></li></ul><h2 id="PDF-预览"><a href="#PDF-预览" class="headerlink" title="PDF 预览"></a>PDF 预览</h2><ul><li><a href="https://www.npmjs.com/package/vue-pdf">vue-pdf</a></li></ul><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><ul><li><a href="https://github.com/zenorocha/clipboard.js">clipboard.js</a></li></ul><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><ul><li><a href="https://www.npmjs.com/package/vue-easy-print">vue-easy-print</a></li></ul><h2 id="html-转为图片"><a href="#html-转为图片" class="headerlink" title="html 转为图片"></a>html 转为图片</h2><ul><li><a href="https://html2canvas.hertzen.com/">html2canvas</a></li><li><a href="http://nicethemes.cn/news/txtlist_i31456v.html">domToImage</a></li></ul><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><ul><li><a href="https://echarts.apache.org/zh/index.html">echarts</a></li><li><a href="https://www.highcharts.com.cn/">highcharts</a></li><li><a href="https://v-charts.js.org/#/">v-charts.js</a></li><li><a href="https://d3js.org/">v-charts.js</a></li></ul><p>可视化拖拽库</p><ul><li><a href="http://logic-flow.org/">logicflow</a></li></ul><p>可视化分析图论库</p><ul><li><a href="https://js.cytoscape.org/">Cytoscape.js</a></li></ul><p>react</p><ul><li><a href="https://antv.gitee.io/zh/">antv</a></li></ul><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><ul><li><a href="https://dafrok.github.io/vue-baidu-map/#/zh/index">vue-baidu-map</a></li></ul><h2 id="v-html-安全替代"><a href="#v-html-安全替代" class="headerlink" title="v-html 安全替代"></a>v-html 安全替代</h2><ul><li><a href="https://www.npmjs.com/package/vue-dompurify-html">vue-dompurify-html</a></li></ul><h2 id="视频弹幕播放器"><a href="#视频弹幕播放器" class="headerlink" title="视频弹幕播放器"></a>视频弹幕播放器</h2><ul><li><a href="https://github.com/chenjianfang/scroxt">scroxt.js</a></li></ul><h2 id="手写签名插件"><a href="#手写签名插件" class="headerlink" title="手写签名插件"></a>手写签名插件</h2><ul><li><a href="https://github.com/neighborhood999/vue-signature-pad">vue-signature-pad</a></li></ul><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li><a href="https://github.com/i18next/i18next">i18next</a></li><li><a href="https://github.com/kazupon/vue-i18n">vue-i18n</a></li></ul><h2 id="移动端滚动选择器"><a href="#移动端滚动选择器" class="headerlink" title="移动端滚动选择器"></a>移动端滚动选择器</h2><ul><li><a href="https://github.com/majunchang/picker-extend">picker-extend.js</a></li><li><a href="https://ustbhuangyi.github.io/better-scroll/#/examples/picker">BetterScroll</a></li></ul><h2 id="城市选择器"><a href="#城市选择器" class="headerlink" title="城市选择器"></a>城市选择器</h2><ul><li><a href="https://github.com/xinxingyu/vue-city">vue-city</a></li></ul><h2 id="上传组件"><a href="#上传组件" class="headerlink" title="上传组件"></a>上传组件</h2><ul><li><a href="https://github.com/saivarunk/vue-simple-upload">vue-simple-upload</a></li></ul><h2 id="表单检验"><a href="#表单检验" class="headerlink" title="表单检验"></a>表单检验</h2><ul><li><a href="https://github.com/validatorjs/validator.js">validator.js</a></li></ul><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><ul><li><a href="https://www.wangeditor.com/">wangeditor</a></li></ul><h2 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h2><ul><li><a href="https://pandao.github.io/editor.md/">Markdown</a></li></ul><h2 id="Web-代码编辑器"><a href="#Web-代码编辑器" class="headerlink" title="Web 代码编辑器"></a>Web 代码编辑器</h2><ul><li><a href="https://github.com/ajaxorg/ace">ACE Editor</a></li></ul><h2 id="抽奖插件"><a href="#抽奖插件" class="headerlink" title="抽奖插件"></a>抽奖插件</h2><ul><li><a href="https://100px.net/">lucky-canvas</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7012012633180078117?utm_source=gold_browser_extension">我在项目用到这十多种轮子助我提升开发效率，收藏</a></li><li><a href="https://juejin.cn/post/6844904009401106445">前端常用工具和轮子汇总</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/10/26/55cbE8.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工具" scheme="https://www.gaotianyang.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>[转]你会用ES6那倒是用啊</title>
    <link href="https://www.gaotianyang.top/archives/202110203379300f/"/>
    <id>https://www.gaotianyang.top/archives/202110203379300f/</id>
    <published>2021-10-20T10:05:59.000Z</published>
    <updated>2021-10-20T04:26:51.513Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/10/20/5BZINn.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在刷掘金过程中，发现一篇关于 ES6 的宝藏文，确实有我日常工作中值得借鉴的一些点，记录下来。</p><p><img src="https://z3.ax1x.com/2021/10/20/5040oV.png" alt="我只是个分割线"></p><p>不是标题党，这是一位 leader 在一次代码评审会对小组成员发出的“怒吼”，原因是在代码评审中发现很多地方还是采用 ES5 的写法，<br>也不是说用 ES5 写法不行，会有 BUG，只是造成代码量增多，可读性变差而已。</p><p>恰好，这位 leader 有代码洁癖，面对 3~5 年经验的成员，还写这种水平的代码，极为不满，不断对代码进行吐槽。<br>不过对于他的吐槽，我感觉还是有很大收获的，故就把 leader 的吐槽记录下来，分享给掘友们，觉得有收获点个赞，有错误的或者更好的写法，非常欢迎在评论中留言。</p><blockquote><p><strong>ps：ES5 之后的 JS 语法统称 ES6！！！</strong></p></blockquote><h2 id="一、关于取值的吐槽"><a href="#一、关于取值的吐槽" class="headerlink" title="一、关于取值的吐槽"></a>一、关于取值的吐槽</h2><p>取值在程序中非常常见，比如从对象<code>obj</code>中取值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">  d: <span class="number">4</span>,</span><br><span class="line">  e: <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = obj.a;</span><br><span class="line"><span class="keyword">const</span> b = obj.b;</span><br><span class="line"><span class="keyword">const</span> c = obj.c;</span><br><span class="line"><span class="keyword">const</span> d = obj.d;</span><br><span class="line"><span class="keyword">const</span> e = obj.e;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = obj.a + obj.d;</span><br><span class="line"><span class="keyword">const</span> g = obj.c + obj.e;</span><br></pre></td></tr></table></figure><p>吐槽：“不会用 ES6 的解构赋值来取值吗？5 行代码用 1 行代码搞定不香吗？直接用对象名加属性名去取值，要是对象名短还好，很长呢？搞得代码中到处都是这个对象名。”</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, c, d, e &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> f = a + d;</span><br><span class="line"><span class="keyword">const</span> g = c + e;</span><br></pre></td></tr></table></figure><blockquote><p>反驳：</p></blockquote><p>不是不用 ES6 的解构赋值，而是服务端返回的数据对象中的属性名不是我想要的，这样取值，不是还得重新创建个遍历赋值。</p><blockquote><p>吐槽：</p></blockquote><p>看来你对 ES6 的解构赋值掌握的还是不够彻底。如果想创建的变量名和对象的属性名不一致，可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: a1 &#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(a1); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：</p></blockquote><p>ES6 的解构赋值虽然好用。但是要注意解构的对象不能为 <code>undefined</code>、<code>null</code>。否则会报错，故要给被解构的对象一个默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, c, d, e &#125; = obj || &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、关于合并数据的吐槽"><a href="#二、关于合并数据的吐槽" class="headerlink" title="二、关于合并数据的吐槽"></a>二、关于合并数据的吐槽</h2><p>比如合并两个数组，合并两个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = a.concat(b); <span class="comment">//[1,2,3,1,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  b: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1, obj2); <span class="comment">//&#123;a:1,b:1&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 的扩展运算符是不是忘记了，还有数组的合并不考虑去重吗？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = [...new <span class="built_in">Set</span>([...a, ...b])]; <span class="comment">//[1,2,3,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  b: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; ...obj1, ...obj2 &#125;; <span class="comment">//&#123;a:1,b:1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、关于拼接字符串的吐槽"><a href="#三、关于拼接字符串的吐槽" class="headerlink" title="三、关于拼接字符串的吐槽"></a>三、关于拼接字符串的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">60</span>) &#123;</span><br><span class="line">  result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的考试成绩及格`</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的考试成绩不及格`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>像你们这样用 ES6 字符串模板，还不如不用，你们根本不清楚在${}中可以做什么操作。在${}中可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;name&#125;</span><span class="subst">$&#123;score &gt; <span class="number">60</span> ? <span class="string">&#x27;的考试成绩及格&#x27;</span> : <span class="string">&#x27;的考试成绩不及格&#x27;</span>&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h2 id="四、关于-if-中判断条件的吐槽"><a href="#四、关于-if-中判断条件的吐槽" class="headerlink" title="四、关于 if 中判断条件的吐槽"></a>四、关于 if 中判断条件的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    type == <span class="number">1</span> ||</span><br><span class="line">    type == <span class="number">2</span> ||</span><br><span class="line">    type == <span class="number">3</span> ||</span><br><span class="line">    type == <span class="number">4</span> ||</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中数组实例方法 includes 会不会使用呢？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> condition = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition.includes(type)) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、关于列表搜索的吐槽"><a href="#五、关于列表搜索的吐槽" class="headerlink" title="五、关于列表搜索的吐槽"></a>五、关于列表搜索的吐槽</h2><p>在项目中，一些没分页的列表的搜索功能由前端来实现，搜索一般分为精确搜索和模糊搜索。搜索也要叫过滤，一般用 filter 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>如果是精确搜索不会用 ES6 中的 find 吗？性能优化懂么，find 方法中找到符合条件的项，就不会继续遍历数组。</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="六、关于扁平化数组的吐槽"><a href="#六、关于扁平化数组的吐槽" class="headerlink" title="六、关于扁平化数组的吐槽"></a>六、关于扁平化数组的吐槽</h2><p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line">  采购部: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  人事部: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">  行政部: [<span class="number">5</span>, <span class="number">14</span>, <span class="number">79</span>],</span><br><span class="line">  运输部: [<span class="number">3</span>, <span class="number">64</span>, <span class="number">105</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> member = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> deps) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = deps[item];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    member = [...member, ...value];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">member = [...new <span class="built_in">Set</span>(member)];</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>获取对象的全部属性值还要遍历吗？Object.values 忘记了吗？还有涉及到数组的扁平化处理，为啥不用 ES6 提供的 flat 方法呢，<br>还好这次的数组的深度最多只到 2 维，还要是遇到 4 维、5 维深度的数组，是不是得循环嵌套循环来扁平化？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line">  采购部: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  人事部: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">  行政部: [<span class="number">5</span>, <span class="number">14</span>, <span class="number">79</span>],</span><br><span class="line">  运输部: [<span class="number">3</span>, <span class="number">64</span>, <span class="number">105</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> member = <span class="built_in">Object</span>.values(deps).flat(<span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure><p>其中使用 Infinity 作为 flat 的参数，使得无需知道被扁平化的数组的维度。</p><blockquote><p>补充：</p></blockquote><p>flat 方法不支持 IE 浏览器。</p><h2 id="七、关于获取对象属性值的吐槽"><a href="#七、关于获取对象属性值的吐槽" class="headerlink" title="七、关于获取对象属性值的吐槽"></a>七、关于获取对象属性值的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = obj &amp;&amp; obj.name;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中的可选链操作符会使用么？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = obj?.name;</span><br></pre></td></tr></table></figure><h2 id="八、关于添加对象属性的吐槽"><a href="#八、关于添加对象属性的吐槽" class="headerlink" title="八、关于添加对象属性的吐槽"></a>八、关于添加对象属性的吐槽</h2><p>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>;</span><br><span class="line">obj[key] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>为何要额外创建一个变量。不知道 ES6 中的对象属性名是可以用表达式吗？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">obj[<span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="九、关于输入框非空的判断"><a href="#九、关于输入框非空的判断" class="headerlink" title="九、关于输入框非空的判断"></a>九、关于输入框非空的判断</h2><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中新出的空值合并运算符了解过吗，要写那么多条件吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value ?? <span class="string">&#x27;&#x27;</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、关于异步函数的吐槽"><a href="#十、关于异步函数的吐槽" class="headerlink" title="十、关于异步函数的吐槽"></a>十、关于异步函数的吐槽</h2><p>异步函数很常见，经常是用 Promise 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fn1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1); <span class="comment">// 1</span></span><br><span class="line">    fn2().then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res2);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>如果这样调用异步函数，不怕形成地狱回调啊！</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="built_in">console</span>.log(res1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(res2); <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>补充：</p></blockquote><p>但是要做并发请求时，还是要用到 <code>Promise.all()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.all([fn1(), fn2()]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// [1,2]</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果并发请求时，只要其中一个异步函数处理完成，就返回结果，要用到 <code>Promise.race()</code>。</p><h2 id="十一、后续"><a href="#十一、后续" class="headerlink" title="十一、后续"></a>十一、后续</h2><p>欢迎来对以上十点 leader 的吐槽进行反驳，你的反驳如果有道理的，下次代码评审会上，我替你反驳。</p><p>此外以上的整理内容有误的地方，欢迎在评论中指正，万分感谢。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7016520448204603423?utm_source=gold_browser_extension">你会用 ES6，那倒是用啊！</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/10/20/5BZINn.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ES6" scheme="https://www.gaotianyang.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>国家植物园</title>
    <link href="https://www.gaotianyang.top/archives/20211017ce3bfd65/"/>
    <id>https://www.gaotianyang.top/archives/20211017ce3bfd65/</id>
    <published>2021-10-17T11:48:41.000Z</published>
    <updated>2023-12-11T12:25:15.995Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/11/29/pirpQu4.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>与岚泊前往国家植物园赏秋。这里的一草一木，青山绿水，似乎都在向我们诉说着岁月静静的流淌。</p></blockquote><p><img src="https://z1.ax1x.com/2023/11/29/pirpn3T.jpg" alt="植物园我们来了"><br><img src="https://z1.ax1x.com/2023/11/29/pirpugU.jpg" alt="偶遇大橘"><br><img src="https://z1.ax1x.com/2023/11/29/pirpQu4.jpg" alt="粼粼波光"><br><img src="https://z1.ax1x.com/2023/11/29/pirplDJ.jpg" alt="光晕"><br><img src="https://z1.ax1x.com/2023/11/29/pirpGU1.jpg" alt="秋正浓"><br><img src="https://z1.ax1x.com/2023/11/29/pirpJ4x.jpg" alt="水草"><br><img src="https://z1.ax1x.com/2023/11/29/pirp4bj.jpg" alt="银杏黄了"><br><img src="https://z1.ax1x.com/2023/11/29/pirpIVs.jpg" alt="智光重朗"><br><img src="https://z1.ax1x.com/2023/11/30/pirAaFJ.jpg" alt="中国蜜蜂博物馆"><br><img src="https://z1.ax1x.com/2023/11/30/pirAwWR.jpg" alt="山涧小溪"><br><img src="https://z1.ax1x.com/2023/11/30/pirAdY9.jpg" alt="红叶"><br><img src="https://z1.ax1x.com/2023/11/30/pirA7m8.jpg" alt="森林木"><br><img src="https://z1.ax1x.com/2023/11/30/piryHk6.jpg" alt="参天古树"><br><img src="https://z1.ax1x.com/2023/11/30/pirAbTg.jpg" alt="静"><br><img src="https://z1.ax1x.com/2023/11/30/pir6p7t.jpg" alt="竹林曲径通幽"><br><img src="https://z1.ax1x.com/2023/12/01/pir7jmV.jpg" alt="红墙"><br><img src="https://z1.ax1x.com/2023/11/30/piryznA.jpg" alt="落日余晖"><br><img src="https://z1.ax1x.com/2023/11/30/pir6S0I.jpg" alt="正阳门"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/11/29/pirpQu4.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="国家植物园" scheme="https://www.gaotianyang.top/tags/%E5%9B%BD%E5%AE%B6%E6%A4%8D%E7%89%A9%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>静之湖团建</title>
    <link href="https://www.gaotianyang.top/archives/20210717957705b8/"/>
    <id>https://www.gaotianyang.top/archives/20210717957705b8/</id>
    <published>2021-07-17T07:03:33.000Z</published>
    <updated>2023-12-04T07:16:22.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/10/28/5LwvLR.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>两天一夜的静之湖团建之旅。</p></blockquote><p><img src="https://z3.ax1x.com/2021/10/28/5LwqWF.jpg" alt="静之湖"><br><img src="https://z3.ax1x.com/2021/10/28/5LwXQJ.jpg" alt="画"><br><img src="https://z3.ax1x.com/2021/10/28/5LwLz4.jpg" alt="午餐"><br><img src="https://z3.ax1x.com/2021/10/28/5Lwjy9.jpg" alt="早餐"><br><img src="https://z3.ax1x.com/2021/10/28/5Lwze1.jpg" alt="早餐"><br><img src="https://z3.ax1x.com/2021/10/28/5L0Sdx.jpg" alt="早餐"><br><img src="https://z3.ax1x.com/2021/10/28/5L07nA.jpg" alt="青草"><br><img src="https://z3.ax1x.com/2021/10/28/5L0I6H.jpg" alt="绿意"><br><img src="https://z3.ax1x.com/2021/10/28/5L0H0I.jpg" alt="天空"><br><img src="https://z3.ax1x.com/2021/10/28/5L0oXd.jpg" alt="教堂"><br><img src="https://z3.ax1x.com/2021/10/28/5L0b7t.jpg" alt="Nice"><br><img src="https://z3.ax1x.com/2021/10/28/5L0LAP.jpg" alt="夕阳"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/10/28/5LwvLR.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="静之湖" scheme="https://www.gaotianyang.top/tags/%E9%9D%99%E4%B9%8B%E6%B9%96/"/>
    
  </entry>
  
  <entry>
    <title>金海湖</title>
    <link href="https://www.gaotianyang.top/archives/202107027946541f/"/>
    <id>https://www.gaotianyang.top/archives/202107027946541f/</id>
    <published>2021-07-02T11:55:55.000Z</published>
    <updated>2023-12-04T07:21:32.360Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/08/ROvoJf.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>金海湖</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/08/ROzEjg.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvLLj.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvXes.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvYzF.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvNM4.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvUsJ.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvwZR.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvaL9.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvBIx.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvsJK.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvyRO.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvgQe.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROv2sH.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvfeA.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROv4ot.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvTW8.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvHSS.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvbQg.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROzlCV.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROzKNq.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROzmHs.jpg" alt="金海湖"><br><img src="https://z3.ax1x.com/2021/07/08/ROvGGT.jpg" alt="金海湖"></p><blockquote><p>日料</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/08/ROvqyQ.jpg" alt="日料"><br><img src="https://z3.ax1x.com/2021/07/08/ROvjwn.jpg" alt="日料"><br><img src="https://z3.ax1x.com/2021/07/08/ROvzF0.jpg" alt="日料"><br><img src="https://z3.ax1x.com/2021/07/08/ROxpWT.jpg" alt="日料"><br><img src="https://z3.ax1x.com/2021/07/08/ROxiy4.jpg" alt="日料"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/08/ROvoJf.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="金海湖" scheme="https://www.gaotianyang.top/tags/%E9%87%91%E6%B5%B7%E6%B9%96/"/>
    
  </entry>
  
</feed>
