<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Hexo</title>
  
  
  <link href="https://www.gaotianyang.top/atom.xml" rel="self"/>
  
  <link href="https://www.gaotianyang.top/"/>
  <updated>2023-11-29T03:00:24.150Z</updated>
  <id>https://www.gaotianyang.top/</id>
  
  <author>
    <name>迷途的羔羊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react个人站建站总结</title>
    <link href="https://www.gaotianyang.top/archives/202311282f46f162/"/>
    <id>https://www.gaotianyang.top/archives/202311282f46f162/</id>
    <published>2023-11-28T09:02:14.000Z</published>
    <updated>2023-11-29T03:00:24.150Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/11/29/piDNnQf.png" alt="首屏图"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于 react-antd-admin 搭建的前端简历网站 <a href="https://me.gaotianyang.top">预览地址</a></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ul><li><strong>react-antd-admin-template</strong> 基于 <code>React</code> 和 <code>Ant Design</code> 的后台管理系统模板</li><li><strong>antd</strong> <code>Web</code> <code>UI</code> 组件库</li><li><strong>echarts</strong> <code>echarts-wordcloud</code> 词云库</li><li><strong>仿钉钉官网动效</strong> 基于 <code>JavaScript</code> <code>Css</code> 的滚动动效</li><li><strong>仿 antd 图片预览</strong> 基于 <code>Ant Design</code> <code>Modal</code> 的图片预览功能</li><li><strong>axios</strong> 基于 <code>promise</code> 的 <code>HTTP</code> 库</li><li><strong>mockjs</strong> 模拟数据生成器</li><li><strong>lodash</strong> <code>JavaScript</code> 实用工具库</li><li><strong>dayjs</strong> <code>JavaScript</code> 时间处理工具库</li></ul><h2 id="功能与问题"><a href="#功能与问题" class="headerlink" title="功能与问题"></a>功能与问题</h2><h3 id="Mockjs-实现数据过滤"><a href="#Mockjs-实现数据过滤" class="headerlink" title="Mockjs 实现数据过滤"></a>Mockjs 实现数据过滤</h3><p>基于 Mockjs，在<code>项目列表</code>接口请求时，实现了数据的过滤、分页等功能。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDU8BD.png" alt="mockjs"></p><h3 id="仿钉钉官网动效"><a href="#仿钉钉官网动效" class="headerlink" title="仿钉钉官网动效"></a>仿钉钉官网动效</h3><p>在实现此动效的时候，遇到了一些问题。例如原 demo 为原生 <code>html</code> <code>css</code> <code>js</code> 实现的，需要对其进行 react 的迁移与改造。另外，因为在项目中的使用场景为 dashboard 页面下使用，因此原本监听页面滚动事件，触发动效将不再生效。解决方案为将滚动监听，变更为 antd layout 组件，并将监听结果挂载于 window 自定义变量中。页面根据挂载的自定义变量，进行页面的重绘。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDNnQf.png" alt="dashboard"></p><h3 id="echarts-词云"><a href="#echarts-词云" class="headerlink" title="echarts 词云"></a>echarts 词云</h3><p>在使用词云效果的自定义词云形状时，会遇到因背景图加载原因，导致的首次渲染白屏的问题。解决方案为，将词云首次绘制，执行于背景图加载完毕后(<code>maskImage.onload</code>)。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDUtNd.png" alt="wordcloud"></p><h3 id="仿-antd-图片预览"><a href="#仿-antd-图片预览" class="headerlink" title="仿 antd 图片预览"></a>仿 antd 图片预览</h3><p>本项目的 <code>Ant Design</code> 版本为 V3.X，尚未加入图片预览功能，因此基于 <code>Ant Design</code> 的 <code>Modal</code> 组件二次封装了图片预览组件，并基于 <code>css</code> <code>js</code> 实现了缩放、翻转、旋转这些功能。</p><p><img src="https://z1.ax1x.com/2023/11/29/piDUGHe.png" alt="imagePreview"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/NLRX-WJC/react-antd-admin-template">react-antd-admin-template</a></li><li><a href="https://www.bilibili.com/video/BV12z4y1s7nE/?vd_source=2e6014e07f90a9d8b3424eb1c055a867">复刻钉钉官网滚动动画</a></li><li><a href="https://gitee.com/vary-space/hello-world/tree/12z4y1s7nE">代码仓库-复刻钉钉官网滚动动画</a></li><li><a href="https://www.npmjs.com/package/echarts-wordcloud">echarts-wordcloud npm 词云</a></li><li><a href="https://www.cnblogs.com/art-poet/p/13936076.html">react 项目使用 echarts-wordcloud（文字云）</a></li><li><a href="https://blog.csdn.net/Zeng__Yi/article/details/106197891">react+typeScript 框架 config-overrides 中设置 Alias 路径 报错的解决方法</a></li><li><a href="https://blog.csdn.net/m0_47670683/article/details/124025972">最优雅解决 typescript 报错：“元素隐式具有 “any“ 类型，因为类型为 “string“ 的表达式不能用于索引类型”</a></li><li><a href="https://cloud.tencent.com/developer/article/2233289">react antd 实现图片自定义预览</a></li><li><a href="https://github.com/liuguanhua/liuguanhua.github.io">刘关化的前端简历 参考</a></li><li><a href="https://github.com/sunniejs/sunniejs.github.io">宋楠的前端简历 参考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/11/29/piDNnQf.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>医院预算管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120bdee9ed5/"/>
    <id>https://www.gaotianyang.top/archives/20231120bdee9ed5/</id>
    <published>2023-11-20T07:59:07.000Z</published>
    <updated>2023-11-28T08:26:44.980Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7xSPJ.png" alt="首屏图"></p><a id="more"></a><ol><li>Antd ProList 实现<a href="packages/setting-ui/src/routes/period/components/smpList.tsx">数据卡片</a><br><img src="https://z1.ax1x.com/2023/11/28/piBxEd0.png" alt="ProList"><br><img src="https://z1.ax1x.com/2023/11/28/piBxFLn.png" alt="ProList"><ol><li>数据超长缩略</li><li>空数据处理</li></ol></li><li>Antd ProTable 实现<a href="packages/setting-ui/src/routes/account/components/accountList.tsx">树形列表</a><br><img src="https://z1.ax1x.com/2023/11/28/piBxAZq.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/28/piBxaSe.png" alt="ProTable"><ol><li>存在子集复选、操作按钮禁用</li><li>未勾选复选框 公共操作按钮禁用</li></ol></li><li>Antd ProTable 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piBxdQH.png" alt="ProTable"></li><li>editable-table 实现<a href="packages/setting-ui/src/routes/performance/components/performanceForm.tsx">可编辑表格</a><br><img src="https://z1.ax1x.com/2023/09/26/pP7xSPJ.png" alt="editable"><ol><li>数据联动编辑 指标属性=&gt;比较方法=&gt;计量单位</li><li>多行数据存储删除 <code>array.filter()</code></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7xSPJ.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="cbms" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/cbms/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/cbms/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    <category term="cbms" scheme="https://www.gaotianyang.top/tags/cbms/"/>
    
  </entry>
  
  <entry>
    <title>日常质量管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120671c213d/"/>
    <id>https://www.gaotianyang.top/archives/20231120671c213d/</id>
    <published>2023-11-20T07:58:47.000Z</published>
    <updated>2023-11-28T08:24:31.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vvaF.png" alt="首屏图"></p><a id="more"></a><ol><li>rc-banner-anim 实现 login 幻灯片效果<br><img src="https://z1.ax1x.com/2023/11/28/piB2Tgg.png" alt="banner"><!-- ![banner](./项目视频/登录.mov) --></li><li>cloud-charts 实现图表<br><img src="https://z1.ax1x.com/2023/11/28/piB2buj.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/09/26/pP7vvaF.png" alt="cloud-charts"></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/28/piB2XEq.png" alt="organization"><ol><li>组织架构与菜单联动 动态生成顶级 root 节点</li></ol></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piBx9zQ.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/28/piBxpRg.png" alt="ProTable"></li><li>封装顶部<a href="packages/adverse-event-ui/src/routes/statistics/reportDept/topStatistics/index.tsx">数据统计条</a>组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/11/28/piB27vQ.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/28/piBxSJS.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vvaF.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="dhqs" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/dhqs/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/dhqs/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    <category term="dhqs" scheme="https://www.gaotianyang.top/tags/dhqs/"/>
    
  </entry>
  
  <entry>
    <title>高质量发展建设管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120ca98070b/"/>
    <id>https://www.gaotianyang.top/archives/20231120ca98070b/</id>
    <published>2023-11-20T06:47:54.000Z</published>
    <updated>2023-11-28T01:57:32.001Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vx54.png" alt="首屏图"></p><a id="more"></a><ol><li>tgg-large-screen 实现数据大屏全屏缩放效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjWdS.png" alt="dashboard"></li><li>react-transition-group 实现数据大屏横向切换效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjfIg.png" alt="dashboard"><ol><li>使用 location 承接 <code>trend</code> 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ol></li><li>cloud-charts 实现图表<br><img src="https://z1.ax1x.com/2023/11/28/piB244f.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/28/piB2hUP.png" alt="cloud-charts"></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/28/piB22DA.png" alt="organization"></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/28/piB2IC8.png" alt="ProTable"></li><li>封装顶部数据统计条组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/09/26/pP7vx54.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vx54.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="pmp" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/pmp/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/pmp/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    <category term="pmp" scheme="https://www.gaotianyang.top/tags/pmp/"/>
    
  </entry>
  
  <entry>
    <title>全面质量管理项目技术栈</title>
    <link href="https://www.gaotianyang.top/archives/20231120c020518/"/>
    <id>https://www.gaotianyang.top/archives/20231120c020518/</id>
    <published>2023-11-20T05:58:58.000Z</published>
    <updated>2023-11-23T09:27:08.418Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z1.ax1x.com/2023/09/26/pP7vjVU.png" alt="首屏图"></p><a id="more"></a><ol><li>3D card 实现九宫格卡片交互效果<br><img src="https://z1.ax1x.com/2023/09/26/pP7vjVU.png" alt="dashboard"><ol><li><a href="https://codepen.io/robin-dela/pen/jVddbq">3D card - 卡片交互效果</a></li><li><a href="https://codepen.io/smpnjn/pen/qBVPvpZ">Flippable Playing Cards - 卡片交互效果</a></li></ol></li><li>tgg-large-screen 实现数据大屏全屏缩放效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjaVO.png" alt="dashboard"></li><li>react-transition-group 实现数据大屏横向切换效果<br><img src="https://z1.ax1x.com/2023/11/23/pidjNqK.png" alt="dashboard"><ol><li>使用 location 承接 <code>trend</code> 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ol></li><li><a href="https://cloud-charts.gitee.io/example/Recommendation">cloud-charts</a> 实现图表<br><img src="https://z1.ax1x.com/2023/11/23/pidblee.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/23/pidbUQf.png" alt="cloud-charts"><br><img src="https://z1.ax1x.com/2023/11/23/pidbay8.png" alt="cloud-charts"><ol><li>使用 Wline 实现折线图</li><li>使用 Wbar 实现柱图</li><li>使用 Wpie 实现环图</li><li>使用 Wlinebar 实现线柱图</li><li>使用 Wnightingale 实现玫瑰图</li></ol></li><li>organization-graph 实现组织架构<br><img src="https://z1.ax1x.com/2023/11/23/pidb1dH.png" alt="organization"></li><li>Antd pro-components 实现标准表格<br><img src="https://z1.ax1x.com/2023/11/23/pidbJJI.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/23/pidjBPH.png" alt="ProTable"><br><img src="https://z1.ax1x.com/2023/11/23/pidjwIe.png" alt="ProTable"></li><li>封装顶部数据统计条组件 并支持多种格式展示<br><img src="https://z1.ax1x.com/2023/11/23/pidbGFA.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/23/pidbNSP.png" alt="topStatistics"><br><img src="https://z1.ax1x.com/2023/11/23/pidjDGd.png" alt="topStatistics"><ol><li>大小数据量展示</li><li>标红数据处理</li></ol></li><li>使用 <a href="https://designable-antd.formilyjs.org/">formilyjs</a> 实现表单<br><img src="https://z1.ax1x.com/2023/11/23/pidbYWt.png" alt="formilyjs"><br><img src="https://z1.ax1x.com/2023/11/23/pidjrRA.png" alt="formilyjs"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/09/26/pP7vjVU.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="qms" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/qms/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/qms/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="qms" scheme="https://www.gaotianyang.top/tags/qms/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>NicePhoto建站经验总结</title>
    <link href="https://www.gaotianyang.top/archives/202303104356a8d7/"/>
    <id>https://www.gaotianyang.top/archives/202303104356a8d7/</id>
    <published>2023-03-10T09:43:09.000Z</published>
    <updated>2023-03-13T05:33:18.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论你是摄影师、设计师、艺术家还是创作者，在线电子相册都可以满足你的需求。通过这个平台，可以建立自己的个人品牌，并与更多的人建立起联系和合作。此项目共分为门户网站、前台展示、后台管理、数据大屏四部分。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppMxywR.png" alt="NicePhoto"></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ul><li><strong>Next</strong> react 应用程序框架，构建高性能、可扩展和易于维护的 Web 应用程序</li><li><strong>surrealdb</strong> 分布式多模型数据库</li><li><strong>swr</strong> 用于数据请求的 React Hooks 库</li><li><strong>tinytime</strong> 时间处理</li><li><strong>xbytes</strong> 字节格式转换</li><li><strong>tailwindcss</strong> css 样式库</li><li><strong>tremor</strong> UI 库</li><li><strong>vercel</strong> 代码托管平台</li></ul><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="nice-photo-site-门户"><a href="#nice-photo-site-门户" class="headerlink" title="nice-photo-site 门户"></a>nice-photo-site 门户</h3><p><a href="https://nice-photo.xiangshi.app/">门户网址链接</a></p><p><img src="https://s1.ax1x.com/2023/03/13/ppQZA9H.png" alt="门户项目"></p><h4 id="会员服务"><a href="#会员服务" class="headerlink" title="会员服务"></a>会员服务</h4><table><thead><tr><th>限制</th><th>免费版</th><th>高级版</th><th>独立部署</th></tr></thead><tbody><tr><td>专辑数量限制</td><td>2</td><td>无限</td><td>无限</td></tr><tr><td>相册数量限制</td><td>4</td><td>无限</td><td>无限</td></tr><tr><td>图片空间限制</td><td>100MB</td><td>1000MB</td><td>无限</td></tr><tr><td>图片访问流量</td><td>500MB/月</td><td>4G/月</td><td>无限</td></tr><tr><td>销售线索</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>服务价格</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>自定义域名前缀</td><td>禁用</td><td>支持</td><td>支持</td></tr><tr><td>私有部署</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>定价</td><td>免费</td><td>¥99/年</td><td>¥899/年</td></tr></tbody></table><h3 id="nice-photo-client-前台项目"><a href="#nice-photo-client-前台项目" class="headerlink" title="nice-photo-client 前台项目"></a>nice-photo-client 前台项目</h3><p><a href="https://flavor-magic.np.xiangshi.app/">前台网址链接</a></p><p><img src="https://s1.ax1x.com/2023/03/13/ppQVvcR.png" alt="前台项目"></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>NicePhoto 是一个功能强大的在线照片展示平台，为用户提供了丰富的展示、管理、销售照片的工具和功能。我们致力于打造一个简单易用、高效可靠、安全稳定的产品，帮助用户快速创建和发布自己的照片展示网站，并与客户进行交流和合作。NicePhoto 不仅可以用于个人摄影师、艺术家、设计师等行业，也可以服务于各种商业和非营利机构，帮助他们展示和推广自己的品牌和形象。无论您是需要展示照片、卖照片、展示作品、销售商品还是拓展业务，NicePhoto 都能为您提供定制化的解决方案和优质的服务，让您的想象力得到最大的释放和发挥。</p><h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><ul><li><strong>多种展示方式</strong> 多种照片和作品展示方式，包括幻灯片、画廊、网格等多种形式，让你的作品展示更加独特和个性化。</li><li><strong>高效上传和管理</strong> 高效、便捷的上传和管理功能，让你可以轻松地上传、编辑、删除你的作品。</li><li><strong>销售线索收集</strong> 销售线索收集功能，可以让你通过网站访问者的注册信息、留言信息等途径收集潜在客户的联系信息，为你的业务销售提供有力支持。</li><li><strong>服务介绍</strong> 提供了服务介绍功能，可以详细介绍您能提供的各种服务及其优势，方便您的客户了解服务内容。</li><li><strong>摄影专业化</strong> 我们的产品针对摄影行业进行了更多的优化，使网站更具有摄影专业性和个性化。</li><li><strong>灵活性</strong> 我们的产品功能非常灵活，您可以根据自己的需求自由选择需要展示的功能，使网站更加个性化和专业化。</li></ul><h3 id="nice-photo-manage-后台管理"><a href="#nice-photo-manage-后台管理" class="headerlink" title="nice-photo-manage 后台管理"></a>nice-photo-manage 后台管理</h3><p><a href="https://nice-photo-manage.xiangshi.app/">后台网址链接</a></p><p>后台管理共分为概览、专辑管理、相册管理、首页特效、销售线索、介绍信息、套系价格、系统设置几大模块。</p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>在系统中，您可以通过系统概览页面快速查看各个模块的概要信息、空间总占用情况以及最新的销售线索信息等。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQkDXV.png" alt="概览"></p><p>如果您需要对销售线索进行快速操作，则可以在概览模块中进行相关设置。</p><p>此外，我们建议您经常查看系统概览页面，因为它可以提供有关系统使用状况的重要信息。</p><h4 id="专辑管理"><a href="#专辑管理" class="headerlink" title="专辑管理"></a>专辑管理</h4><p>在“作品展示”菜单下的第一个模块是“专辑管理”，这是本系统的重要模块之一。在设置完站点的基本信息后，首先您需要在这里创建一个专辑。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAVcq.png" alt="专辑管理"></p><p>添加专辑非常简单，只需点击“添加专辑”按钮即可，然后在弹出的表单中填写主标题、副标题和选择一个展示效果即可。</p><p>展示效果包括：轮播、滑轨、瀑布流、网格等五大类，在每个大类下还有对应的细节参数可以进行设置。</p><p>成功添加专辑后，您可以在当前页面看到刚刚添加的专辑。如果您需要排序多个专辑，仅需将左侧的十字图标拖动到您想要放置的位置即可。</p><p>对于每个已创建的专辑，右侧分别有三个按钮：进入专辑下的相册管理模块、编辑专辑信息、删除专辑。您可以根据需要单击这些按钮执行不同的操作。</p><h4 id="相册管理"><a href="#相册管理" class="headerlink" title="相册管理"></a>相册管理</h4><p>创建了第一个专辑后，左侧的“作品管理”菜单下会多出一个“相册管理”。进入相册管理，默认显示的是最新一个专辑下的所有相册。如果您需要切换到其他专辑，请在页面左上角的下拉菜单中进行选择。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAVcq.png" alt="相册管理"></p><p>添加相册非常简单，只需点击“添加相册”按钮即可，然后在弹出的表单中填写主标题、副标题和选择一个展示效果即可。</p><p>展示效果包括：轮播、滑轨、瀑布流、网格、自适应等七大类，在每个大类下还有对应的细节参数可以进行设置。</p><p>成功添加相册后，您可以在当前页面看到刚刚添加的相册。如果您需要排序多个相册，仅需将卡片底部的十字图标拖动到您想要放置的位置即可。单击卡片中间的编辑按钮，即可对相册的封面图片进行设置。</p><p>对于每个已创建的相册，卡片底部分别有三个按钮：进入相册下的照片管理模块、编辑相册信息、删除相册。您可以根据需要单击这些按钮执行不同的操作。</p><p>点击相册卡片底部的绿色“照片”按钮即可进入照片模块。在照片模块中，只需将要上传的图片拖到上传文件区域即可，同时您也可以一次性上传多张图片。</p><p>一旦图片上传完成，您可以对它们的顺序进行排列以满足您自己的需求。您可以将鼠标悬停在照片上方以显示一个“移动”图标，然后单击并拖动该图标以调整照片的顺序。点击红色的删除按钮可删除这个图片。</p><h4 id="首页特效"><a href="#首页特效" class="headerlink" title="首页特效"></a>首页特效</h4><p>在首页特效模块中有两个子模块，分别是“首页作品”和“首页背景”。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQANDK.png" alt="首页特效"></p><p>在相册管理模块中，用户可以点击黄色的编辑按钮，并在弹出框中选择发布至首页，这样就可以在“首页作品”子模块中看到对应的相册了。</p><p>在“首页作品”子模块页面下方的简介卡片上，用户可以点击编辑按钮并为首页需要展示的作品添加一段简要的介绍。</p><p>在系统设置模块的站点导航卡片上，用户可以点击编辑按钮将“首页浏览作品”改为显示，这样用户就可以在首页上快速地看到了对应的作品。</p><p>在“首页背景”子模块中，用户可以快速地上传多张背景图。这些图片将以淡入淡出并加上稍微放大的效果在首页背景轮流显示。</p><h4 id="销售线索"><a href="#销售线索" class="headerlink" title="销售线索"></a>销售线索</h4><p>销售线索模块会展示所有在网站上给您留言咨询的信息。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAHK0.png" alt="销售线索"></p><p>后台界面上会有明显的未读提示，让您可以清晰地了解哪些信息尚未被查看过。</p><p>该模块还提供接入飞书 APP 提醒的能力，方便您及时跟进销售线索的动态。</p><p>您也可以便捷地设置这些线索是否已经被跟踪过，以便于管理和追踪。</p><h4 id="介绍信息"><a href="#介绍信息" class="headerlink" title="介绍信息"></a>介绍信息</h4><p>介绍信息模块下设关于我们、工作室、精修照片三个子模块。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAxPJ.png" alt="关于我们"></p><p>关于我们模块：该模块用于编辑公司/工作室的介绍信息，上传对应的 VI 图。在此模块内，用户可以添加、编辑和删除介绍信息，并上传一张符合 VI 形象的图片。具体操作流程如下：</p><p>点击“关于我们”模块，添加/编辑介绍信息，可以选择字体样式、大小和颜色等属性，上传 VI 图。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQAzG9.png" alt="工作室"></p><p>工作室模块：该模块用于展示工作室的办公场景和体现企业文化。在此模块内，用户可以添加和删除工作室场景照片。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQES2R.png" alt="精修照片"></p><p>精修照片模块：该模块用于展示照片精修前后的对比效果。针对摄影工作室而言，该模块非常实用。在此模块内，用户可以上传精修前后的照片。</p><h4 id="套系价格"><a href="#套系价格" class="headerlink" title="套系价格"></a>套系价格</h4><p>在此模块内，用户可以添加、编辑和删除服务套系的资料，并设置相关价格和描述信息等。具体操作流程如下：</p><ul><li>点击“套系价格”模块</li><li>添加/编辑服务套系资料，包括名称、价格、描述等信息</li><li>删除服务套系资料</li></ul><p><img src="https://s1.ax1x.com/2023/03/13/ppQEDdU.png" alt="套系价格"></p><h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><p>本软件的系统设置模块提供编辑站点信息、上传标识图标、自定义二级域名等功能，有助于网站的优化和定制。</p><p><img src="https://s1.ax1x.com/2023/03/13/ppQEroF.png" alt="系统设置"></p><p>网站的基本信息包括网站的名称、描述、关键字、版权信息等，这些信息对于搜索引擎优化(SEO)来说非常重要。具体操作流程如下：</p><ul><li>点击“站点信息”卡片</li><li>填写站点的基本信息：网站标题、描述、关键字、版权等。</li><li>确认并保存修改</li></ul><hr><p>站点图标卡片：该卡片可上传网站的 favicon，使得用户可以在浏览器书签栏、标签页或收藏夹中看到网站的标识。具体操作流程如下：</p><ul><li>点击“站点图标”卡片</li><li>上传 favicon 图片，建议大小为 16x16 像素或 32x32 像素</li><li>确认并保存修改</li></ul><hr><p>站点 LOGO 卡片：该卡片可上传位于网站左上角的 LOGO，方便用户在浏览网站时更加直观地了解该网站的品牌和主题。具体操作流程如下：</p><ul><li>点击“站点 LOGO”卡片</li><li>上传 LOGO 图片，建议大小为 60x60 像素</li><li>确认并保存修改</li></ul><hr><p>备案信息卡片的使用方法和操作流程</p><ul><li>点击“备案信息”卡片</li><li>填写备案所需信息：备案号、单位名称、网站名称、主办单位等。</li><li>填写备案连接</li><li>确认并保存修改</li></ul><hr><p>自定义域名卡片：该卡片可让用户自定义一个二级域名，方便用户记忆和分享。具体操作流程如下：</p><ul><li>点击“帮到域名”卡片</li><li>输入想要的二级域名</li><li>确认并保存修改</li></ul><hr><p>站点导航可控制各个模块的展示状态，包括首页、作品、套系价格、关于我们、联系我们等，在网站的导航栏中进行显示。</p><ul><li>首页：左上角导航首页按钮的显示状态</li><li>作品：左上角导航作品按钮的显示状态</li><li>套系价格：左上角导航套系价格按钮的显示状态</li><li>关于我们：左上角导航关于我们按钮的显示状态</li><li>联系我们：左上角导航联系我们按钮的显示状态</li><li>介绍侧边栏：左上角导航 “…”按钮的显示状态</li><li>首页浏览作品：是否在首页左半部分区域展示首页作品集</li><li>首页联系我们：是否在首页右半部分区域展示联系我们按钮</li></ul><hr><p>许可密钥是一种授权码，可用于购买和激活软件的高级版，也称为 License。</p><p>许可密钥和 License 是用于购买和使用软件的重要凭证，具体操作流程如下：</p><ul><li>购买软件高级版</li><li>在购买过程中获取许可密钥</li><li>打开软件并输入许可密钥</li><li>完成激活升级至高级版</li></ul><p>注意：每个许可密钥只能激活一次，因此请务必妥善保管。</p><h3 id="nice-photo-dashboard-数据大屏"><a href="#nice-photo-dashboard-数据大屏" class="headerlink" title="nice-photo-dashboard 数据大屏"></a>nice-photo-dashboard 数据大屏</h3><p>数据大屏是一种用于展示和分析数据的可视化工具，通过对数据进行多维度的汇总和展示，可以为用户提供全面、直观、清晰的数据信息。除了方便运维人员对平台运行状态进行快速了解之外，数据大屏还可以扩展以下作用：</p><p>监控业务数据：数据大屏可以实时监控平台的各项业务数据，如注册量、用户活跃度、转化率等，帮助运营人员了解业务状况，及时调整策略，提高运营效率和用户满意度。</p><p>优化资源配置：通过数据大屏可以了解到平台各项资源的使用情况，包括图片资源存储、当日新增图片、当日新增资源大小、资源使用量用户排名等，从而根据数据分析结果进行资源的优化配置，减少浪费，提高资源利用率，降低运营成本。</p><p>数据大屏作为一种数据可视化工具，具有方便、直观、全面、清晰等优点，对于运营、管理、决策等方面都有着重要的作用。</p><h2 id="上线和优化"><a href="#上线和优化" class="headerlink" title="上线和优化"></a>上线和优化</h2><p>项目依托于 nextjs 进行代码的封装加密与构建。并通过使用环境变量来存储一些敏感值，并在代码中引用它们。针对富文本数据，需要使用 js 的编码与转码对数据进行处理。方便后续维护时的数据库迁移，导入导出操作。</p><p>数据库响应超时问题优化，目前暂时先通过使用免费版进行托管，后续如果用户量提升了，再考虑进行付费版服务迁移。</p><h2 id="推广经验"><a href="#推广经验" class="headerlink" title="推广经验"></a>推广经验</h2><p>目前主要的客群是摄影师、设计师、艺术家还是创作者，想成立自己的工作室，有推广建站诉求，但又不希望过多投入。</p><p>社交媒体宣传：在 v2ex、小红书、朋友圈等平台，发布关于 NicePhoto 的信息和案例，并与感兴趣的目标客户建立联系。</p><p>创意营销活动：通过各种创意营销活动，例如比赛、抽奖、推荐奖励等，吸引更多的潜在客户关注并尝试 NicePhoto。</p><p>提供试用版：提供免费试用版、正式会员体验券，让潜在客户可以尝试使用 NicePhoto，感受电子相册带来的便利和优势。</p><p>与其他行业协作：与相关行业如摄影器材厂商、艺术教育机构等协作，共同推广 NicePhoto。</p><p>通过口碑宣传：口碑宣传是营销的重要方式之一，因此建议与现有用户建立良好的关系，促进他们分享他们的使用经验和推荐。</p><p>利用 SEO 优化：使用搜索引擎优化（SEO）的技巧，优化您的网站和内容，以便更多的潜在客户可以找到您的 NicePhoto 服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nicephoto" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nicephoto/"/>
    
    <category term="next" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nicephoto/next/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nicephoto" scheme="https://www.gaotianyang.top/tags/nicephoto/"/>
    
    <category term="next" scheme="https://www.gaotianyang.top/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>crawler的使用</title>
    <link href="https://www.gaotianyang.top/archives/20220607a78aa02e/"/>
    <id>https://www.gaotianyang.top/archives/20220607a78aa02e/</id>
    <published>2022-06-07T01:32:00.000Z</published>
    <updated>2022-06-07T08:13:58.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/07/XBGM2q.png" alt="首屏图"></p><a id="more"></a><blockquote><p>node-crawler：一个轻量级爬虫工具</p></blockquote><h2 id="这就是-node-crawler"><a href="#这就是-node-crawler" class="headerlink" title="这就是 node-crawler"></a>这就是 node-crawler</h2><p><code>node-crawler</code> 是一个轻量级的 node.js 爬虫工具，兼顾了高效与便利性，支持分布式爬虫系统，支持硬编码，支持 http 前级代理。</p><p><code>node-crawler</code> 完全由 nodejs 写成，天生支持非阻塞异步 IO，为爬虫的流水线作业机制提供了极大便利。同时支持对 <code>DOM</code> 的快速选择，对于抓取网页的特定部分的任务可以说是杀手级功能，无需再手写正则表达式，提高爬虫开发效率。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>DOM 元素快速解析 &amp; 符合 jQuery 语法的选择器功能(默认使用 Cheerio，支持更换为 <code>JSDOM</code> 等其它 DOM 解析器)</li><li>支持连接池模式，并发数和重连数均可配置</li><li>支持请求队列的优先权（即不同 URL 的请求能有不同的优先级）</li><li>支持延时功能（某些服务器对每分钟内连接数有限制）</li><li>支持 <code>forceUTF8</code> 模式以应对复杂的编码问题，当然你也可以自己为不同的连接设置编码</li><li>支持 4.x 及更高版本的 Nodejs</li></ul><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_2">安装</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_3">最简单的使用实例</a></li><li>回调处理</li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/quick_start/#_4">并发控制及慢速模式</a></li></ul><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_2">自定义参数</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_3">使用 http 代理</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/extra_example/#_4">处理原始返回数据</a></li><li>分布式爬虫</li><li>链式模型</li><li>使用 POST,GET,PUT 等请求方法</li><li>使用 Cookie</li></ul><h2 id="参数详细介绍"><a href="#参数详细介绍" class="headerlink" title="参数详细介绍"></a>参数详细介绍</h2><ul><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_2">回调设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_3">调度参数</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_4">重试控制</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_5">DOM 选项</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_6">编码设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_7">缓存设置</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/reference/main/#_8">其它</a></li></ul><h2 id="Crawler-类捕获事件"><a href="#Crawler-类捕获事件" class="headerlink" title="Crawler 类捕获事件"></a>Crawler 类捕获事件</h2><ul><li>Event: ‘schedule’</li><li>Event: ‘limiterChange’</li><li>Event: ‘request’</li><li>Event: ‘drain’</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><blockquote><p>循环爬取列表数据，并根据列表数据获取对应详情页数据。</p></blockquote><h3 id="获取列表数据"><a href="#获取列表数据" class="headerlink" title="获取列表数据"></a>获取列表数据</h3><p>根据数据源页面规律，构建爬取 url 列表。并爬取列表基础数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入爬虫插件</span></span><br><span class="line"><span class="keyword">const</span> Crawler = <span class="built_in">require</span>(<span class="string">&#x27;crawler&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入导出文件插件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//系统路径模块</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> format = <span class="built_in">require</span>(<span class="string">&#x27;./utils/format.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils/utils.js&#x27;</span>);</span><br><span class="line"><span class="comment">// 临时存储数据</span></span><br><span class="line"><span class="keyword">let</span> datas = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Crawler(&#123;</span><br><span class="line">  maxConnections: <span class="number">1</span>,</span><br><span class="line">  followRedirect: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在每个请求处理完毕后将调用此回调函数</span></span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params">error, res, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`错误条目<span class="subst">$&#123;res.options.title&#125;</span>%`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// $ 默认为 Cheerio 解析器</span></span><br><span class="line">      <span class="comment">// 它是核心jQuery的精简实现，可以按照jQuery选择器语法快速提取DOM元素</span></span><br><span class="line">      <span class="comment">// var $ = res.$;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化json(将dom结构解析为json数据)</span></span><br><span class="line">      <span class="keyword">let</span> json = format.formatList(res, host);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 合并数据</span></span><br><span class="line">      datas = [...datas, ...json];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取并输出进度(当queue插入的数据是数组对象时，可以根据res.options获取数据对应的属性)</span></span><br><span class="line">      <span class="keyword">let</span> progress = utils.getProgress(res.options.key, num);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`进度<span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当爬取完毕输出</span></span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(datas);</span><br><span class="line">      <span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line">      <span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;urlList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.options.key === num) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础配置</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">1</span>; <span class="comment">// 设置起始请求页数</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>; <span class="comment">// 设置请求页数总数</span></span><br><span class="line"><span class="keyword">let</span> host = <span class="string">&#x27;https://www.dytt8.net&#x27;</span>; <span class="comment">// 目标网站域名</span></span><br><span class="line"><span class="keyword">let</span> urls = []; <span class="comment">// 存储爬取页面列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建爬取列表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; num + <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> item = &#123;&#125;;</span><br><span class="line">  item.key = i;</span><br><span class="line">  <span class="comment">// 循环生成列表数据</span></span><br><span class="line">  item.uri = host + <span class="string">&#x27;/html/gndy/dyzz/list_23_&#x27;</span> + i + <span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">  urls.push(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将一个URL加入请求队列，并使用默认回调函数</span></span><br><span class="line">c.queue(urls);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将多个URL加入请求队列</span></span><br><span class="line"><span class="comment">// c.queue([&#x27;http://www.google.com/&#x27;, &#x27;http://www.yahoo.com&#x27;]);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------开始爬取---------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="获取详情数据"><a href="#获取详情数据" class="headerlink" title="获取详情数据"></a>获取详情数据</h3><p>根据第一步爬取的列表数据，进入详情页爬取详情数据，并通过正则匹配，处理成需要的数据格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Crawler = <span class="built_in">require</span>(<span class="string">&#x27;crawler&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> format = <span class="built_in">require</span>(<span class="string">&#x27;./utils/format.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils/utils.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> datas = [];</span><br><span class="line"><span class="comment">// 获取原始链接数据</span></span><br><span class="line"><span class="keyword">let</span> urlList = <span class="built_in">require</span>(<span class="string">&#x27;./json/urlList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Crawler(&#123;</span><br><span class="line">  maxConnections: <span class="number">1</span>,</span><br><span class="line">  followRedirect: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 在每个请求处理完毕后将调用此回调函数</span></span><br><span class="line">  callback: <span class="function"><span class="keyword">function</span> (<span class="params">error, res, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`错误条目<span class="subst">$&#123;res.options.title&#125;</span>%`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// $ 默认为 Cheerio 解析器</span></span><br><span class="line">      <span class="comment">// 它是核心jQuery的精简实现，可以按照jQuery选择器语法快速提取DOM元素</span></span><br><span class="line">      <span class="comment">// var $ = res.$;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 格式化json</span></span><br><span class="line">      <span class="keyword">let</span> json = format.formatDetails(res);</span><br><span class="line">      datas.push(json);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> progress = utils.getProgress(res.options.key, urlList.length);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`进度<span class="subst">$&#123;progress&#125;</span>%`</span>);</span><br><span class="line">      <span class="comment">// 当爬取完毕输出</span></span><br><span class="line">      <span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(datas);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line">      <span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;movieList.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 写入文件</span></span><br><span class="line">      fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.options.key === urlList.length) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    done();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>; <span class="comment">// 设置起始值</span></span><br><span class="line"><span class="keyword">let</span> urls = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = num; i &lt; urlList.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (urlList[i]) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = &#123;&#125;;</span><br><span class="line">    item.key = i + <span class="number">1</span>;</span><br><span class="line">    item.uri = urlList[i].url;</span><br><span class="line">    item.id = urlList[i].id;</span><br><span class="line">    item.title = urlList[i].title;</span><br><span class="line">    item.url = urlList[i].url;</span><br><span class="line">    item.date = urlList[i].date;</span><br><span class="line">    item.desc = urlList[i].desc;</span><br><span class="line">    item.img = urlList[i].img;</span><br><span class="line">    urls.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c.queue(urls);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---------------开始爬取---------------&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="清洗详情数据"><a href="#清洗详情数据" class="headerlink" title="清洗详情数据"></a>清洗详情数据</h3><p>数据中存在错误数据，异常数据，可以通过清洗脚本，批量赋默认值处理。例如清洗图片 404 的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 系统路径模块</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 异常图片地址列表</span></span><br><span class="line"><span class="keyword">const</span> formatConfig = <span class="built_in">require</span>(<span class="string">&#x27;./utils/formatConfig.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> formatList = <span class="built_in">require</span>(<span class="string">&#x27;./json/movieList.json&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置默认图片链接</span></span><br><span class="line"><span class="keyword">let</span> baseImage = <span class="string">&#x27;https://img9.doubanio.com/view/photo/l_ratio_poster/public/p.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; formatList.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 若img字段为空，赋默认值</span></span><br><span class="line">  <span class="keyword">if</span> (formatList[i].img === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    formatList[i].img = baseImage;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若img字段符合异常数据列表，赋默认值</span></span><br><span class="line">  <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; formatConfig.errUrl.length; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (formatList[i].img.includes(formatConfig.errUrl[j])) &#123;</span><br><span class="line">      formatList[i].img = baseImage;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 格式化json</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="built_in">JSON</span>.stringify(formatList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定要创建的目录和文件名称 __dirname为执行当前js文件的目录</span></span><br><span class="line"><span class="keyword">let</span> file = path.join(__dirname + <span class="string">&#x27;/json&#x27;</span>, <span class="string">&#x27;formatFinsh.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line">fs.writeFile(file, text, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件创建成功~&#x27;</span> + file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.npmjs.com/package/crawler">crawler 的 NPM 地址</a></li><li><a href="https://node-crawler.readthedocs.io/zh_CN/latest/">Node-Crawler 介绍</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/07/XBGM2q.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="爬虫" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="爬虫" scheme="https://www.gaotianyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>亿欧数据项目总结</title>
    <link href="https://www.gaotianyang.top/archives/2022060613e4dc3d/"/>
    <id>https://www.gaotianyang.top/archives/2022060613e4dc3d/</id>
    <published>2022-06-06T01:35:23.000Z</published>
    <updated>2022-06-07T08:26:25.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/XwopCj.jpg" alt="首屏图"></p><a id="more"></a><h2 id="📣v1-3-2022-05-31"><a href="#📣v1-3-2022-05-31" class="headerlink" title="📣v1.3(2022.05.31)"></a>📣v1.3(2022.05.31)</h2><blockquote><p><strong>总结：</strong>增加指标列表的计算功能，指标图表详情添加去分析。首页新增投融资周报列表、精选报告列表。优化跳转后高级筛选弹框可控，支持查看企业招投标数据、专利信息数据。支持简报删除的恢复。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-指标列表新增【计算】</td><td>1.首页/工作台-新增投融资周报分享</td><td>1.查看企业情报-跳转直接执行减少弹窗操作页面</td><td>1.简报的恢复功能</td></tr><tr><td>2.指标图表详情页-增加【去分析】入口</td><td>2.数据分析-亿欧特色新增【企业门店数据】</td><td>2.领域详情页-增加缓存提升加载性能问题</td><td></td></tr><tr><td></td><td></td><td>3.可支持查看企业招投标和专利信息</td></tr></tbody></table><h2 id="📣v1-2-1-2022-05-18"><a href="#📣v1-2-1-2022-05-18" class="headerlink" title="📣v1.2.1(2022.05.18)"></a>📣v1.2.1(2022.05.18)</h2><blockquote><p><strong>总结：</strong>增加情报监测模块信息维度，方便用户快速查看企业情报，支持上传情报源，拓展企业信息，优化高级/简单筛选查询逻辑。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.情报监测模块新增政策列表</td><td>1.数据分析-亿欧特色新增【公司经营数据】</td><td>1.支持高级筛选和普通筛选共用</td></tr><tr><td>2.企业列表支持选中企业查看对应情报信息</td><td>2.企业详情页增加经营数据-独家分析</td><td>2.主搜索的排序问题</td></tr><tr><td>3.支持客户上传情报源</td><td>3.企业详情页增加经营数据-招投标数据</td><td></td></tr><tr><td>4.企业详情页-融资历史支持下载图片</td><td>4.企业详情页增加经营数据-专利数据</td><td></td></tr><tr><td></td><td>5.企业详情页增加经营数据-行政处罚</td></tr></tbody></table><h2 id="📣v1-2-2022-04-28"><a href="#📣v1-2-2022-04-28" class="headerlink" title="📣v1.2(2022.04.28)"></a>📣v1.2(2022.04.28)</h2><blockquote><p><strong>总结：</strong>增加画图面板功能，支持图表样式、数据点的编辑，支持模板的保存与共享，支持插入自定义图表。</p><p><strong>亮点：</strong>添加画图面板功能，可自行配置图表样式、数据并存储为模板。根据自定义图表数据的不变特性，优化为插入图片方式。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-功能区新增【画图面板】</td><td>1.数据分析-亿欧特色新增【线上电商数据】</td><td>1.简报右侧数据组排序问题</td></tr><tr><td>2.画图面板支持图表样式设置和数据点编辑</td><td></td><td></td></tr><tr><td>3.支持样式模板创建，同组织下共享</td><td></td><td></td></tr><tr><td>4.设置好样式的图表支持简报插入</td><td></td></tr></tbody></table><h2 id="📣v1-1-1-2022-03-29"><a href="#📣v1-1-1-2022-03-29" class="headerlink" title="📣v1.1.1(2022.03.29)"></a>📣v1.1.1(2022.03.29)</h2><blockquote><p><strong>总结：</strong>数据分析添加查看情报入口，报告详情关联指标数据，新增行业图表，调整各模块权限。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.数据分析-指标目录列表新增【查看报告】</td><td>1.数据分析-亿欧特色新增【报告指标】</td><td>1.行业分析-行业标签改名为【行业体系】</td><td>1.动态表格关联企业变更后的忽略/更新提示</td></tr><tr><td>2.报告详情页，新增报告关键指标数据</td><td></td><td>2.优化游客登录交互提示</td><td>2.宏观类型情报的主题展示和筛选</td></tr><tr><td>3.行业分析-新增行业图表页面</td><td></td><td>3.优化放宽访客权益</td></tr></tbody></table><h2 id="📣v1-1-2022-03-16"><a href="#📣v1-1-2022-03-16" class="headerlink" title="📣v1.1(2022.03.16)"></a>📣v1.1(2022.03.16)</h2><blockquote><p><strong>总结：</strong>添加动态表格更新提醒，新增权益中心，企业分析列表配置表单添加排序，新增宏观类型情报，权限弹框优化，注册页优化。</p><p><strong>亮点：</strong>拓展 antd 穿梭框排序功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.工作台-动态表格更新提醒</td><td>1.指标缩略图抽离组件</td><td>1.简报/报告插入 X 轴非时间类型的图表</td></tr><tr><td>2.底部 footer 区权益中心说明</td><td>2.权限弹窗优化升级</td><td>2.简报/报告在富文本删掉指标图表、情报和企业，对应树结构去掉勾选</td></tr><tr><td>3.企业分析-配置表单的穿梭框支持排序</td><td>3.注册页添加返回登录按钮</td><td></td></tr><tr><td>4.情报监测-新增【宏观】类型情报数据</td><td>4.工作台-侧边栏自动收起非当前项</td></tr></tbody></table><h2 id="📣v1-0-2022-02-28"><a href="#📣v1-0-2022-02-28" class="headerlink" title="📣v1.0(2022.02.28)"></a>📣v1.0(2022.02.28)</h2><blockquote><p><strong>总结：</strong>数据分析支持添加/编辑指标，优化登录后回到原页面，统一项目内各类弹框样式。高级筛选避免请求参数超长改为 POST 传参。</p><p><strong>亮点：</strong>通过不同场景进入登录页，记录原页面路由(参数)，并在登录后进行返回。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.数据分析-新增【添加指标】功能</td><td>1.登录完成后仍定位原位置</td></tr><tr><td>2.数据分析-产品指标数据支持【编辑】功能</td><td>2.权限弹窗优化升级</td></tr><tr><td>3.工作台-动态表格新增【分享】功能</td><td>3.产品弹窗样式统一</td></tr><tr><td></td><td>4.动态表格-批量添加结构，接口优化</td></tr><tr><td></td><td>5.工作台-高级筛选接口优化</td></tr></tbody></table><h2 id="📣-v0-9-2022-01-27"><a href="#📣-v0-9-2022-01-27" class="headerlink" title="📣 v0.9(2022.01.27)"></a>📣 v0.9(2022.01.27)</h2><blockquote><p><strong>总结：</strong>简报/报告支持插入追踪企业，支持导出长图。领域活跃机构支持导出。公共 footer 样式调整，全局样式统一，优化首页加载性能。</p><p><strong>亮点：</strong>加载性能优化，添加图片懒加载，调整代码组织结构，将第三方组件打包进行优化，项目图片改用 icon 并精简图片。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.工作台的简报管理/报告管理-新增【企业追踪】模块</td><td>1.追踪分组和简报/报告追踪分组排序优化：按更新时间倒序</td><td>1.注册按钮连点问题修复</td></tr><tr><td>2.工作台的简报管理/报告管理-新增【导出长图】功能</td><td>2.简报/报告插入情报的评论信息处理</td><td>2.首页加载过慢性能优化</td></tr><tr><td>3.领域详情页的活跃机构-新增【导出】功能</td><td>3.时间段筛选默认开始时间为‘00:00:00’，结束时间为‘23:59:59’</td><td>3.工作台的简报/报告插入政策数据展示问题</td></tr><tr><td></td><td>4.公共 footer 区优化</td><td></td></tr><tr><td></td><td>5.其他样式调整</td></tr></tbody></table><h2 id="📣v0-8-2021-01-10"><a href="#📣v0-8-2021-01-10" class="headerlink" title="📣v0.8(2021.01.10)"></a>📣v0.8(2021.01.10)</h2><blockquote><p><strong>总结：</strong>添加企业追踪功能，添加生成动态表格功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.企业分析下企业列表-新增【企业追踪】功能</td><td>1.产品模块页面加载乱序问题</td></tr><tr><td>2.企业分析下企业列表-新增【生成动态表格】功能</td><td>2.产品图片模糊问题</td></tr><tr><td>3.工作台-新增【动态表格】功能</td></tr></tbody></table><h2 id="📣v0-7-2021-12-08"><a href="#📣v0-7-2021-12-08" class="headerlink" title="📣v0.7(2021.12.08)"></a>📣v0.7(2021.12.08)</h2><blockquote><p><strong>总结：</strong>添加首页、亿欧专家，企业筛选新增特色推荐，企业标签添加资质标签。登录界面改版。</p><p><strong>亮点：</strong>首页利用 CSS3 样式，添加各类特效。动图改用 webp 格式，缩小文件尺寸。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.新增【首页】模块</td><td>1.登录页面更新背景图</td><td>1.工作台下简报/报告插入饼环状图问题</td></tr><tr><td>2.行业分析模块-新增【亿欧专家】页面</td><td>2.企业标签新增展示「资质标签」</td><td>2.饼环状图下载图片不圆问题</td></tr><tr><td>3.企业分析下企业列表-新增【特色推荐】信息</td><td></td></tr></tbody></table><h2 id="📣v0-6-2-2021-11-24"><a href="#📣v0-6-2-2021-11-24" class="headerlink" title="📣v0.6.2(2021.11.24)"></a>📣v0.6.2(2021.11.24)</h2><blockquote><p><strong>总结：</strong>领域详情添加企业、事件、机构分析图表，新增产品指标图表详情，数据分析支持饼环图。全局 button 样式统一。</p><p><strong>亮点：</strong>新增领域分布图，基于 echart 矩形树图，拓展左键下钻右键跳转功能。丰富领域详情数据的展示形式，将列表数据转化为图表，使用户理解更直观。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>💗 新数据</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.领域详情页-新增企业、事件和机构的分析图表</td><td>1.数据分析-亿欧特色新增【企业分析】</td><td>1.行业分析下全部报告高级筛选增加「报告原文附件是否为空」选项</td></tr><tr><td>2.行业分析-新增产品指标图表详情页</td><td>2.数据分析-亿欧特色新增【交易分析】</td><td>2.全局操作 button 统一样式</td></tr><tr><td>3.数据分析下图表类型-新增饼环状图</td><td>3.数据分析-亿欧特色新增【机构分析】</td></tr></tbody></table><h2 id="📣v0-6-1-2021-11-03"><a href="#📣v0-6-1-2021-11-03" class="headerlink" title="📣v0.6.1(2021.11.03)"></a>📣v0.6.1(2021.11.03)</h2><blockquote><p><strong>总结：</strong>新增全部报告、报告图表、报告详情页。简报报告右侧数据支持关键词搜索，新增个人中心的权益说明。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th></tr></thead><tbody><tr><td>1.行业分析模块-新增【全部报告】页面</td><td>1.简报/报告右侧数据信息支持关键词检索</td></tr><tr><td>2.行业分析模块-新增【报告图表】页面</td><td>2.个人中心-账号权益期限说明</td></tr><tr><td>3.行业分析模块-新增【报告详情页】</td></tr></tbody></table><h2 id="📣v0-6-2021-10-20"><a href="#📣v0-6-2021-10-20" class="headerlink" title="📣v0.6(2021.10.20)"></a>📣v0.6(2021.10.20)</h2><blockquote><p><strong>总结：</strong>新增图表追踪功能，简报/报告支持插入指标图表、企业摘要。</p><p><strong>亮点：</strong>插入简报/报告的图表存在动态数据与静态数据两种情况，动态数据根据 id 进行实时渲染，静态为 base64 图片。导出 PDF 时首先生成 base64 图片再传递给后端进行处理。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.数据分析模块-新增图表【追踪】功能</td></tr><tr><td>2.工作台-新增【数据追踪】页面</td></tr><tr><td>3.工作台-新增【追踪图表详情页】</td></tr><tr><td>4.简报/报告插入数据维度-新增【指标图表】数据</td></tr><tr><td>5.简报/报告插入数据维度-新增【企业摘要】数据</td></tr></tbody></table><h2 id="📣v0-5-2021-09-30"><a href="#📣v0-5-2021-09-30" class="headerlink" title="📣v0.5(2021.09.30)"></a>📣v0.5(2021.09.30)</h2><blockquote><p><strong>总结：</strong>新增数据分析模块，指标的搜索过滤，支持指标图形化展示，数据点位列表展示，基础图形配置切换。</p><p><strong>亮点：</strong>组件化开发，组件拆分为指标目录、指标列表、筛选器、图表、最近浏览指标列表、数据列表。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【数据分析】模块</td></tr></tbody></table><h2 id="📣v0-4-1-2021-08-20"><a href="#📣v0-4-1-2021-08-20" class="headerlink" title="📣v0.4.1(2021.08.20)"></a>📣v0.4.1(2021.08.20)</h2><blockquote><p><strong>总结：</strong>新增外部专家列表、产业图谱页面、全局搜索功能。高级筛选筛组件支持搜索过滤。</p><p><strong>亮点：</strong>优化高级筛选选项，全部支持搜索过滤。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.行业分析模块-新增【外部专家】页面</td><td>1.企业列表高级筛选对应「企业画像」优化为树状结构</td><td>1.权益弹窗文案修复</td></tr><tr><td>2.行业分析模块-新增【产业图谱】页面</td><td>2.高级筛选对应关键词输入支持中英文逗号隔开</td><td>2.榜单数据清洗逻辑</td></tr><tr><td>3.新增【全局搜索】</td><td></td></tr></tbody></table><h2 id="📣v0-4-2021-08-06"><a href="#📣v0-4-2021-08-06" class="headerlink" title="📣v0.4(2021.08.06)"></a>📣v0.4(2021.08.06)</h2><blockquote><p><strong>总结：</strong>新增行业分析，全局各模块的用户权限体系，新增用户注册。丰富高级筛选选项，添加数值类型的介于筛选。</p><p><strong>亮点：</strong>使用 antd 树形组件，并对数据进行缓存，减少请求次数。丰富高级筛选选项类型(输入框、数字框、时间框、下拉框、树形下拉框、多选下拉等)。</p></blockquote><table><thead><tr><th>🔆 新功能</th><th>❤️‍🔥 优化</th><th>🐞 修复</th></tr></thead><tbody><tr><td>1.新增【行业分析】模块</td><td>1.高级筛选对于数值项新增「介于」</td><td>1.企业和事件列表，高级筛选「不为空」修复</td></tr><tr><td>2.新增全局用户权益体系</td><td></td><td>2.企业经营数据来源完善</td></tr><tr><td>3.新增用户注册页面</td><td></td><td></td></tr><tr><td>4.情报高级筛选增加「行业主题」维度</td><td></td></tr></tbody></table><h2 id="📣v0-3-2-2021-07-20"><a href="#📣v0-3-2-2021-07-20" class="headerlink" title="📣v0.3.2(2021.07.20)"></a>📣v0.3.2(2021.07.20)</h2><blockquote><p><strong>总结：</strong>新增企业榜单功能，支持保存榜单筛选项，进行定制榜单内容，支持导出企业列表、企业 logo 列表图片。</p><p><strong>亮点：</strong>使用 html2canvas 进行导出长图操作，解决导出图片空白问题，由于 html2canvas 与 antd 的 modal 组件冲突。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【企业榜单】功能</td></tr></tbody></table><h2 id="📣v0-3-1-2021-07-11"><a href="#📣v0-3-1-2021-07-11" class="headerlink" title="📣v0.3.1(2021.07.11)"></a>📣v0.3.1(2021.07.11)</h2><blockquote><p><strong>总结：</strong>拓展企业详情维度，展示更多企业信息。</p><p><strong>亮点：</strong>封装详情页 tab 分页业务功能组件，包含静态样式、权限判断，方便后续模块复用。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【企业详情页】模块</td></tr></tbody></table><h2 id="📣v0-3-2021-06-30"><a href="#📣v0-3-2021-06-30" class="headerlink" title="📣v0.3(2021.06.30)"></a>📣v0.3(2021.06.30)</h2><blockquote><p><strong>总结：</strong>新增企业列表、投融资事件列表，并封装对应的高级筛选组件。</p><p><strong>亮点：</strong>高级筛选组件，并编写支持筛选、保存、编辑、回填信息等一些列操作的公共方法，方便后期复用。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.企业分析模块-新增【全部企业列表】模块</td></tr><tr><td>2.企业分析模块-新增【企业投融资事件】模块</td></tr><tr><td>3.全部企业列表-新增【高级筛选】功能</td></tr></tbody></table><h2 id="📣v0-2-1-2021-06-15"><a href="#📣v0-2-1-2021-06-15" class="headerlink" title="📣v0.2.1(2021.06.15)"></a>📣v0.2.1(2021.06.15)</h2><blockquote><p><strong>总结：</strong>新增情报追踪功能，并添加情报详情的评论/@同组织员工的功能，并添加消息提醒。</p><p><strong>亮点：</strong>拓展 antd 评论组件，支持@同组织下的用户。拓展富文本编辑器插入情报功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.工作台模块-新增追踪列表</td></tr><tr><td>2.情报监测模块-新增【用户评论】功能</td></tr><tr><td>3.工作台模块-用户消息及红点</td></tr></tbody></table><h2 id="📣v0-2-2021-05-28"><a href="#📣v0-2-2021-05-28" class="headerlink" title="📣v0.2(2021.05.28)"></a>📣v0.2(2021.05.28)</h2><blockquote><p><strong>总结：</strong>新增简报管理模块，通过 wangEditer 富文本编辑器对文本进行编辑。</p><p><strong>亮点：</strong>拓展富文本编辑器目录功能。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【工作台】模块</td></tr><tr><td>2.工作台模块-新增简报管理模块</td></tr></tbody></table><h2 id="📣v0-1-2021-04-27"><a href="#📣v0-1-2021-04-27" class="headerlink" title="📣v0.1(2021.04.27)"></a>📣v0.1(2021.04.27)</h2><blockquote><p><strong>总结：</strong>确认项目选型，项目初始化，搭建项目结构。添加情报监测模块，新增用户中心模块。</p></blockquote><table><thead><tr><th>🔆 新功能</th></tr></thead><tbody><tr><td>1.新增【情报监测】模块</td></tr><tr><td>2.新增用户中心</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://data.iyiou.com/share/briefing/t2dbYZZ03m">亿欧数据版本记录</a></li><li><a href="https://data.iyiou.com/share/briefing/sTwN2aP01X">亿欧数据使用手册</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/XwopCj.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Lighthouse测试</title>
    <link href="https://www.gaotianyang.top/archives/202201056cf0f9a5/"/>
    <id>https://www.gaotianyang.top/archives/202201056cf0f9a5/</id>
    <published>2022-01-05T01:35:42.000Z</published>
    <updated>2022-01-06T09:19:11.578Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s4.ax1x.com/2022/01/05/TXBKnH.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Lighthouse-简介"><a href="#Lighthouse-简介" class="headerlink" title="Lighthouse 简介"></a>Lighthouse 简介</h2><p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。只要为 Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p><h2 id="Lighthouse-使用方式"><a href="#Lighthouse-使用方式" class="headerlink" title="Lighthouse 使用方式"></a>Lighthouse 使用方式</h2><p>目前官方提供了 4 种使用方式：</p><ul><li><a href="https://github.com/GoogleChrome/lighthouse#using-lighthouse-in-chrome-devtools">Chrome 开发者工具（DevTools）</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-chrome-extension">Chrome 扩展</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-cli">Node CLI</a></li><li><a href="https://github.com/GoogleChrome/lighthouse#using-the-node-module">Node Module</a></li></ul><p>以 Chrome 开发者工具为例，在 Lighthouse 面板下，用户可以配置测试平台、测试类目、限速方式等，可以方便快捷地发起一次测试。</p><p><img src="https://s4.ax1x.com/2022/01/06/TxXM7D.png" alt="Lighthouse"></p><h2 id="Lighthouse-测试报告"><a href="#Lighthouse-测试报告" class="headerlink" title="Lighthouse 测试报告"></a>Lighthouse 测试报告</h2><p>测试结束后，默认会生成 HTML 格式的报告，如下图所示，在报告中涵盖了 5 大类别（categories）的测试评分：</p><p><img src="https://s4.ax1x.com/2022/01/05/TXB84P.jpg" alt="categories"></p><p>每个类别都包含一系列的审计项（audit），针对审计项的运行结果，Lighthouse 会给出特定的优化建议与诊断结果帮助开发者有针对性地进行优化。</p><h3 id="First-Contentful-Paint-首次内容绘制-FCP"><a href="#First-Contentful-Paint-首次内容绘制-FCP" class="headerlink" title="First Contentful Paint 首次内容绘制(FCP)"></a>First Contentful Paint 首次内容绘制(FCP)</h3><p>首次内容绘制 (FCP) 是测量感知加载速度的一个以用户为中心的重要指标，因为该项指标会在用户首次在屏幕上看到任何内容时，<br>在页面加载时间轴中标记出相应的点，迅捷的 FCP 有助于让用户确信某些事情正在进行。</p><h4 id="什么是-FCP"><a href="#什么是-FCP" class="headerlink" title="什么是 FCP"></a>什么是 FCP</h4><p>首次内容绘制 (FCP) 指标测量页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。对于该指标，”内容”指的是文本、图像（包括背景图像）、<code>&lt;svg&gt;</code>元素或非白色的<code>&lt;canvas&gt;</code>元素。</p><p><img src="https://s4.ax1x.com/2022/01/05/TXBxUI.png" alt="FCP"></p><p>在上方的加载时间轴中，FCP 发生在第二帧，因为那是首批文本和图像元素在屏幕上完成渲染的时间点。</p><p>您会注意到，虽然部分内容已完成渲染，但并非所有内容都已经完成渲染。<br>这是首次内容绘制 (FCP) 与<em>Largest Contentful Paint 最大内容绘制 (LCP)</em>（旨在测量页面的主要内容何时完成加载）之间的重要区别。</p><h4 id="如何改进-FCP"><a href="#如何改进-FCP" class="headerlink" title="如何改进 FCP"></a>如何改进 FCP</h4><p><a href="https://web.dev/i18n/zh/fcp/">常见解决方案:</a></p><ul><li>消除阻塞渲染的资源</li><li>缩小 CSS</li><li>移除未使用的 CSS</li><li>预连接到所需的来源</li><li>减少服务器响应时间 (TTFB)</li><li>避免多个页面重定向</li><li>预加载关键请求</li><li>避免巨大的网络负载</li><li>使用高效的缓存策略服务静态资产</li><li>避免 DOM 过大</li><li>最小化关键请求深度</li><li>确保文本在网页字体加载期间保持可见</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Time-to-Interactive-可交互时间-TTI"><a href="#Time-to-Interactive-可交互时间-TTI" class="headerlink" title="Time to Interactive 可交互时间(TTI)"></a>Time to Interactive 可交互时间(TTI)</h3><p>可交互时间 (TTI) 是测量加载响应度的重要实验室指标。该指标有助于识别看起来具备交互性但实际上并非如此的页面情况。迅捷的 TTI 有助于确保页面的有效性。</p><h4 id="什么是-TTI"><a href="#什么是-TTI" class="headerlink" title="什么是 TTI"></a>什么是 TTI</h4><p>TTI 指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。</p><p>如需根据网页的性能跟踪计算 TTI，请执行以下步骤：</p><ul><li>先进行 First Contentful Paint 首次内容绘制 (FCP)。</li><li>沿时间轴正向搜索时长至少为 5 秒的安静窗口，其中，安静窗口的定义为：没有长任务且不超过两个正在处理的网络 GET 请求。</li><li>沿时间轴反向搜索安静窗口之前的最后一个长任务，如果没有找到长任务，则在 FCP 步骤停止执行。</li><li>TTI 是安静窗口之前最后一个长任务的结束时间（如果没有找到长任务，则与 FCP 值相同）。</li></ul><p>下图将有助于您更直观地理解上述步骤：</p><p><img src="https://web-dev.imgix.net/image/admin/WZM0n4aXah67lEyZugOT.svg" alt="显示 TTI 计算方式的页面加载时间轴"></p><p>长久以来，开发者为了追求更快的渲染速度而对页面进行了优化，但有时，这会以牺牲 TTI 为代价。</p><p>服务器端渲染 (SSR) 等技术可能会导致页面看似具备交互性（即，链接和按钮在屏幕上可见），<br>但实际上并不能进行交互，因为主线程被阻塞或是因为控制这些元素的 JavaScript 代码尚未完成加载。</p><p>当用户尝试与看似具备交互性但实际上并非如此的页面进行交互时，他们可能会有如下两种反应：</p><ul><li>在最好的情况下，他们会因为页面响应缓慢而感到恼火。</li><li>在最坏的情况下，他们会认为页面已损坏，因此很可能直接离开。他们甚至可能对您的品牌价值丧失信心或信任。</li></ul><p>为了避免这个问题，请尽一切努力将 FCP 和 TTI 之间的差值降至最低。如果两者在某些情况下确实存在明显差异，请通过视觉指示器清楚表明页面上的组件还无法进行交互。</p><h4 id="如何改进-TTI"><a href="#如何改进-TTI" class="headerlink" title="如何改进 TTI"></a>如何改进 TTI</h4><p><a href="https://web.dev/i18n/zh/tti/">常见解决方案:</a></p><ul><li>缩小 JavaScript</li><li>预连接到所需的来源</li><li>预加载关键请求</li><li>减少第三方代码的影响</li><li>最小化关键请求深度</li><li>减少 JavaScript 执行时间</li><li>最小化主线程工作</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Speed-Index-速度指数"><a href="#Speed-Index-速度指数" class="headerlink" title="Speed Index 速度指数"></a>Speed Index 速度指数</h3><p>速度指数是 Lighthouse 报告的“性能”部分中跟踪的六个指标之一。每个指标都捕获页面加载速度的某些方面。</p><p>Lighthouse 以秒为单位显示速度指数：</p><p><img src="https://s4.ax1x.com/2022/01/06/TzSAQs.png" alt="Speed Index"></p><h4 id="什么是速度指数"><a href="#什么是速度指数" class="headerlink" title="什么是速度指数"></a>什么是速度指数</h4><p>速度指数衡量页面加载期间内容的视觉显示速度。 Lighthouse 首先捕获浏览器中页面加载的视频，并计算帧之间的视觉进展。<br>Lighthouse 然后使用 Speedline Node.js 模块生成速度指数分数。</p><h4 id="如何改进速度指数"><a href="#如何改进速度指数" class="headerlink" title="如何改进速度指数"></a>如何改进速度指数</h4><p><a href="https://web.dev/speed-index/">常见解决方案:</a></p><ul><li>最小化主线程工作</li><li>减少 JavaScript 执行时间</li><li>确保文本在字体文件加载期间保持可见</li></ul><h3 id="Total-Blocking-Time-总阻塞时间-TBT"><a href="#Total-Blocking-Time-总阻塞时间-TBT" class="headerlink" title="Total Blocking Time 总阻塞时间(TBT)"></a>Total Blocking Time 总阻塞时间(TBT)</h3><p>总阻塞时间 (TBT) 是测量加载响应度的重要实验室指标，因为该项指标有助于量化在页面交互性变为可靠前，不可交互程度的严重性，较低的 TBT 有助于确保页面的可用性。</p><h4 id="什么是-TBT"><a href="#什么是-TBT" class="headerlink" title="什么是 TBT"></a>什么是 TBT</h4><p>总阻塞时间 (TBT) 指标测量 First Contentful Paint 首次内容绘制 (FCP)与 Time to Interactive 可交互时间 (TTI)之间的总时间，<br>这期间，主线程被阻塞的时间过长，无法作出输入响应。</p><p>每当出现长任务（在主线程上运行超过 50 毫秒的任务）时，主线程都被视作”阻塞状态”。我们说主线程处于”阻塞状态”是因为浏览器无法中断正在进行的任务。<br>因此，如果用户在某个长任务运行期间与页面进行交互，那么浏览器必须等到任务完成后才能作出响应。</p><p>如果任务时长足够长（例如超过 50 毫秒），那么用户很可能会注意到延迟，并认为页面缓慢或卡顿。</p><p>某个给定长任务的阻塞时间是该任务持续时间超过 50 毫秒的部分。一个页面的总阻塞时间是在 FCP 和 TTI 之间发生的每个长任务的阻塞时间总和。</p><p>例如，请看以下这张页面加载期间浏览器主线程的图表：</p><p><img src="https://web-dev.imgix.net/image/admin/clHG8Yv239lXsGWD6Iu6.svg" alt="主线程上的任务时间轴"></p><p>上方的时间轴上有五个任务，其中三个是长任务，因为这些任务的持续时间超过 50 毫秒。下图显示了各个长任务的阻塞时间：</p><p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/xKxwKagiz8RliuOI2Xtc.svg" alt="显示阻塞时间的主线程任务时间轴"></p><p>因此，虽然在主线程上运行任务的总时间为 560 毫秒，但其中只有 345 毫秒被视为阻塞时间。</p><table><thead><tr><th></th><th style="text-align:center">任务持续时间</th><th style="text-align:center">任务阻塞时间</th></tr></thead><tbody><tr><td>任务一</td><td style="text-align:center">250 毫秒</td><td style="text-align:center">200 毫秒</td></tr><tr><td>任务二</td><td style="text-align:center">90 毫秒</td><td style="text-align:center">40 毫秒</td></tr><tr><td>任务三</td><td style="text-align:center">35 毫秒</td><td style="text-align:center">0 毫秒</td></tr><tr><td>任务四</td><td style="text-align:center">30 毫秒</td><td style="text-align:center">0 毫秒</td></tr><tr><td>任务五</td><td style="text-align:center">155 毫秒</td><td style="text-align:center">105 毫秒</td></tr><tr><td>总阻塞时间</td><td style="text-align:center"></td><td style="text-align:center">345 毫秒</td></tr></tbody></table><h4 id="TBT-与-TTI-有什么关系"><a href="#TBT-与-TTI-有什么关系" class="headerlink" title="TBT 与 TTI 有什么关系"></a>TBT 与 TTI 有什么关系</h4><p>TBT 是 TTI 的一个出色的配套指标，因为 TBT 有助于量化在页面交互性变为可靠前，不可交互程度的严重性。</p><p>TTI 会在主线程至少有五秒钟没有长任务时，认为页面具备”可靠交互性”。也就是说，<br>分布在 10 秒钟里的三个 51 毫秒长的任务与单个 10 秒长的任务对 TTI 的影响是相同的，但对于试图与页面进行交互的用户来说，这两种情况给人的感觉是截然不同的。</p><p>在第一种情况下，三个 51 毫秒的任务的 TBT 为 3 毫秒。而单个 10 秒长的任务的 TBT 为 9950 毫秒。第二种情况下较大的 TBT 值对较差的体验进行了量化。</p><h4 id="如何改进-TBT"><a href="#如何改进-TBT" class="headerlink" title="如何改进 TBT"></a>如何改进 TBT</h4><p><a href="https://web.dev/i18n/zh/tbt/">常见解决方案:</a></p><ul><li>减少第三方代码的影响</li><li>减少 JavaScript 执行时间</li><li>最小化主线程工作</li><li>保持较低的请求数和较小的传输大小</li></ul><h3 id="Largest-Contentful-Paint-最大内容绘制-LCP"><a href="#Largest-Contentful-Paint-最大内容绘制-LCP" class="headerlink" title="Largest Contentful Paint 最大内容绘制(LCP)"></a>Largest Contentful Paint 最大内容绘制(LCP)</h3><p>最大内容绘制 (LCP) 是测量感知加载速度的一个以用户为中心的重要指标，因为该项指标会在页面的主要内容基本加载完成时，<br>在页面加载时间轴中标记出相应的点，迅捷的 LCP 有助于让用户确信页面是有效的。</p><p>长久以来，对于网页开发者来说，测量网页主要内容的加载速度和内容对用户的显示速度一直是一个挑战。</p><p>诸如 load（加载）或 DOMContentLoaded（DOM 内容加载完毕）这样的旧有指标并不是很好，因为这些指标不一定与用户在屏幕上看到的内容相对应。<br>而像 First Contentful Paint 首次内容绘制 (FCP)这类以用户为中心的较新性能指标只会捕获加载体验最开始的部分。<br>如果某个页面显示的是一段启动画面或加载指示，那么这些时刻与用户的关联性并不大。</p><p>我们以往推荐过一些性能指标，例如 First Meaningful Paint 首次有效绘制 (FMP)和 Speed Index 速度指数 (SI) （两个指标都包含在灯塔工具中），<br>这些指标有助于捕获到更多初始绘制后的加载体验，但这些指标十分复杂、难以解释，而且常常出错，也就意味着这些指标仍然无法识别出页面主要内容加载完毕的时间点。</p><p>有时候简胜于繁。根据 W3C Web 性能工作组的讨论以及 Google 进行的研究，我们发现更准确地测量页面主要内容加载完毕的时间点的方法是查看最大元素完成渲染的时间点。</p><h4 id="什么是-LCP"><a href="#什么是-LCP" class="headerlink" title="什么是 LCP"></a>什么是 LCP</h4><p>最大内容绘制 (LCP) 指标会根据页面首次开始加载的时间点来报告可视区域内可见的最大图像或文本块完成渲染的相对时间。</p><p><img src="https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/elqsdYqQEefWJbUM2qMO.svg" alt="良好的 LCP 值为 2.5 秒，较差的值大于 4.0 秒，两者之间的任何东西都需要改进"></p><h4 id="如何改进-LCP"><a href="#如何改进-LCP" class="headerlink" title="如何改进 LCP"></a>如何改进 LCP</h4><p>LCP 主要受四个因素影响：</p><ul><li>缓慢的服务器响应速度</li><li>JavaScript 和 CSS 渲染阻塞</li><li>资源加载时间</li><li>客户端渲染</li></ul><p><a href="https://web.dev/i18n/zh/lcp/">常见解决方案:</a></p><ul><li>使用 PRPL 模式做到即时加载</li><li>优化关键渲染路径</li><li>优化您的 CSS</li><li>优化您的图像</li><li>优化网页字体</li><li>优化您的 JavaScript（针对客户端渲染的网站）</li></ul><h3 id="Cumulative-Layout-Shift-累积布局偏移-CLS"><a href="#Cumulative-Layout-Shift-累积布局偏移-CLS" class="headerlink" title="Cumulative Layout Shift 累积布局偏移 (CLS)"></a>Cumulative Layout Shift 累积布局偏移 (CLS)</h3><p>重要词汇: 累积布局偏移 (CLS) 是测量视觉稳定性的一个以用户为中心的重要指标，因为该项指标有助于量化用户经历意外布局偏移的频率，较低的 CLS 有助于确保一个页面是令人愉悦的。</p><p>您是否曾经历过在网上阅读一篇文章，结果页面上的某些内容突然发生改变？文本在毫无预警的情况下移位，导致您找不到先前阅读的位置。<br>或者更糟糕的情况：您正要点击一个链接或一个按钮，但在您手指落下的瞬间，诶？链接移位了，结果您点到了别的东西！</p><p>大多数情况下，这些体验只是令人恼火，但在某些情况下，却可能带来真正的破坏。</p><p><img src="https://s4.ax1x.com/2022/01/06/TzmqMV.gif" alt="截屏视频说明了布局不稳定性会对用户产生怎样的负面影响。"></p><p>页面内容的意外移动通常是由于异步加载资源，或者动态添加 DOM 元素到页面现有内容的上方。<br>罪魁祸首可能是未知尺寸的图像或视频、实际渲染后比后备字体更大或更小的字体，或者是动态调整自身大小的第三方广告或小组件。</p><p>让这个问题变得更加棘手的是，网站在开发环境中的运作方式通常与用户在网站上的实际体验大不相同。<br>个性化或第三方内容在开发环境中的表现通常与其在实际情况中的表现不同，测试图像通常已经在开发者的浏览器缓存中了，并且本地调用 API 的速度一般非常快，几乎察觉不到延迟。</p><p>累积布局偏移 (CLS) 指标通过测量真实用户体验中发生偏移的频率来帮助您解决这一问题。</p><h4 id="什么是-CLS"><a href="#什么是-CLS" class="headerlink" title="什么是 CLS"></a>什么是 CLS</h4><p>CLS 测量整个页面生命周期内发生的所有意外布局偏移中最大一连串的布局偏移分数。</p><p>每当一个可见元素的位置从一个已渲染帧变更到下一个已渲染帧时，就发生了布局偏移 。（有关单次布局偏移分数计算方式的详细信息，请参阅下文。）</p><p>一连串的布局偏移，也叫会话窗口，是指一个或多个快速连续发生的单次布局偏移，每次偏移相隔的时间少于 1 秒，且整个窗口的最大持续时长为 5 秒。</p><p>最大的一连串是指窗口内所有布局偏移累计分数最大的会话窗口。</p><p><img src="https://s4.ax1x.com/2022/01/06/TznXlt.gif" alt="会话窗口示例。蓝色竖条代表每个单次布局偏移的分数。"></p><h4 id="如何改进-CLS"><a href="#如何改进-CLS" class="headerlink" title="如何改进 CLS"></a>如何改进 CLS</h4><p><a href="https://web.dev/i18n/zh/cls/">常见解决方案:</a></p><ul><li><strong>始终在您的图像和视频元素上包含尺寸属性，或者通过使用 CSS 长宽比容器之类的方式预留所需的空间。</strong>这种方法可以确保浏览器能够在加载图像期间在文档中分配正确的空间大小。请注意，您还可以使用 unsized-media 功能策略在支持功能策略的浏览器中强制执行此行为。</li><li><strong>除非是对用户交互做出响应，否则切勿在现有内容的上方插入内容。</strong>这样能够确保发生的任何布局偏移都在预期之内。</li><li><strong>首选转换动画，而不是触发布局偏移的属性动画。</strong>动画过渡的目标是提供状态与状态之间的上下文连续性。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://web.dev/">web.dev</a></li><li><a href="https://zhuanlan.zhihu.com/p/91365316">Lighthouse 测试内幕</a></li><li><a href="https://blog.csdn.net/terrychinaz/article/details/113870644">LightHouse 是什么？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s4.ax1x.com/2022/01/05/TXBKnH.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="chrome" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/chrome/"/>
    
    <category term="html" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/chrome/html/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="html" scheme="https://www.gaotianyang.top/tags/html/"/>
    
    <category term="chrome" scheme="https://www.gaotianyang.top/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>http-server使用</title>
    <link href="https://www.gaotianyang.top/archives/2021120964e0b1f7/"/>
    <id>https://www.gaotianyang.top/archives/2021120964e0b1f7/</id>
    <published>2021-12-09T01:33:49.000Z</published>
    <updated>2021-12-09T04:02:45.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2021/12/09/ofeKKK.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在很多情况下，需要在本地开启 http 服务器来测试。所以就需要一个简单的省事好用的 http 服务器。<br>以前的时候，都是使用 php 的本地环境，但是，自从学了 nodejs，发现了 http-server 好东西。<br>不用配置直接在当前文件夹内打开 cmd，就能够使用，简单易用，轻松方便。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>http-server</code> 是一个简单的零配置命令行 http 服务器。<br>它对于生产使用来说是足够强大的，但它的测试，本地开发和学习足够简单易用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装通过 npm 进行全局安装</p><p><code>npm install http-server -g</code></p><p>这将 <code>http-server</code> 全局安装，以便它可以从命令行运行。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>打开 cmd，移动进入当前文件夹，在当前文件夹内输入命令即可</p><p><code>http-server [path] [options]</code></p><p><code>[path]</code>默认为<code>./public</code> (若文件夹存在)，否则为<code>./</code>。</p><p>现在，您可以访问 <code>http://localhost:8080</code> 来查看您的服务器</p><h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><table><thead><tr><th>命令</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>-p</code> 或 <code>--port</code></td><td>要使用的端口</td><td>8080</td></tr><tr><td><code>-a</code></td><td>要使用的地址</td><td>0.0.0.0</td></tr><tr><td><code>-d</code></td><td>显示目录列表</td><td><code>true</code></td></tr><tr><td><code>-i</code></td><td>显示自动索引</td><td><code>true</code></td></tr><tr><td><code>-g</code> 或<code>--gzip</code></td><td>启用时，它将用于<code>./public/some-file.js.gz</code> 代替<code>./public/some-file.js</code>zip 压缩版本的文件，并且该请求接受 gzip 编码。如果 brotli 也被启用，它会首先尝试服务 brotli。</td><td><code>false</code></td></tr><tr><td><code>-b</code> 或<code>--brotli</code></td><td>启用时，它将用于<code>./public/some-file.js.br</code> 代替<code>./public/some-file.js</code>zip 压缩版本的文件，并且该请求接受 br 编码。如果 gzip 也被启用，它会首先尝试服务 brotli。</td><td><code>false</code></td></tr><tr><td><code>-e</code> 或<code>--ext</code></td><td>默认文件扩展名（如果没有提供）（默认为’html’）</td><td><code>html</code></td></tr><tr><td><code>-s</code> 或<code>--silent</code></td><td>从输出中抑制日志消息</td><td></td></tr><tr><td><code>--cors</code></td><td>通过 <code>Access-Control-Allow-Origin</code> 标题启用 CORS</td><td></td></tr><tr><td><code>-o</code> [path]</td><td>启动服务器后打开浏览器窗口 例如：<code>-o /other/dir/</code></td><td></td></tr><tr><td><code>-c</code></td><td>设置缓存控制 max-age 头的缓存时间（以秒为单位），例如-c10 10 秒。要禁用缓存，请使用-c-1。</td><td><code>3600</code></td></tr><tr><td><code>-U</code> 或<code>--utc</code></td><td>在日志消息中使用 UTC 时间格式。</td><td></td></tr><tr><td><code>--log-ip</code></td><td>启用客户端 IP 地址的日志记录</td><td><code>false</code></td></tr><tr><td><code>-P</code> 或<code>--proxy</code></td><td>将所有无法在本地解析到给定 url 的请求代理。例如：<code>-P http://someurl.com</code></td><td></td></tr><tr><td><code>--proxy-options</code></td><td>使用嵌套的虚线对象传递代理选项。例如：<code>--proxy-options.secure false</code></td><td></td></tr><tr><td><code>--username</code></td><td>用于基本身份验证的用户名</td><td></td></tr><tr><td><code>--password</code></td><td>基本认证密码</td><td></td></tr><tr><td><code>-S</code> 或<code>--ssl</code></td><td>启用 https。</td><td><code>false</code></td></tr><tr><td><code>-C</code> 或<code>--certssl</code></td><td>证书文件的路径</td><td><code>cert.pem</code></td></tr><tr><td><code>-K</code> 或<code>--keyssl</code></td><td>密钥文件的路径</td><td><code>key.pem</code></td></tr><tr><td><code>-r</code> 或<code>--robots</code></td><td>提供一个/robots.txt（其内容默认为’User-agent：* \ nDisallow：/‘）</td><td><code>false</code></td></tr><tr><td><code>--no-dotfiles</code></td><td>不显示点文件</td><td></td></tr><tr><td><code>--mimetypes</code></td><td>自定义 mimetype 定义的 .types 文件的路径</td><td></td></tr><tr><td><code>-h</code> 或<code>--help</code></td><td>打印此列表并退出。</td><td></td></tr><tr><td><code>-v</code> 或<code>--version</code></td><td>打印版本并退出。</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_30100043/article/details/73105362">使用 http-server 零配置在本地开启 http 服务器</a></li><li><a href="https://www.npmjs.com/package/http-server">npm http-server</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2021/12/09/ofeKKK.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nodejs" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nodejs/"/>
    
    <category term="http服务器" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/nodejs/http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="nodejs" scheme="https://www.gaotianyang.top/tags/nodejs/"/>
    
    <category term="http服务器" scheme="https://www.gaotianyang.top/tags/http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>整数反转</title>
    <link href="https://www.gaotianyang.top/archives/20211121e3e2e8e/"/>
    <id>https://www.gaotianyang.top/archives/20211121e3e2e8e/</id>
    <published>2021-11-21T02:01:29.000Z</published>
    <updated>2021-11-25T02:09:24.137Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/11/25/oF0jxI.jpg" alt="首屏图"></p><a id="more"></a><h2 id="LeetCode-题目总结-整数反转"><a href="#LeetCode-题目总结-整数反转" class="headerlink" title="LeetCode 题目总结 - 整数反转"></a>LeetCode 题目总结 - 整数反转</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围  [−2<sup>31</sup>,  2<sup>31</sup> − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><blockquote><p>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</p></blockquote><h4 id="解法一-数组翻转法"><a href="#解法一-数组翻转法" class="headerlink" title="解法一: 数组翻转法"></a>解法一: 数组翻转法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊值处理</span></span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">2147483647</span> || x &lt; <span class="number">-2147483648</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数值</span></span><br><span class="line">  <span class="keyword">let</span> flag = x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">let</span> str = x &gt; <span class="number">0</span> ? x.toString() : (-x).toString();</span><br><span class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 转化</span></span><br><span class="line">  num = arr.reverse().join(<span class="string">&#x27;&#x27;</span>) * flag;</span><br><span class="line">  <span class="comment">// 校验转化值大小</span></span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">2147483647</span> || num &lt; <span class="number">-2147483648</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解法二-模运算转换法"><a href="#解法二-模运算转换法" class="headerlink" title="解法二: 模运算转换法"></a>解法二: 模运算转换法</h4><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>首先我们想一下，怎么去反转一个整数？<br>用栈？或者把整数变成字符串，再去反转这个字符串？<br>这两种方式是可以，但并不好。实际上我们只要能拿到这个整数的 <strong>末尾数字</strong> 就可以了。</p><p>以 <code>12345</code> 为例，先拿到 <code>5</code>，再拿到 <code>4</code>，之后是 <code>3</code>，<code>2</code>，<code>1</code>，<br>我们按这样的顺序就可以反向拼接处一个数字了，也就能达到 <strong>反转</strong> 的效果。<br>怎么拿末尾数字呢？好办，用取模运算就可以了</p><p><img src="https://z3.ax1x.com/2021/11/24/oP0Bgx.jpg" alt="1"></p><ol><li>将 <code>12345 % 10</code> 得到 5，之后将 <code>12345 / 10</code></li><li>将 <code>1234 % 10</code> 得到 4，再将 <code>1234 / 10</code></li><li>将 <code>123 % 10</code> 得到 3，再将 <code>123 / 10</code></li><li>将 <code>12 % 10</code> 得到 2，再将 <code>12 / 10</code></li><li>将 <code>1 % 10</code> 得到 1，再将 <code>1 / 10</code></li></ol><p>这么看起来，一个循环就搞定了，循环的判断条件是 x&gt;0<br>但这样不对，因为忽略了 <strong>负数</strong></p><p>循环的判断条件应该是 <code>while(x!=0)</code>，无论正数还是负数，按照上面不断的<code>/10</code> 这样的操作，最后都会变成 0，所以判断终止条件就是<code>!=0</code><br>有了取模和除法操作，对于像 <code>12300</code> 这样的数字，也可以完美的解决掉了。</p><p>看起来这道题就这么解决了，但请注意，题目上还有这么一句</p><blockquote><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为  [−2<sup>31</sup>, 2<sup>31</sup> − 1]。</p></blockquote><p>也就是说我们不能用 <code>long</code> 存储最终结果，而且有些数字可能是合法范围内的数字，但是<strong>反转</strong>过来就超过范围了。<br>假设有 <code>1147483649</code> 这个数字，它是小于最大的 32 位整数 <code>2147483647</code> 的，但是将这个数字反转过来后就变成了 <code>9463847411</code>，这就比最大的 32 位整数还要大了，这样的数字是没法存到 <code>int</code> 里面的，所以肯定要返回 <code>0</code>(溢出了)。</p><p>复杂度分析</p><ul><li>时间复杂度 O(log∣x∣)。翻转的次数即 xx 十进制的位数。</li><li>空间复杂度 O(1)</li></ul><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 每次取末尾数字</span></span><br><span class="line">    <span class="keyword">const</span> digit = x % <span class="number">10</span>;</span><br><span class="line">    x = ~~(x / <span class="number">10</span>);</span><br><span class="line">    rev = rev * <span class="number">10</span> + digit;</span><br><span class="line">    <span class="comment">// 判断是否 大于 最大32位整数或 小于 最小32位整数</span></span><br><span class="line">    <span class="keyword">if</span> (rev &lt; <span class="built_in">Math</span>.pow(<span class="number">-2</span>, <span class="number">31</span>) || rev &gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></li><li><a href="https://segmentfault.com/a/1190000003731938">JS 按位非运算符(<code>~</code>)及双非(<code>~~</code>)的使用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/11/25/oF0jxI.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/LeetCode/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/tags/LeetCode/"/>
    
    <category term="每日一练" scheme="https://www.gaotianyang.top/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
    <category term="简单" scheme="https://www.gaotianyang.top/tags/%E7%AE%80%E5%8D%95/"/>
    
    <category term="整数反转" scheme="https://www.gaotianyang.top/tags/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>Z字形变换</title>
    <link href="https://www.gaotianyang.top/archives/20211101e3e2e8e/"/>
    <id>https://www.gaotianyang.top/archives/20211101e3e2e8e/</id>
    <published>2021-11-01T11:59:46.000Z</published>
    <updated>2021-11-25T02:11:19.141Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/11/02/IikjQ1.jpg" alt="首屏图"></p><a id="more"></a><h2 id="LeetCode-题目总结-Z-字形变换"><a href="#LeetCode-题目总结-Z-字形变换" class="headerlink" title="LeetCode 题目总结 - Z 字形变换"></a>LeetCode 题目总结 - Z 字形变换</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行  Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code>  行数为 <code>3</code> 时，排列如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释：</span><br><span class="line">P     I     N</span><br><span class="line">A   L S   I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;A&quot;, numRows = 1</span><br><span class="line">输出：&quot;A&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由英文字母（小写和大写）、<code>&#39;,&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li><li><code>1 &lt;= numRows &lt;= 1000</code></li></ul><h4 id="解法一-公式枚举法"><a href="#解法一-公式枚举法" class="headerlink" title="解法一: 公式枚举法"></a>解法一: 公式枚举法</h4><ul><li>时间复杂度 O(n<sup>3</sup>)</li><li>空间复杂度 O(1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取%的值</span></span><br><span class="line">    <span class="keyword">let</span> m = i % (<span class="number">2</span> * numRows - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; numRows) &#123;</span><br><span class="line">      arr[m].push(s.charAt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[<span class="number">2</span> * (numRows - <span class="number">1</span>) - m].push(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">      str += arr[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回新数据</span></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取%的值</span></span><br><span class="line">    <span class="keyword">let</span> m = i % (<span class="number">2</span> * numRows - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (m &lt; numRows) &#123;</span><br><span class="line">      arr[m].push(s.charAt(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[<span class="number">2</span> * (numRows - <span class="number">1</span>) - m].push(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二维数组转一维</span></span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  newArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  str = newArr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 返回新数据</span></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解法二-标识法"><a href="#解法二-标识法" class="headerlink" title="解法二: 标识法"></a>解法二: 标识法</h4><ul><li><p>题目理解</p><ul><li>字符串 <code>s</code> 是以 Z 字形为顺序存储的字符串，目标是按行打印。</li><li>设 <code>numRows</code> 行字符串分别为 S1,S2,…,Sn，则容易发现：按顺序遍历字符串 <code>s</code> 时，每个字符 <code>c</code> 在 Z 字形中对应的 <strong>行索引</strong> 先从 S1 增大至 Sn，再从 Sn 减小至 S1 …… 如此反复。</li><li>因此，解决方案为：模拟这个行索引的变化，在遍历 <code>s</code> 中把每个字符填到正确的行 <code>res[i]</code> 。</li></ul></li><li><p>算法流程 按顺序遍历字符串 <code>s</code>；</p><ul><li><code>res[i] += c</code>： 把每个字符 <code>c</code> 填入对应行 Si；</li><li><code>i += flag</code>： 更新当前字符 <code>c</code> 对应的行索引；</li><li><code>flag = - flag</code>： 在达到 Z 字形转折点时，执行反向。</li></ul></li><li><p>复杂度分析：</p><ul><li>时间复杂度 O(N)O(N) ：遍历一遍字符串 <code>s</code>；</li><li>空间复杂度 O(N)O(N) ：各行字符串共占用 O(N)O(N) 额外空间。</li></ul></li></ul><p><img src="https://z3.ax1x.com/2021/11/15/Ig46G6.gif" alt="z形变换"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span> (<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 特殊情况处理</span></span><br><span class="line">  <span class="keyword">if</span> (numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">    arr[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// 按结构推入数据</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    arr[index].push(s.charAt(i));</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span> || index === numRows - <span class="number">1</span>) flag = -flag;</span><br><span class="line">    index += flag;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二维数组转一维</span></span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  newArr = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 拼接数据</span></span><br><span class="line">  str = newArr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/zigzag-conversion/">Z 字形变换</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/11/02/IikjQ1.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/LeetCode/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/tags/LeetCode/"/>
    
    <category term="Z字形变换" scheme="https://www.gaotianyang.top/tags/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
    
    <category term="中等" scheme="https://www.gaotianyang.top/tags/%E4%B8%AD%E7%AD%89/"/>
    
    <category term="每日一练" scheme="https://www.gaotianyang.top/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>常用轮子汇总</title>
    <link href="https://www.gaotianyang.top/archives/20211025c746f65b/"/>
    <id>https://www.gaotianyang.top/archives/20211025c746f65b/</id>
    <published>2021-10-25T10:28:19.000Z</published>
    <updated>2021-10-26T04:08:41.345Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/10/26/55cbE8.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中，一直听到有人讨论是不是需要重复造轮子，我觉得有能力的人，轮子得造。<br>但是往往开发周期短，轮子的使用节省的时间可以更好的去理解业务，使用到业务中,<br>也能发现轮子的利弊，发现了问题可以造更好的轮子。<br>这是我开发中常用到的轮子。也欢迎大家把开发中用到的非常好的轮子在评论区评论。</p><h2 id="UI-组件库"><a href="#UI-组件库" class="headerlink" title="UI 组件库"></a>UI 组件库</h2><ul><li><a href="https://element.eleme.cn/#/zh-CN">element</a></li><li><a href="https://youzan.github.io/vant/#/zh-CN/">vant</a></li><li><a href="https://www.iviewui.com/">View UI</a></li><li><a href="https://ant.design/index-cn">ant design</a></li><li><a href="https://vux.li/#/">VUX</a></li></ul><p>没用过</p><ul><li><a href="https://www.naiveui.com/zh-CN/light">Naive UI</a></li><li><a href="https://mint-ui.github.io/#!/zh-cn">Mint UI</a></li><li><a href="http://getskeleton.com/">getskeleton</a></li></ul><h2 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h2><ul><li><a href="https://animate.style/">Animate.css</a></li></ul><h2 id="滚动插件"><a href="#滚动插件" class="headerlink" title="滚动插件"></a>滚动插件</h2><ul><li><a href="http://www.mescroll.com/api.html">mescroll.js</a></li></ul><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><ul><li><a href="https://www.swiper.com.cn/">swiper</a></li></ul><h2 id="满屏滚动"><a href="#满屏滚动" class="headerlink" title="满屏滚动"></a>满屏滚动</h2><ul><li><a href="https://github.com/alvarotrigo/fullPage.js">fullPage.js</a></li></ul><h2 id="函数库"><a href="#函数库" class="headerlink" title="函数库"></a>函数库</h2><ul><li><a href="https://www.lodashjs.com/">lodash.js</a></li><li><a href="https://dayjs.fenxianglu.cn/">day.js</a></li><li><a href="http://momentjs.cn/">momentjs</a></li><li><a href="https://github.com/hustcc/timeago.js">timeago.js</a></li></ul><h2 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h2><ul><li><a href="https://github.com/ckpack/vue-color">vue-color</a></li></ul><h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><ul><li><a href="https://www.itxst.com/vue-draggable/tutorial.html">vue-draggable</a></li></ul><p>react</p><ul><li><a href="https://www.npmjs.com/package/react-moveable">react-moveable</a></li></ul><h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><ul><li><a href="https://www.npmjs.com/package/qrcodejs2">qrcodejs2</a></li><li><a href="https://www.npmjs.com/package/vue-qr">vue-qr</a></li></ul><h2 id="图片剪裁"><a href="#图片剪裁" class="headerlink" title="图片剪裁"></a>图片剪裁</h2><ul><li><a href="https://github.com/xyxiao001/vue-cropper">vue-cropper</a></li></ul><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><ul><li><a href="https://www.npmjs.com/package/vue-lazyload">vue-lazyload</a></li></ul><h2 id="PDF-预览"><a href="#PDF-预览" class="headerlink" title="PDF 预览"></a>PDF 预览</h2><ul><li><a href="https://www.npmjs.com/package/vue-pdf">vue-pdf</a></li></ul><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><ul><li><a href="https://github.com/zenorocha/clipboard.js">clipboard.js</a></li></ul><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><ul><li><a href="https://www.npmjs.com/package/vue-easy-print">vue-easy-print</a></li></ul><h2 id="html-转为图片"><a href="#html-转为图片" class="headerlink" title="html 转为图片"></a>html 转为图片</h2><ul><li><a href="https://html2canvas.hertzen.com/">html2canvas</a></li><li><a href="http://nicethemes.cn/news/txtlist_i31456v.html">domToImage</a></li></ul><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><ul><li><a href="https://echarts.apache.org/zh/index.html">echarts</a></li><li><a href="https://www.highcharts.com.cn/">highcharts</a></li><li><a href="https://v-charts.js.org/#/">v-charts.js</a></li><li><a href="https://d3js.org/">v-charts.js</a></li></ul><p>可视化拖拽库</p><ul><li><a href="http://logic-flow.org/">logicflow</a></li></ul><p>可视化分析图论库</p><ul><li><a href="https://js.cytoscape.org/">Cytoscape.js</a></li></ul><p>react</p><ul><li><a href="https://antv.gitee.io/zh/">antv</a></li></ul><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><ul><li><a href="https://dafrok.github.io/vue-baidu-map/#/zh/index">vue-baidu-map</a></li></ul><h2 id="v-html-安全替代"><a href="#v-html-安全替代" class="headerlink" title="v-html 安全替代"></a>v-html 安全替代</h2><ul><li><a href="https://www.npmjs.com/package/vue-dompurify-html">vue-dompurify-html</a></li></ul><h2 id="视频弹幕播放器"><a href="#视频弹幕播放器" class="headerlink" title="视频弹幕播放器"></a>视频弹幕播放器</h2><ul><li><a href="https://github.com/chenjianfang/scroxt">scroxt.js</a></li></ul><h2 id="手写签名插件"><a href="#手写签名插件" class="headerlink" title="手写签名插件"></a>手写签名插件</h2><ul><li><a href="https://github.com/neighborhood999/vue-signature-pad">vue-signature-pad</a></li></ul><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li><a href="https://github.com/i18next/i18next">i18next</a></li><li><a href="https://github.com/kazupon/vue-i18n">vue-i18n</a></li></ul><h2 id="移动端滚动选择器"><a href="#移动端滚动选择器" class="headerlink" title="移动端滚动选择器"></a>移动端滚动选择器</h2><ul><li><a href="https://github.com/majunchang/picker-extend">picker-extend.js</a></li><li><a href="https://ustbhuangyi.github.io/better-scroll/#/examples/picker">BetterScroll</a></li></ul><h2 id="城市选择器"><a href="#城市选择器" class="headerlink" title="城市选择器"></a>城市选择器</h2><ul><li><a href="https://github.com/xinxingyu/vue-city">vue-city</a></li></ul><h2 id="上传组件"><a href="#上传组件" class="headerlink" title="上传组件"></a>上传组件</h2><ul><li><a href="https://github.com/saivarunk/vue-simple-upload">vue-simple-upload</a></li></ul><h2 id="表单检验"><a href="#表单检验" class="headerlink" title="表单检验"></a>表单检验</h2><ul><li><a href="https://github.com/validatorjs/validator.js">validator.js</a></li></ul><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><ul><li><a href="https://www.wangeditor.com/">wangeditor</a></li></ul><h2 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h2><ul><li><a href="https://pandao.github.io/editor.md/">Markdown</a></li></ul><h2 id="Web-代码编辑器"><a href="#Web-代码编辑器" class="headerlink" title="Web 代码编辑器"></a>Web 代码编辑器</h2><ul><li><a href="https://github.com/ajaxorg/ace">ACE Editor</a></li></ul><h2 id="抽奖插件"><a href="#抽奖插件" class="headerlink" title="抽奖插件"></a>抽奖插件</h2><ul><li><a href="https://100px.net/">lucky-canvas</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7012012633180078117?utm_source=gold_browser_extension">我在项目用到这十多种轮子助我提升开发效率，收藏</a></li><li><a href="https://juejin.cn/post/6844904009401106445">前端常用工具和轮子汇总</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/10/26/55cbE8.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工具" scheme="https://www.gaotianyang.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>[转]你会用ES6那倒是用啊</title>
    <link href="https://www.gaotianyang.top/archives/202110203379300f/"/>
    <id>https://www.gaotianyang.top/archives/202110203379300f/</id>
    <published>2021-10-20T10:05:59.000Z</published>
    <updated>2021-10-20T04:26:51.513Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/10/20/5BZINn.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在刷掘金过程中，发现一篇关于 ES6 的宝藏文，确实有我日常工作中值得借鉴的一些点，记录下来。</p><p><img src="https://z3.ax1x.com/2021/10/20/5040oV.png" alt="我只是个分割线"></p><p>不是标题党，这是一位 leader 在一次代码评审会对小组成员发出的“怒吼”，原因是在代码评审中发现很多地方还是采用 ES5 的写法，<br>也不是说用 ES5 写法不行，会有 BUG，只是造成代码量增多，可读性变差而已。</p><p>恰好，这位 leader 有代码洁癖，面对 3~5 年经验的成员，还写这种水平的代码，极为不满，不断对代码进行吐槽。<br>不过对于他的吐槽，我感觉还是有很大收获的，故就把 leader 的吐槽记录下来，分享给掘友们，觉得有收获点个赞，有错误的或者更好的写法，非常欢迎在评论中留言。</p><blockquote><p><strong>ps：ES5 之后的 JS 语法统称 ES6！！！</strong></p></blockquote><h2 id="一、关于取值的吐槽"><a href="#一、关于取值的吐槽" class="headerlink" title="一、关于取值的吐槽"></a>一、关于取值的吐槽</h2><p>取值在程序中非常常见，比如从对象<code>obj</code>中取值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">  d: <span class="number">4</span>,</span><br><span class="line">  e: <span class="number">5</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = obj.a;</span><br><span class="line"><span class="keyword">const</span> b = obj.b;</span><br><span class="line"><span class="keyword">const</span> c = obj.c;</span><br><span class="line"><span class="keyword">const</span> d = obj.d;</span><br><span class="line"><span class="keyword">const</span> e = obj.e;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = obj.a + obj.d;</span><br><span class="line"><span class="keyword">const</span> g = obj.c + obj.e;</span><br></pre></td></tr></table></figure><p>吐槽：“不会用 ES6 的解构赋值来取值吗？5 行代码用 1 行代码搞定不香吗？直接用对象名加属性名去取值，要是对象名短还好，很长呢？搞得代码中到处都是这个对象名。”</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, c, d, e &#125; = obj;</span><br><span class="line"><span class="keyword">const</span> f = a + d;</span><br><span class="line"><span class="keyword">const</span> g = c + e;</span><br></pre></td></tr></table></figure><blockquote><p>反驳：</p></blockquote><p>不是不用 ES6 的解构赋值，而是服务端返回的数据对象中的属性名不是我想要的，这样取值，不是还得重新创建个遍历赋值。</p><blockquote><p>吐槽：</p></blockquote><p>看来你对 ES6 的解构赋值掌握的还是不够彻底。如果想创建的变量名和对象的属性名不一致，可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">a</span>: a1 &#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(a1); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：</p></blockquote><p>ES6 的解构赋值虽然好用。但是要注意解构的对象不能为 <code>undefined</code>、<code>null</code>。否则会报错，故要给被解构的对象一个默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, c, d, e &#125; = obj || &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、关于合并数据的吐槽"><a href="#二、关于合并数据的吐槽" class="headerlink" title="二、关于合并数据的吐槽"></a>二、关于合并数据的吐槽</h2><p>比如合并两个数组，合并两个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = a.concat(b); <span class="comment">//[1,2,3,1,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  b: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1, obj2); <span class="comment">//&#123;a:1,b:1&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 的扩展运算符是不是忘记了，还有数组的合并不考虑去重吗？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> b = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> c = [...new <span class="built_in">Set</span>([...a, ...b])]; <span class="comment">//[1,2,3,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  b: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; ...obj1, ...obj2 &#125;; <span class="comment">//&#123;a:1,b:1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、关于拼接字符串的吐槽"><a href="#三、关于拼接字符串的吐槽" class="headerlink" title="三、关于拼接字符串的吐槽"></a>三、关于拼接字符串的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">60</span>) &#123;</span><br><span class="line">  result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的考试成绩及格`</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">`<span class="subst">$&#123;name&#125;</span>的考试成绩不及格`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>像你们这样用 ES6 字符串模板，还不如不用，你们根本不清楚在${}中可以做什么操作。在${}中可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;name&#125;</span><span class="subst">$&#123;score &gt; <span class="number">60</span> ? <span class="string">&#x27;的考试成绩及格&#x27;</span> : <span class="string">&#x27;的考试成绩不及格&#x27;</span>&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h2 id="四、关于-if-中判断条件的吐槽"><a href="#四、关于-if-中判断条件的吐槽" class="headerlink" title="四、关于 if 中判断条件的吐槽"></a>四、关于 if 中判断条件的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    type == <span class="number">1</span> ||</span><br><span class="line">    type == <span class="number">2</span> ||</span><br><span class="line">    type == <span class="number">3</span> ||</span><br><span class="line">    type == <span class="number">4</span> ||</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中数组实例方法 includes 会不会使用呢？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> condition = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition.includes(type)) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、关于列表搜索的吐槽"><a href="#五、关于列表搜索的吐槽" class="headerlink" title="五、关于列表搜索的吐槽"></a>五、关于列表搜索的吐槽</h2><p>在项目中，一些没分页的列表的搜索功能由前端来实现，搜索一般分为精确搜索和模糊搜索。搜索也要叫过滤，一般用 filter 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>如果是精确搜索不会用 ES6 中的 find 吗？性能优化懂么，find 方法中找到符合条件的项，就不会继续遍历数组。</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = a.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item === <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="六、关于扁平化数组的吐槽"><a href="#六、关于扁平化数组的吐槽" class="headerlink" title="六、关于扁平化数组的吐槽"></a>六、关于扁平化数组的吐槽</h2><p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line">  采购部: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  人事部: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">  行政部: [<span class="number">5</span>, <span class="number">14</span>, <span class="number">79</span>],</span><br><span class="line">  运输部: [<span class="number">3</span>, <span class="number">64</span>, <span class="number">105</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> member = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> deps) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = deps[item];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    member = [...member, ...value];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">member = [...new <span class="built_in">Set</span>(member)];</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>获取对象的全部属性值还要遍历吗？Object.values 忘记了吗？还有涉及到数组的扁平化处理，为啥不用 ES6 提供的 flat 方法呢，<br>还好这次的数组的深度最多只到 2 维，还要是遇到 4 维、5 维深度的数组，是不是得循环嵌套循环来扁平化？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;</span><br><span class="line">  采购部: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  人事部: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">  行政部: [<span class="number">5</span>, <span class="number">14</span>, <span class="number">79</span>],</span><br><span class="line">  运输部: [<span class="number">3</span>, <span class="number">64</span>, <span class="number">105</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> member = <span class="built_in">Object</span>.values(deps).flat(<span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure><p>其中使用 Infinity 作为 flat 的参数，使得无需知道被扁平化的数组的维度。</p><blockquote><p>补充：</p></blockquote><p>flat 方法不支持 IE 浏览器。</p><h2 id="七、关于获取对象属性值的吐槽"><a href="#七、关于获取对象属性值的吐槽" class="headerlink" title="七、关于获取对象属性值的吐槽"></a>七、关于获取对象属性值的吐槽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = obj &amp;&amp; obj.name;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中的可选链操作符会使用么？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = obj?.name;</span><br></pre></td></tr></table></figure><h2 id="八、关于添加对象属性的吐槽"><a href="#八、关于添加对象属性的吐槽" class="headerlink" title="八、关于添加对象属性的吐槽"></a>八、关于添加对象属性的吐槽</h2><p>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>;</span><br><span class="line">obj[key] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>为何要额外创建一个变量。不知道 ES6 中的对象属性名是可以用表达式吗？</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">obj[<span class="string">`topic<span class="subst">$&#123;index&#125;</span>`</span>] = <span class="string">&#x27;话题内容&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="九、关于输入框非空的判断"><a href="#九、关于输入框非空的判断" class="headerlink" title="九、关于输入框非空的判断"></a>九、关于输入框非空的判断</h2><p>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>ES6 中新出的空值合并运算符了解过吗，要写那么多条件吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value ?? <span class="string">&#x27;&#x27;</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、关于异步函数的吐槽"><a href="#十、关于异步函数的吐槽" class="headerlink" title="十、关于异步函数的吐槽"></a>十、关于异步函数的吐槽</h2><p>异步函数很常见，经常是用 Promise 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fn1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res1); <span class="comment">// 1</span></span><br><span class="line">    fn2().then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res2);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>吐槽：</p></blockquote><p>如果这样调用异步函数，不怕形成地狱回调啊！</p><blockquote><p>改进：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="built_in">console</span>.log(res1); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(res2); <span class="comment">// 2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>补充：</p></blockquote><p>但是要做并发请求时，还是要用到 <code>Promise.all()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.all([fn1(), fn2()]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// [1,2]</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果并发请求时，只要其中一个异步函数处理完成，就返回结果，要用到 <code>Promise.race()</code>。</p><h2 id="十一、后续"><a href="#十一、后续" class="headerlink" title="十一、后续"></a>十一、后续</h2><p>欢迎来对以上十点 leader 的吐槽进行反驳，你的反驳如果有道理的，下次代码评审会上，我替你反驳。</p><p>此外以上的整理内容有误的地方，欢迎在评论中指正，万分感谢。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/7016520448204603423?utm_source=gold_browser_extension">你会用 ES6，那倒是用啊！</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/10/20/5BZINn.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ES6" scheme="https://www.gaotianyang.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>百里画廊</title>
    <link href="https://www.gaotianyang.top/archives/20210613b5a10fd1/"/>
    <id>https://www.gaotianyang.top/archives/20210613b5a10fd1/</id>
    <published>2021-06-13T04:01:58.000Z</published>
    <updated>2023-12-04T04:13:05.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/06/RT5QjH.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>我们出发啦~目标百里画廊。风景还行，就是距离略远…Orz</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/06/RT5JEt.jpg" alt="出发啦"><br><img src="https://z3.ax1x.com/2021/07/06/RT5YUP.jpg" alt="以梦为马，不负韶华"><br><img src="https://z3.ax1x.com/2021/07/06/RT51ud.jpg" alt="在路上"><br><img src="https://z3.ax1x.com/2021/07/06/RT53DA.jpg" alt="这⛰"><br><img src="https://z3.ax1x.com/2021/07/06/RT5Mge.jpg" alt="山川湖海"><br><img src="https://z3.ax1x.com/2021/07/06/RT5QjH.jpg" alt="天蓝草绿"><br><img src="https://z3.ax1x.com/2021/07/06/RT5K3D.jpg" alt="小石潭记"></p><blockquote><p>游玩过后一起聚个餐，没什么是一顿烤串解决不了的问题，如果有就两顿！~</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/06/RT58HI.jpg" alt="香辣猪蹄"><br><img src="https://z3.ax1x.com/2021/07/06/RT5eN6.jpg" alt="cheers~"><br><img src="https://z3.ax1x.com/2021/07/06/RT5u9O.jpg" alt="各种肉串😃干饭人的日常"><br><img src="https://z3.ax1x.com/2021/07/06/RT5m4K.jpg" alt="没什么问题"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/06/RT5QjH.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="百里画廊" scheme="https://www.gaotianyang.top/tags/%E7%99%BE%E9%87%8C%E7%94%BB%E5%BB%8A/"/>
    
    <category term="木屋烧烤" scheme="https://www.gaotianyang.top/tags/%E6%9C%A8%E5%B1%8B%E7%83%A7%E7%83%A4/"/>
    
  </entry>
  
  <entry>
    <title>朝阳公园</title>
    <link href="https://www.gaotianyang.top/archives/20210612ed8140c5/"/>
    <id>https://www.gaotianyang.top/archives/20210612ed8140c5/</id>
    <published>2021-06-12T03:46:56.000Z</published>
    <updated>2023-12-04T04:03:48.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/08/Rq7FQP.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>今日份的朝阳公园，听着蝉鸣鸟叫~很惬意。有搭帐篷的，躺吊床的，还有划船的，孩子们嬉戏打闹着，让时间静静地流淌。</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/08/Rq7AL8.jpg" alt="露营"><br><img src="https://z3.ax1x.com/2021/07/08/Rq7nij.jpg" alt="听着蝉鸣鸟叫~很惬意呦"><br><img src="https://z3.ax1x.com/2021/07/08/Rq7CRI.jpg" alt="看得出这是哪个建筑么"><br><img src="https://z3.ax1x.com/2021/07/08/Rq7ksf.jpg" alt="今日份朝阳公园"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/08/Rq7FQP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="朝阳公园" scheme="https://www.gaotianyang.top/tags/%E6%9C%9D%E9%98%B3%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>东坝郊野公园</title>
    <link href="https://www.gaotianyang.top/archives/202104041352062e/"/>
    <id>https://www.gaotianyang.top/archives/202104041352062e/</id>
    <published>2021-04-04T03:25:44.000Z</published>
    <updated>2023-12-04T03:29:48.277Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/01/RsfctS.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>东坝郊野公园位于朝阳东五环外，我们驱车去拾春~。</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/01/RshEjA.jpg" alt="路边的小野花"><br><img src="https://z3.ax1x.com/2021/07/01/Rs4urR.jpg" alt="春到了~采椿了"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/01/RsfctS.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="东坝郊野公园" scheme="https://www.gaotianyang.top/tags/%E4%B8%9C%E5%9D%9D%E9%83%8A%E9%87%8E%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>前端面试经</title>
    <link href="https://www.gaotianyang.top/archives/2021032932cd20c6/"/>
    <id>https://www.gaotianyang.top/archives/2021032932cd20c6/</id>
    <published>2021-03-29T02:27:35.000Z</published>
    <updated>2021-04-20T03:14:06.372Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/03/15/6BreZF.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前端面试汇总"><a href="#前端面试汇总" class="headerlink" title="前端面试汇总"></a>前端面试汇总</h2><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><p>最近的工作经历及项目经验，用到了哪些技术，负责哪些工作。</p><p>遇到了什么问题及怎么处理的。</p><h4 id="是否封装过组件，封装的过程是什么"><a href="#是否封装过组件，封装的过程是什么" class="headerlink" title="是否封装过组件，封装的过程是什么"></a>是否封装过组件，封装的过程是什么</h4><p><a href="https://zhuanlan.zhihu.com/p/111873208">React 组件封装技巧（HOC、Render Props、Hook）</a></p><h4 id="H5-项目做过什么"><a href="#H5-项目做过什么" class="headerlink" title="H5 项目做过什么"></a>H5 项目做过什么</h4><h5 id="屏幕尺寸适配"><a href="#屏幕尺寸适配" class="headerlink" title="屏幕尺寸适配"></a>屏幕尺寸适配</h5><p><a href="https://juejin.cn/post/6844904029898670088">都 2020 移动端适配你还用 flexible.js 吗？vw+rem 一行代码搞定</a></p><p>优点：不需要引入新的 js，一行代码搞定适配问题<br>缺点：浏览器兼容性差，IE9 以下不支持，但现代浏览器，特别是移动端，基本都支持</p><h5 id="em-和-rem-的区别"><a href="#em-和-rem-的区别" class="headerlink" title="em 和 rem 的区别"></a>em 和 rem 的区别</h5><p>两者都是相对尺寸</p><p>em 继承父级元素的字体大小<br>rem 是相对 HTML 根元素</p><h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。<br>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p><h5 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h5><p>事件触发过程中不触发，并设置延时。当延时完毕才调取，若延时内再次触发则重置延时。</p><p>设置状态或使用 lodash</p><h5 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h5><p>时间戳和定时器一定时间内只能触发一次</p><p><a href="https://juejin.cn/post/6844903618827517965">JS 的防抖与节流</a></p><h4 id="babel-的作用"><a href="#babel-的作用" class="headerlink" title="babel 的作用"></a>babel 的作用</h4><p>Babel 是一个广泛使用的转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。 这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p><h4 id="webpack-的-loader-和-plugin-的区别"><a href="#webpack-的-loader-和-plugin-的区别" class="headerlink" title="webpack 的 loader 和 plugin 的区别"></a>webpack 的 loader 和 plugin 的区别</h4><p>loader 一般是将某个语法统一处理为统一的语法<br>plugin 一般是在打包前或打包后对结果进行再次操作</p><p>loader:让 webpack 能够处理非 js 文件(自身职能理解 js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>例如：css-loader、style-loader、postcss-loader、sass-loader</p><p>plugins:从打包优化和压缩，一直到重新定义环境中的变量.<br>例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</p><p>loader 用于加载待打包的资源<br>plugin 用于扩展 webpack<br>loader：webpack 自身只支持 js 和 json 这两种格式的文件，对于其他文件需要通过 loader 将其转换为 commonJS 规范的文件后，webpack 才能解析到<br>plugin：是用于在 webpack 打包编译过程里，在对应的事件节点里执行自定义操作，比如资源管理、bundle 文件优化等操作</p><h4 id="组件库发布至-npm"><a href="#组件库发布至-npm" class="headerlink" title="组件库发布至 npm"></a>组件库发布至 npm</h4><p>这个是建立一个私有的 组件库<br><a href="https://www.cnblogs.com/zycbloger/p/sinopia.html">npm 私有仓库搭建</a></p><p>搭建 注册 发布 使用<br><a href="https://www.jianshu.com/p/c61f08b7cb88">npm 私有仓库搭建【verdaccio】</a></p><p><a href="https://my.oschina.net/u/4292771/blog/3306024">手把手教你搭建 npm 私有仓库及发布高质量的 npm 包</a></p><h4 id="路由-hash-和-history-有什么差别"><a href="#路由-hash-和-history-有什么差别" class="headerlink" title="路由 hash 和 history 有什么差别"></a>路由 hash 和 history 有什么差别</h4><ul><li>hash 模式是通过改变锚点(#)来更新页面 URL，并不会触发页面重新加载，我们可以通过 window.onhashchange 监听到 hash 的改变，从而处理路由。</li><li>history 模式是通过调用 window.history 对象上的一系列方法来实现页面的无刷新跳转。</li></ul><h5 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h5><p>hash，原本用来结合锚点控制页面视窗的位置，具有以下特点：</p><ul><li>可以改变 URL，但不会触发页面重新加载（hash 的改变会记录在 window.hisotry 中）因此并不算是一次 http 请求，所以这种模式不利于 SEO 优化</li><li>只能修改#后面的部分，因此只能跳转与当前 URL 同文档的 URL</li><li>只能通过字符串改变 URL</li><li>通过 window.onhashchange 监听 hash 的改变，借此实现无刷新跳转的功能。</li></ul><h5 id="history"><a href="#history" class="headerlink" title="history"></a>history</h5><p>根据 Mozilla Develop Network 的介绍，调用 history.pushState() 相比于直接修改 hash，存在以下优势</p><ul><li>新的 URL 可以是与当前 URL 同源的任意 URL，也可以与当前 URL 一样，但是这样会把重复的一次操作记录到栈中</li><li>通过参数 stateObject 可以添加任意类型的数据到记录中</li><li>可额外设置 title 属性供后续使用</li><li>通过 pushState、replaceState 实现无刷新跳转的功能。</li></ul><h6 id="history-常用方法"><a href="#history-常用方法" class="headerlink" title="history 常用方法"></a>history 常用方法</h6><ul><li>back()：后退到上一个路由；</li><li>forward()：前进到下一个路由，如果有的话；</li><li>go(number)：进入到任意一个路由，正数为前进，负数为后退；</li><li>pushState(obj, title, url)：前进到指定的 URL，不刷新页面；</li><li>replaceState(obj, title, url)：用 url 替换当前的路由，不刷新页面；</li></ul><p>前面的 hashchange，你只能改变#后面的 url 片段。而 pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL。<br>history 模式则会将 URL 修改得就和正常请求后端的 URL 一样,如后端没有配置对应/user/id 的路由处理，则会返回 404 错误。</p><h4 id="跨域如何处理"><a href="#跨域如何处理" class="headerlink" title="跨域如何处理"></a>跨域如何处理</h4><p>1、 通过 jsonp 跨域<br>2、 document.domain + iframe 跨域<br>3、 location.hash + iframe<br>4、 window.name + iframe 跨域<br>5、 postMessage 跨域<br>6、 跨域资源共享（CORS）<br>7、 nginx 代理跨域<br>8、 nodejs 中间件代理跨域<br>9、 WebSocket 协议跨域</p><p><a href="https://segmentfault.com/a/1190000011145364">前端常见跨域解决方案</a></p><h4 id="除了-dayjs-日期库还有用过其他日期库么"><a href="#除了-dayjs-日期库还有用过其他日期库么" class="headerlink" title="除了 dayjs 日期库还有用过其他日期库么"></a>除了 dayjs 日期库还有用过其他日期库么</h4><p>moment.js 和 dayjs 的差别</p><h4 id="git-提交的时候习惯用命令还是图形化管理工具"><a href="#git-提交的时候习惯用命令还是图形化管理工具" class="headerlink" title="git 提交的时候习惯用命令还是图形化管理工具"></a>git 提交的时候习惯用命令还是图形化管理工具</h4><h5 id="sourseTree-的校验如何实现的"><a href="#sourseTree-的校验如何实现的" class="headerlink" title="sourseTree 的校验如何实现的"></a>sourseTree 的校验如何实现的</h5><h5 id="git-插件如何提交"><a href="#git-插件如何提交" class="headerlink" title="git 插件如何提交"></a>git 插件如何提交</h5><h4 id="eslint-是否了解"><a href="#eslint-是否了解" class="headerlink" title="eslint 是否了解"></a>eslint 是否了解</h4><p>指定规范</p><p><a href="https://www.jianshu.com/p/ad1e46faaea2">Eslint 超简单入门教程</a></p><h4 id="小程序是否接触过"><a href="#小程序是否接触过" class="headerlink" title="小程序是否接触过"></a>小程序是否接触过</h4><p>做了一版小程序</p><h5 id="小程序如何获取-token"><a href="#小程序如何获取-token" class="headerlink" title="小程序如何获取 token"></a>小程序如何获取 token</h5><ol><li>微信小程序通过访问 wx.login 获得一个 code，返回给后台</li><li>后台拿着这个 code，调用腾讯的接口，获取到 openid、seesion-key 等信息，openid 是用户唯一的</li><li>后台拿着 openid 去数据库中检查，该用户是否是第一次登陆<ol><li>如果是第一次登陆，那么就新建一个用户–UserAcount；如果不是第一次登陆，就修改该用户的最后登录时间</li><li>不管是不是第一次登录，都有了一个用户</li></ol></li><li>然后根据用户的信息利用 JWT 生成 token，下发给微信小程序</li></ol><p><a href="https://www.dazhuanlan.com/2019/12/16/5df6867423c68/">小程序开发之获取 token 值</a></p><h4 id="混合开发用过什么-与原生交互如蓝牙图片等"><a href="#混合开发用过什么-与原生交互如蓝牙图片等" class="headerlink" title="混合开发用过什么 与原生交互如蓝牙图片等"></a>混合开发用过什么 与原生交互如蓝牙图片等</h4><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="cookie-SessionStorage-LocalStorage-的差别"><a href="#cookie-SessionStorage-LocalStorage-的差别" class="headerlink" title="cookie SessionStorage LocalStorage 的差别"></a>cookie SessionStorage LocalStorage 的差别</h4><p>相同点：</p><ul><li>都是存储数据，存储在 web 端，并且都是同源</li></ul><p>不同点：</p><ol><li>cookie 只有 4K 小 并且每一次请求都会带上 cookie 体验不好，浪费带宽</li><li>session 和 local 直接存储在本地，请求不会携带，并且容量比 cookie 要大的多(sessionStorage 约 5M、localStorage 约 20M)</li><li>session 是临时会话，当窗口被关闭的时候就清除掉 ，而 local 永久存在，cookie 有过期时间</li><li>cookie 和 local 都可以支持多窗口共享，而 session 不支持多窗口共享 但是都支持 a 链接跳转的新窗口</li></ol><p>cookie 数量和长度都有限制，Web Storage 解决了这样的限制，且 localStorage 做到了永久储存。<br>但是 Cookie 也是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在 ，<br>而 Web Storage 仅仅是为了在本地“存储”数据而生。</p><p>web 存储的特点</p><ol><li>设置、读取方便</li><li>容量较大，sessionStorage 约 5M、localStorage 约 20M</li><li>只能存储字符串，可以将对象 JSON.stringify() 编码后存储</li></ol><p>sessionStorage</p><ol><li>生命周期为关闭当前页面窗口</li><li>不能多窗口下数据可以共享 （同源策略，百度家的 local 阿里他们家是拿不到）</li><li>补充：通过跳转可以 运用场景： 页面跳转的时候可以通过 session 实现数据共享 在一些单页面（spa）的运用中，进行页面传值的时候比较有用</li></ol><p>localStorage</p><ol><li>永久生效，除非手动删除或用代码删除</li><li>可以多窗口共享（同源策略）</li><li>运用场景：一些不涉及到安全的一些数据（不要太过庞大）都可以存储到本地</li></ol><p><a href="https://segmentfault.com/a/1190000010400892">cookie、sessionStorage、localStorage 详解及应用场景</a></p><h5 id="AB-相同页面-LocalStorage-是否相互影响"><a href="#AB-相同页面-LocalStorage-是否相互影响" class="headerlink" title="AB 相同页面 LocalStorage 是否相互影响"></a>AB 相同页面 LocalStorage 是否相互影响</h5><p>A 页面改变 LocalStorageB 页面如何监听到</p><ul><li>同一浏览器打开了两个同源页面</li><li>其中一个网页修改了 localStorage</li><li>另一网页注册了 storage 事件</li></ul><p><a href="https://www.jianshu.com/p/519a1b42d659">监听 localStorage 变化</a></p><h4 id="H5-缓存"><a href="#H5-缓存" class="headerlink" title="H5 缓存"></a>H5 缓存</h4><p><a href="https://segmentfault.com/a/1190000004132566">H5 缓存机制浅析 - 移动端 Web 加载性能优化</a></p><h4 id="资源缓存有哪些类型"><a href="#资源缓存有哪些类型" class="headerlink" title="资源缓存有哪些类型"></a>资源缓存有哪些类型</h4><p>HTML<br>JavaScript<br>CSS、SCSS<br>图片<br>SVG<br>视频、音频和字幕<br>字体文件</p><h4 id="为什么会出现缓存-200-和-304-是怎么发生的"><a href="#为什么会出现缓存-200-和-304-是怎么发生的" class="headerlink" title="为什么会出现缓存 200 和 304 是怎么发生的"></a>为什么会出现缓存 200 和 304 是怎么发生的</h4><p>请求 200 还是请求 304 是根据什么区分的</p><p>首次请求：200<br>缓存有效期内请求：200(from cache)——再次请求文件未超时不发送请求<br>缓存过期后请求：304（Not Modified)——文件缓存超时，发送请求到服务器，并携带本地缓存的文件信息，服务器对比信息(最后修改时间)，可继续使用时，返回 304 表示可据需使用</p><p><a href="https://blog.csdn.net/apple_osp/article/details/106717505">HTTP 304 与 200 区别</a></p><h4 id="Http-请求状态码有哪些及含义"><a href="#Http-请求状态码有哪些及含义" class="headerlink" title="Http 请求状态码有哪些及含义"></a>Http 请求状态码有哪些及含义</h4><ul><li>100:信息响应</li><li>200:成功响应</li><li>300:重定向<ul><li>304: Not Modified 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</li></ul></li><li>400:客户端响应</li><li>500:服务端响应<ul><li>502:此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</li><li>504:当服务器作为网关，不能及时得到响应时返回此错误代码。</li></ul></li></ul><h4 id="http2-0-和-http1-x-的区别"><a href="#http2-0-和-http1-x-的区别" class="headerlink" title="http2.0 和 http1.x 的区别"></a>http2.0 和 http1.x 的区别</h4><ul><li>http1 的解析是基于文本协议的各式解析,而 http2.0 的协议解析是二进制格式,更加的强大</li><li>多路复用(Mutiplexing) : 一个连接上可以有多个 request,且可以随机的混在一起,每个不同的 request 都有对应的 id,服务端可以通过 request_id 来辨别,大大加快了传输速率</li><li>header 压缩: http1.x 中的 header 需要携带大量信息.而且每次都要重复发送.http2.0 使用 encode 来减少传输的 header 大小.而且客户端和服务端可以各自缓存(cache)一份 header filed 表,避免了 header 的重复传输,还可以减少传输的大小.</li><li>服务端推送(server push): 可以通过解析 html 中的依赖,智能的返回所需的其他文件(css 或者 js 等),而不用再发起一次请求.</li></ul><h3 id="Vue-相关"><a href="#Vue-相关" class="headerlink" title="Vue 相关"></a>Vue 相关</h3><h4 id="如何声明一个全局变量"><a href="#如何声明一个全局变量" class="headerlink" title="如何声明一个全局变量"></a>如何声明一个全局变量</h4><h4 id="深度选择器-deep"><a href="#深度选择器-deep" class="headerlink" title="深度选择器 /deep/"></a>深度选择器 /deep/</h4><ul><li>vue 组件的 scoped 属性的作用</li><li>在 style 标签上添加 scoped 属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的；</li><li>但是也得慎用：样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的；</li></ul><h4 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="#$route 和 $router 的区别"></a>#$route 和 $router 的区别</h4><p>$router是VueRouter的实例，在script标签中想要导航到不同的URL,使用$router.push 方法。<br>返回上一个历史 history 用 $router.to(-1) $route 为当前 router 跳转对象。里面可以获取当前路由的 name,path,query,parmas 等。</p><p>$route从当前router跳转对象里面可以获取name、path、query、params等（<code>&lt;router-link&gt;</code>传的参数由 this.$route.query 或者 this.$route.params 接收）</p><p>$router为VueRouter实例。想要导航到不同URL，则使用$router.push 方法；返回上一个 history 也是使用$router.go 方法</p><h4 id="params-和-query-的区别-如何获取传递的参数"><a href="#params-和-query-的区别-如何获取传递的参数" class="headerlink" title="params 和 query 的区别?如何获取传递的参数"></a>params 和 query 的区别?如何获取传递的参数</h4><p>url 地址显示：query 更加类似于我们 ajax 中 get 传参，params 则类似于 post，<br>说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示<br>注意点：query 刷新不会丢失 query 里面的数据 params 刷新会丢失 params 里面的数据。</p><p>this.$route.query.name和this.$route.params.name</p><h4 id="vue-router-的有哪两种模式？-history-模式的问题是是什么？"><a href="#vue-router-的有哪两种模式？-history-模式的问题是是什么？" class="headerlink" title="vue-router 的有哪两种模式？ history 模式的问题是是什么？"></a>vue-router 的有哪两种模式？ history 模式的问题是是什么？</h4><ul><li>hash 模式：即地址栏 URL 中的 # 符号；</li><li>history 模式：window.history 对象打印出来可以看到里边提供的方法和记录长度。利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）</li><li>hash 模式是通过改变锚点(#)来更新页面 URL，并不会触发页面重新加载，我们可以通过 window.onhashchange 监听到 hash 的改变，从而处理路由。</li><li>history 模式是通过调用 window.history 对象上的一系列方法来实现页面的无刷新跳转。</li></ul><h3 id="React-相关"><a href="#React-相关" class="headerlink" title="React 相关"></a>React 相关</h3><h4 id="如何搭建-react-项目"><a href="#如何搭建-react-项目" class="headerlink" title="如何搭建 react 项目"></a>如何搭建 react 项目</h4><p>creat-react-app</p><h4 id="简述-react-脚手架的原理"><a href="#简述-react-脚手架的原理" class="headerlink" title="简述 react 脚手架的原理"></a>简述 react 脚手架的原理</h4><h4 id="React-生命周期有哪些"><a href="#React-生命周期有哪些" class="headerlink" title="React 生命周期有哪些"></a>React 生命周期有哪些</h4><p><img src="https://z3.ax1x.com/2021/03/29/cP3j8P.png" alt="life-cycle"></p><p>生命周期的方法有：</p><ul><li>componentWillMount 在渲染前调用,在客户端也在服务端。</li><li>componentDidMount 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的 DOM 结构，可以通过 this.getDOMNode()来进行访问。 如果你想和其他 JavaScript 框架一起使用，可以在这个方法中调用 setTimeout, setInterval 或者发送 AJAX 请求等操作(防止异步操作阻塞 UI)。</li><li>componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化 render 时不会被调用。</li><li>shouldComponentUpdate 返回一个布尔值。在组件接收到新的 props 或者 state 时被调用。在初始化时或者使用 forceUpdate 时不被调用。可以在你确认不需要更新组件时使用。</li><li>componentWillUpdate 在组件接收到新的 props 或者 state 但还没有 render 时被调用。在初始化时不会被调用。</li><li>componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。</li><li>componentWillUnmount 在组件从 DOM 中移除之前立刻被调用。</li></ul><p>即将弃用：</p><ul><li>componentWillMount</li><li>componentWillReceiveProps</li><li>componentWillUpdate</li></ul><p>新增：</p><ul><li>getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ul><p><a href="https://juejin.cn/post/6844904005152276487">React 的生命周期变化</a></p><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>useState 扁平化存储数据<br>useEffect 初始化时、监听某个或某几个值变化、监听卸载</p><p><a href="https://zhuanlan.zhihu.com/p/88593858">谈谈 react hooks 的优缺点</a></p><h4 id="react-渲染虚拟-dom-的过程"><a href="#react-渲染虚拟-dom-的过程" class="headerlink" title="react 渲染虚拟 dom 的过程"></a>react 渲染虚拟 dom 的过程</h4><h4 id="react-列表的-keys-的作用是什么"><a href="#react-列表的-keys-的作用是什么" class="headerlink" title="react 列表的 keys 的作用是什么"></a>react 列表的 keys 的作用是什么</h4><p>Keys 可以在 DOM 中的某些元素被增加或删除的时候帮助 React 识别哪些元素发生了变化。因此你应当给数组中的每一个元素赋予一个确定的标识。</p><p>一般使用 id，如果没有使用 index。</p><p>不推荐使用 index，在可调整排序的列表中性能较差。</p><h4 id="react-和-vue-的差别有哪些"><a href="#react-和-vue-的差别有哪些" class="headerlink" title="react 和 vue 的差别有哪些"></a>react 和 vue 的差别有哪些</h4><p>相同点：</p><ul><li>都使用 Virtural DOM</li><li>都使用组件化思想，流程基本一致</li><li>都是响应式，推崇单向数据流</li><li>都有成熟的社区，都支持服务端渲染</li></ul><p>不同点：</p><p>Vue 推崇灵活易用（渐进式开发体验），数据可变，双向数据绑定（依赖收集）<br>React 推崇函数式编程（纯组件），数据不可变以及单向数据流</p><p>Vue 推崇 template（简单易懂，从传统前端转过来易于理解）、单文件 vue<br>React 推崇 JSX、HOC、all in js</p><p><a href="https://juejin.cn/post/6844904158093377549">Vue 和 React 区别</a></p><h4 id="react-和-vue-的优缺点"><a href="#react-和-vue-的优缺点" class="headerlink" title="react 和 vue 的优缺点"></a>react 和 vue 的优缺点</h4><p>React.js 的优点：灵活性和响应性、虚拟 DOM、丰富的 JavaScript 库、可扩展性、不断发展、Web 或移动平台</p><ul><li>灵活性和响应性：它提供最大的灵活性和响应能力。</li><li>虚拟 DOM：由于它基于文档对象模型，因此它允许浏览器友好地以 HTML，XHTML 或 XML 格式排列文档。</li><li>丰富的 JavaScript 库：来自世界各地的贡献者正在努力添加更多功能。</li><li>可扩展性：由于其灵活的结构和可扩展性，React 已被证明对大型应用程序更好。</li><li>不断发展： React 得到了 Facebook 专业开发人员的支持，他们不断寻找改进方法。</li><li>Web 或移动平台： React 提供 React Native 平台，可通过相同的 React 组件模型为 iOS 和 Android 开发本机呈现的应用程序。无论是 Web 还是本机移动开发，React 都是大多数用户界面设计平台的理想选择。</li></ul><p>React.js 的缺点：陡峭的学习曲线</p><ul><li>陡峭的学习曲线：由于复杂的设置过程，属性，功能和结构，它需要深入的知识来构建应用程序。</li></ul><p>现在，让我们转到 Vue.js 并谈谈它的优点和缺点：<br>与 React 相比，Vue.js 的下载量更少，并且主要用于构建有吸引力的单页面应用程序和 Web 应用程序。但是，Vue.js 具有适应性强的体系结构，使其成为广泛使用的框架之一，具有最新的库和包。</p><p>使用 Vue.Js 的优点：易于使用、更顺畅的集成、更好的性能，更小的尺寸、精心编写的文档、适应性</p><ul><li>易于使用： Vue.js 包含基于 HTML 的标准模板，可以更轻松地使用和修改现有应用程序。</li><li>更顺畅的集成：无论是单页应用程序还是复杂的 Web 界面，Vue.js 都可以更平滑地集成更小的部件，而不会对整个系统产生任何影响。</li><li>更好的性能，更小的尺寸：它占用更少的空间，并且往往比其他框架提供更好的性能。</li><li>精心编写的文档：通过详细的文档提供简单的学习曲线，无需额外的知识; HTML 和 JavaScript 将完成工作。</li><li>适应性：整体声音设计和架构使其成为一种流行的 JavaScript 框架。它提供无障碍的迁移，简单有效的结构和可重用的模板。</li></ul><p>使用 Vue.js 的缺点：市场份额小。世界范围内的外企有刻意回避使用的情况。</p><ul><li>与 Angular 和 React 相比，Vue.js 框架的市场份额仍然很小。它正在快速流行，但与此同时，在使用 Vue.js 时，可能会出现大规模应用程序开发方面的问题。<br>好吧，考虑到其现代功能，速度和灵活性，Vue.js 有可能实现 Web 应用程序开发的里程碑。</li></ul><h3 id="JS-相关"><a href="#JS-相关" class="headerlink" title="JS 相关"></a>JS 相关</h3><h4 id="检测变量的类型并区分数组和对象"><a href="#检测变量的类型并区分数组和对象" class="headerlink" title="检测变量的类型并区分数组和对象"></a>检测变量的类型并区分数组和对象</h4><table><thead><tr><th>值</th><th>类型</th></tr></thead><tbody><tr><td>typeof 1</td><td>“number”</td></tr><tr><td>typeof NaN</td><td>“number”</td></tr><tr><td>typeof “1”</td><td>“string”</td></tr><tr><td>typeof true</td><td>“boolean”</td></tr><tr><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>typeof null</td><td>“object”</td></tr><tr><td>typeof []</td><td>“object”</td></tr><tr><td>typeof {}</td><td>“object”</td></tr></tbody></table><ul><li>如果返回 number，判断是否是 NAN，isNaN(a) ，</li><li>首先使用 typeof 判断，如果返回 object，判断是否为 null</li><li>最后使用 toString 如果是”[object Object]”是对象，否则是数组。</li></ul><p><a href="https://segmentfault.com/a/1190000018160547">javascript 判断数据类型的几种方法</a></p><h4 id="对比对象-A、B-是否相等"><a href="#对比对象-A、B-是否相等" class="headerlink" title="对比对象 A、B 是否相等()"></a>对比对象 A、B 是否相等()</h4><p><a href="https://juejin.cn/post/6844903802298974221">JavaScript 中，如何判断两个对象是否相等？</a></p><ul><li>判断 A===B 返回 true</li><li>判断 A 和 B 长度是否相等<ul><li>如果不等返回 false</li></ul></li><li>遍历对比</li></ul><h5 id="js-获取对象长度"><a href="#js-获取对象长度" class="headerlink" title="js 获取对象长度"></a>js 获取对象长度</h5><p>对象无法直接获取 length，可以使用原生的 Object.keys 获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objA = &#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;18&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> objB = &#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;18&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(objA);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  objA[item] === objB[item];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="多维转一维数组"><a href="#多维转一维数组" class="headerlink" title="多维转一维数组"></a>多维转一维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>];</span><br></pre></td></tr></table></figure><ul><li>递归</li><li>toString 正则处理</li><li>Array​.prototype​.flat(Infinity)</li><li>扩展运算符</li></ul><p>递归</p><blockquote><p>递归的遍历每一项，若为数组则继续遍历，否则 concat</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  [[<span class="number">9</span>, <span class="number">10</span>], <span class="number">11</span>],</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      result = result.concat(flat(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flat(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure><p>扩展运算符</p><blockquote><p>… 用于取出参数对象的所有可遍历属性，拷贝到当前对象中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  [[<span class="number">9</span>, <span class="number">10</span>], <span class="number">11</span>],</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.some(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr = [].concat(...arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flat(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_38128179/article/details/89950590">扁平化数组的几种方法</a></p><h4 id="变量提升函数提升"><a href="#变量提升函数提升" class="headerlink" title="变量提升函数提升"></a>变量提升函数提升</h4><p><a href="https://blog.csdn.net/kontar123/article/details/83508740">js 中的变量提升和函数提升</a></p><h4 id="前端模块化的规范"><a href="#前端模块化的规范" class="headerlink" title="前端模块化的规范"></a>前端模块化的规范</h4><p>CommonJS： 在 NodeJS 中实现。主要方法是 exports 和 require<br>AMD：提前执行依赖-尽早执行 requireJs<br>CMD：按需执行依赖-懒执行 seaJs<br>ES6: import 和 export</p><h4 id="ES6-有哪些新特性"><a href="#ES6-有哪些新特性" class="headerlink" title="ES6 有哪些新特性"></a>ES6 有哪些新特性</h4><ol><li>不一样的变量声明：const 和 let</li><li>模板字符串</li><li>箭头函数（Arrow Functions）</li><li>函数的参数默认值</li><li>Spread / Rest 操作符</li><li>二进制和八进制字面量</li><li>对象和数组解构</li><li>对象超类</li><li>for…of 和 for…in</li><li>ES6 中的类</li></ol><p><a href="https://juejin.cn/post/6844903618810757128">ES6 中常用的 10 个新特性讲解</a></p><h5 id="箭头函数能作为构造函数吗"><a href="#箭头函数能作为构造函数吗" class="headerlink" title="箭头函数能作为构造函数吗"></a>箭头函数能作为构造函数吗</h5><ul><li>从上面的运行结果也可以看到箭头函数与构造函数相比，缺少了很多东西，比如：caller，arguments，prototype，但同时也可以看到，箭头函数是有<strong>proto</strong>属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是原型链到箭头函数这一环就停止了，因为它自己没有 prototype 属性，没法让他的实例的<strong>proto</strong>属性指向，所以箭头函数也就无法作为构造函数。</li><li>同时我们可以看到，由于箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数，不能绑定 this，所以 call()和 apply()的第一个参数会被忽略。</li></ul><p><a href="https://blog.csdn.net/weixin_42798473/article/details/105319353">箭头函数为什么不能作为构造函数？</a></p><h4 id="原型、原型链是什么"><a href="#原型、原型链是什么" class="headerlink" title="原型、原型链是什么"></a>原型、原型链是什么</h4><h5 id="原型是什么"><a href="#原型是什么" class="headerlink" title="原型是什么"></a>原型是什么</h5><p>JS 中每个函数都存在有一个原型对象属性 prototype。并且所有函数的默认原型都是 Object 的实例。</p><h5 id="原型链是什么"><a href="#原型链是什么" class="headerlink" title="原型链是什么"></a>原型链是什么</h5><p>原型链，简单理解就是原型组成的链，对象的<strong>proto</strong>它的是原型，而原型也是一个对象，也有<strong>proto</strong>属性，<br>原型的<strong>proto</strong>又是原型的原型，就这样可以一直通过<strong>proto</strong>想上找，这就是原型链，当向上找找到 Object 的原型的时候，这条原型链就算到头了。</p><h5 id="原型链作用"><a href="#原型链作用" class="headerlink" title="原型链作用"></a>原型链作用</h5><p>原型链实现了继承。原型链存在两个问题：</p><ol><li>包含引用类型值的原型属性会被所有实例共享。</li><li>在创建子类型时，无法向超类型的构造函数中传递参数。</li></ol><h5 id="如何检测它的原型链"><a href="#如何检测它的原型链" class="headerlink" title="如何检测它的原型链"></a>如何检测它的原型链</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prototypeObject.isPrototypeOf(object);</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/5801.html">JS isPrototypeOf()方法：检测一个对象是否存在于另一个对象的原型链中</a></p><h5 id="实例的原型链的上一层指向什么"><a href="#实例的原型链的上一层指向什么" class="headerlink" title="实例的原型链的上一层指向什么"></a>实例的原型链的上一层指向什么</h5><p>构造函数的 protoType</p><h4 id="New-关键词干了什么"><a href="#New-关键词干了什么" class="headerlink" title="New 关键词干了什么"></a>New 关键词干了什么</h4><ol><li>创建一个新对象</li><li>将新对象的<em>proto</em>指向构造函数的 prototype 对象</li><li>将构造函数的作用域赋值给新对象 （也就是 this 指向新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = &#123;&#125;;</span><br><span class="line">Obj._proto_ = Person.prototype();</span><br><span class="line">Person.call(Obj);</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_34038293/article/details/92886267">js 中的 new 关键字做了什么？</a></p><h4 id="事件监听函数参数有什么"><a href="#事件监听函数参数有什么" class="headerlink" title="事件监听函数参数有什么"></a>事件监听函数参数有什么</h4><p>event、function、Boolean</p><p>event：监听什么事件<br>function：触发什么方法<br>Boolean：是否冒泡</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Promise(resolve, reject)和 Promise.all([])</p><h5 id="promise-代码的输出结果是什么"><a href="#promise-代码的输出结果是什么" class="headerlink" title="promise 代码的输出结果是什么"></a>promise 代码的输出结果是什么</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果是什么</p></blockquote><p>(ok)</p><blockquote><p>为什么不是 err</p></blockquote><p><a href="https://yuanfentiank789.github.io/2019/11/07/promise%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%80%BB%E7%BB%93/">promise 执行顺序总结</a></p><h5 id="promise-有哪些状态是如何改变的"><a href="#promise-有哪些状态是如何改变的" class="headerlink" title="promise 有哪些状态是如何改变的"></a>promise 有哪些状态是如何改变的</h5><p>promise 有 3 种状 态： pending、fulfilled 或 rejected。<br>状态改变只能是 pending-&gt;fulfilled 或者 pending-&gt; rejected，状态一旦改变则不能再变。</p><h5 id="promise-的-then-的参数类型是什么"><a href="#promise-的-then-的参数类型是什么" class="headerlink" title="promise 的.then 的参数类型是什么"></a>promise 的.then 的参数类型是什么</h5><p>Promise 类型的对象</p><p><a href="https://blog.csdn.net/weixin_41728198/article/details/103450075">Promise.then 函数返回值类型与参数传递</a></p><h5 id="手动实现-Promise-all"><a href="#手动实现-Promise-all" class="headerlink" title="手动实现 Promise.all"></a>手动实现 Promise.all</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all2 = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = promises.length;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">      results = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">        (value) =&gt; &#123;</span><br><span class="line">          count++;</span><br><span class="line">          results[i] = value;</span><br><span class="line">          <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(results);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        (reason) =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;p1 resolved&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;p2 resolved&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;cost&quot;</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all2([p1, p2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;cost&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/7e60fc1be1b2">理解和使用 Promise.all 和 Promise.race</a></p><h4 id="使用-promise-实现-sleep"><a href="#使用-promise-实现-sleep" class="headerlink" title="使用 promise 实现 sleep()"></a>使用 promise 实现 sleep()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * s 休眠时长， 单位：秒</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s || <span class="number">0</span>;</span><br><span class="line">    s = <span class="built_in">parseInt</span>(s) * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (now + s &lt; +<span class="keyword">new</span> <span class="built_in">Date</span>()) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">          resolve(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">3</span>); <span class="comment">// 休眠3秒</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`end  : <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013137242/article/details/83054750">JavaScript 通过 Promise 实现 sleep 方法</a></p><h4 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h4><ul><li>创建型模式<ul><li>工厂模式</li><li>单例模式</li></ul></li><li>结构型模式<ul><li>适配器</li><li>组合模式</li><li>装饰模式</li><li>代理模式</li></ul></li><li>行为模式<ul><li>观察者模式</li><li>策略模式</li><li>模板方法模式</li></ul></li></ul><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><p>在父类中提供一个创建对象的接口，以允许子类根据具体的需要创建对象。</p><p><strong>应用场景</strong>：</p><ol><li>当你在编码过程中，无法预知要使用的对象的确切类别时</li></ol><p><strong>设计原则</strong>：</p><ol><li>单一职责（工厂类负责所有对象的创建）</li><li>开闭原则（在增加新的类型时，客户端无需修改代码）</li></ol><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>保证一个类只有一个实例，并提供一个全局的访问方式。</p><p><strong>应用场景</strong>：</p><ol><li>当你需要保证一个类只有一个实例时。比如：控制某个共享资源的访问权限。</li><li>当你需要提供一个全局访问某个实例的方式，同时又要保护该实例不会被复写时。</li></ol><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><p>能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p><p><strong>应用场景</strong>：</p><ol><li>当你有许多仅在执行某些行为时略有不同的相似类时。</li><li>当你想要将类的业务逻辑与其算法实现细节隔离开来时。</li></ol><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其他对象。</p><p><strong>应用场景</strong>：</p><ol><li>当一个对象状态的改变需要引起其他对象的改变时</li></ol><p><a href="https://xie.infoq.cn/article/b81e720d57e4d453c5067aaa1">浅析常用设计模式及应用场景</a></p><h4 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h4><ul><li>数组</li><li>栈</li><li>队列</li><li>链表</li><li>图</li><li>树</li><li>前缀树</li><li>哈希表</li></ul><h3 id="HTML-相关"><a href="#HTML-相关" class="headerlink" title="HTML 相关"></a>HTML 相关</h3><h4 id="圣杯布局双飞翼布局"><a href="#圣杯布局双飞翼布局" class="headerlink" title="圣杯布局双飞翼布局"></a>圣杯布局双飞翼布局</h4><p><img src="https://z3.ax1x.com/2021/03/29/cP8SKS.jpg" alt="圣杯布局双飞翼布局"></p><h5 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h5><ul><li>首先把 left、middle、right 都放出来</li><li>给它们三个设置上 float: left, 脱离文档流；</li><li>一定记得给 container 设置上 overflow: hidden; 可以形成 BFC 撑开文档</li><li>left、right 设置上各自的宽度</li><li>middle 设置 width: 100%;</li></ul><p>接下来比较重要了：</p><ul><li>给 left、middle、right 设置 position: relative;</li><li>left 设置 left: -leftWidth, right 设置 right: -rightWidth;</li><li>container 设置 padding: 0, rightWidth, 0, leftWidth;</li></ul><h5 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h5><ul><li>首先把 left、middle、right 都放出来, middle 中增加 inner</li><li>给它们三个设置上 float: left, 脱离文档流；</li><li>一定记得给 container 设置上 overflow: hidden; 可以形成 BFC 撑开文档</li><li>left、right 设置上各自的宽度</li><li>middle 设置 width: 100%;</li></ul><p>接下来与圣杯布局不一样的地方：</p><ul><li>left 设置 margin-left: -100%, right 设置 right: -rightWidth;</li><li>container 设置 padding: 0, rightWidth, 0, leftWidth;</li></ul><p><a href="https://juejin.cn/post/6844903817104850952">深入理解圣杯布局和双飞翼布局</a></p><h4 id="相邻元素-margin-重叠产生的原因及解决方法"><a href="#相邻元素-margin-重叠产生的原因及解决方法" class="headerlink" title="相邻元素 margin 重叠产生的原因及解决方法"></a>相邻元素 margin 重叠产生的原因及解决方法</h4><p><a href="https://my.oschina.net/u/2612473/blog/2221555">垂直方向 margin 重叠原因与解决方法</a></p><h5 id="什么是-BFC-为什么会有-BFC-的概念"><a href="#什么是-BFC-为什么会有-BFC-的概念" class="headerlink" title="什么是 BFC 为什么会有 BFC 的概念"></a>什么是 BFC 为什么会有 BFC 的概念</h5><p>什么是 BFC：Block Formatting Context，解释为块级格式化上下文</p><p>一个 HTML 元素要创建 BFC，则满足下列的任意一个或多个条件即可：</p><p>1、float 的值不是 none。（float:left 或者 float:right）<br>2、position 的值不是 static 或者 relative。（position:absolute 或者 position:fixed）<br>3、display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex<br>4、overflow 的值不是 visible（overflow:hidden、overflow:scroll）<br>5、父元素与正常文件流的子元素（非浮动子元素）自动形成一个 BFC</p><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">什么是 BFC？看这一篇就够了</a><br><a href="https://zhuanlan.zhihu.com/p/45515245">BFC 是什么？</a></p><p>BFC 特性/功能</p><ul><li>父亲管儿子(子元素浮动，父元素不再塌陷)</li><li>兄弟之间划清界限(兄弟元素其一浮动重叠，另一个元素设置 BFC 便不再重叠)</li></ul><h3 id="CSS-相关"><a href="#CSS-相关" class="headerlink" title="CSS 相关"></a>CSS 相关</h3><h4 id="div-垂直水平居中"><a href="#div-垂直水平居中" class="headerlink" title="div 垂直水平居中"></a>div 垂直水平居中</h4><p>方法 1：绝对定位+margin:auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 2：绝对定位+负 margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 3：绝对定位+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>; <span class="comment">/* 定位父级的50% */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/*自己的50% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 4：flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  justify-content: center; //子元素水平居中</span><br><span class="line">  align-items: center; //子元素垂直居中</span><br><span class="line">  <span class="comment">/* aa只要三句话就可以实现不定宽高水平垂直居中。 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 5：table-cell 实现居中</p><p>设置<br>display:table-cell;<br>text-align:center;<br>vertical-align: middle;</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="前端项目性能优化"><a href="#前端项目性能优化" class="headerlink" title="前端项目性能优化"></a>前端项目性能优化</h4><ul><li>请求数量：合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</li><li>请求带宽：开启 Gzip，精简 JS，移除重复脚本，图像优化，将 Icon 做成字体</li><li>缓存利用：使用 CDN，使用外部 JS、CSS，添加 Expires 头，减少 DNS 查找，配置 ETag，使 AJAX 可缓存</li><li>页面结构：样式表放在顶部，脚本放在底部，尽早刷新文档的输出</li><li>代码校验：避免 CSS 表达式，避免重定向</li></ul><h4 id="输入地址后的过程"><a href="#输入地址后的过程" class="headerlink" title="输入地址后的过程"></a>输入地址后的过程</h4><ol><li>域名解析</li><li>发起 TCP3 次握手</li><li>建立 TCP 链接后发起 http 请求</li><li>服务器响应 http 请求，浏览器获得 html 代码</li><li>浏览器解析 html 代码，并请求 html 中的资源</li><li>浏览器对页面进行渲染并呈现给用户</li></ol><h4 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h4><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><p><a href="https://juejin.cn/post/6844903565610188807">十分钟读懂浏览器渲染流程</a></p><h4 id="浏览器循环机制"><a href="#浏览器循环机制" class="headerlink" title="浏览器循环机制"></a>浏览器循环机制</h4><p>调用栈先入后出<br>消息队列先入先出：异步操作-feath、settimeout<br>微任务在消息队列前执行 promise<br><img src="https://z3.ax1x.com/2021/03/29/c9b9hQ.png" alt="EventLoop"><br>调用栈先进后出<br><img src="https://z3.ax1x.com/2021/03/29/c9bPpj.png" alt="EventLoop"><br>fetch、事件回调、setTimeout、setInterval 会压入消息队列，消息队列在调用栈清空后执行，先入先出<br><img src="https://z3.ax1x.com/2021/03/29/c9bSAS.png" alt="EventLoop"><br>使用 promise、async await 创建的异步操作会被放置于微任务队列，会在调用栈清空时立即执行，先于消息队列执行<br><img src="https://z3.ax1x.com/2021/03/29/c9bptg.png" alt="EventLoop"></p><p><a href="https://juejin.cn/post/6844903606466904078">浏览器事件循环机制（event loop）</a><br><a href="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&amp;seid=2586724673120864651">2 分钟了解 JavaScript Event Loop</a></p><h4 id="请求的方法有哪些-option-是什么含义"><a href="#请求的方法有哪些-option-是什么含义" class="headerlink" title="请求的方法有哪些 option 是什么含义"></a>请求的方法有哪些 option 是什么含义</h4><p>GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE</p><h5 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h5><p>HEAD 方法与 GET 方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应 HEAD 请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD 方法常被用于客户端查看服务器的性能。</p><h5 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h5><p>CONNECT 方法是 HTTP/1.1 协议预留的，能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接与非加密的 HTTP 代理服务器的通信。</p><h5 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h5><p>OPTIONS 请求与 HEAD 类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有 HTTP 请求方法，该方法会用’*‘来代替资源名称，向服务器发送 OPTIONS 请求，可以测试服务器功能是否正常。JavaScript 的 XMLHttpRequest 对象进行 CORS 跨域资源共享时，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许</p><h5 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h5><p>TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。</p><p><a href="https://itbilu.com/other/relate/EkwKysXIl.html">HTTP 请求方法详解</a></p><h4 id="网站漏洞的攻击方式和预防"><a href="#网站漏洞的攻击方式和预防" class="headerlink" title="网站漏洞的攻击方式和预防"></a>网站漏洞的攻击方式和预防</h4><p>网络安全攻击方式</p><h5 id="DDoS-攻击"><a href="#DDoS-攻击" class="headerlink" title="DDoS 攻击"></a>DDoS 攻击</h5><p>DDoS 是最常见的一种攻击方式，攻击者通过向某一个站点服务器反复发送请求，导致服务器无法承载大量的请求而产生“拒绝服务”，这就导致正常的服务无法进行，影响我们服务器的使用。</p><h5 id="获取账号和密码"><a href="#获取账号和密码" class="headerlink" title="获取账号和密码"></a>获取账号和密码</h5><p>这类攻击会存在一定的技术性。一般来说，攻击者会利用程序来抓取数据包，获取口令和数据内容，通过侦听程序在来监视网络数据流，进而通过分析获取用户的登录账号和密码。</p><h5 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h5><p>SQL 注入的攻击手段主要是利用后台的漏洞，通过 URL 将关键 SQL 语句带入程序，在数据库中进行破坏。许多的攻击者会使用 F12 或者 postman 等拼装 ajax 请求，将非法的数字发送给后台，造成程序的报错，并展现在页面上，这样攻击者就会知道后台使用的语言和框架了。</p><h5 id="恶意小程序"><a href="#恶意小程序" class="headerlink" title="恶意小程序"></a>恶意小程序</h5><p>这类攻击的方式主要存在我们使用的程序上面，它们可以通过入侵修改硬盘上的文件、窃取口令等。</p><h5 id="木马植入"><a href="#木马植入" class="headerlink" title="木马植入"></a>木马植入</h5><p>这种攻击方式主要是通过向服务器植入木马，开启后面，获取服务器的控制权，恶意破坏服务器文件或盗取服务器数据，这类的危害都是比较大的。</p><p><a href="https://blog.fundebug.com/2019/01/25/11-security-flaws-for-web-application/">WEB 应用常见 15 种安全漏洞一览</a></p><h4 id="最近有新学习什么技术么"><a href="#最近有新学习什么技术么" class="headerlink" title="最近有新学习什么技术么"></a>最近有新学习什么技术么</h4><h5 id="flutter1-0-和-2-0-的差别有什么"><a href="#flutter1-0-和-2-0-的差别有什么" class="headerlink" title="flutter1.0 和 2.0 的差别有什么"></a>flutter1.0 和 2.0 的差别有什么</h5><p>Flutter2.0 最大的变化是除了之前已经处于 stable 渠道的移动设备支持外，<br>桌面和 Web 支持也正式宣布进入 stable 渠道.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/03/15/6BreZF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>马家湾湿地公园</title>
    <link href="https://www.gaotianyang.top/archives/20210321759a16cd/"/>
    <id>https://www.gaotianyang.top/archives/20210321759a16cd/</id>
    <published>2021-03-21T08:26:24.000Z</published>
    <updated>2023-12-04T03:26:28.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/07/01/Rsfgfg.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>初次到马家湾湿地公园，河畔的花都开了，景色美不胜收。</p></blockquote><p><img src="https://z3.ax1x.com/2021/07/01/RsfRpQ.jpg" alt="千树万树啥花开？"><br><img src="https://z3.ax1x.com/2021/07/01/RsfWlj.jpg" alt="马家湾湿地公园"><br><img src="https://z3.ax1x.com/2021/07/01/RsfctS.jpg" alt="东坝郊野公园"><br><img src="https://z3.ax1x.com/2021/07/01/RshEjA.jpg" alt="路边的小野花"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/01/Rsfgfg.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="马家湾湿地公园" scheme="https://www.gaotianyang.top/tags/%E9%A9%AC%E5%AE%B6%E6%B9%BE%E6%B9%BF%E5%9C%B0%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>单点登录和单一登录</title>
    <link href="https://www.gaotianyang.top/archives/20210315771a976/"/>
    <id>https://www.gaotianyang.top/archives/20210315771a976/</id>
    <published>2021-03-15T01:08:15.000Z</published>
    <updated>2021-10-20T04:16:03.032Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/03/15/6BwwuD.jpg" alt="首屏图"></p><a id="more"></a><h2 id="单点登录和单一登录"><a href="#单点登录和单一登录" class="headerlink" title="单点登录和单一登录"></a>单点登录和单一登录</h2><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>单点登录是登录之后，所有该域名的网站都可以不用登录了，包括子域名。</p><p>单点登录是从一个系统登录以后，其他地方不用登录。</p><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。<br>SSO 的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p>较大的企业内部，一般都有很多的业务支持系统为其提供相应的管理和 IT 服务</p><p>单点登录的机制也一样，如下图所示，当用户第一次访问应用系统 1 的时候，因为还没有登录，<br>会被引导到认证系统中进行登录（1）；根据用户提供的登录信息，认证系统进行身份效验，<br>如果通过效验，应该返回给用户一个认证的凭据－－ticket（2）；<br>用户再访问别的应用的时候（3，5）就会将这个 ticket 带上，作为自己认证的凭据，<br>应用系统接受到请求之后会把 ticket 送到认证系统进行效验，检查 ticket 的合法性（4，6）。<br>如果通过效验，用户就可以在不用再次登录的情况下访问应用系统 2 和应用系统 3 了。<br>[重点是 Ticket,参考中国电信，重点还有 认证中心]</p><p><img src="https://s3.ax1x.com/2021/03/15/6B0mad.gif" alt="单点登录"></p><p>从上面的视图可以看出，要实现 SSO，需要以下主要的功能：</p><ul><li>所有应用系统共享一个身份认证系统。<br>统一的认证系统是 SSO 的前提之一。认证系统的主要功能是将用户的登录信息和用户信息库相比较，对用户进行登录认证；认证成功后，认证系统应该生成统一的认证标志（ticket），返还给用户。另外，认证系统还应该对 ticket 进行效验，判断其有效性。</li><li>所有应用系统能够识别和提取 ticket 信息<br>要实现 SSO 的功能，让用户只登录一次，就必须让应用系统能够识别已经登录过的用户。应用系统应该能对 ticket 进行识别和提取，通过与认证系统的通讯，能自动判断当前用户是否登录过，从而完成单点登录的功能。</li><li>统一的认证系统并不是说只有单个的认证服务器，如下图所示，整个系统可以存在两个以上的认证服务器，这些服务器甚至可以是不同的产品。认证服务器之间要通过标准的通讯协议，互相交换认证信息，就能完成更高级别的单点登录。如下图，当用户在访问应用系统 1 时，由第一个认证服务器进行认证后，得到由此服务器产生的 ticket。当他访问应用系统 4 的时候，认证服务器 2 能够识别此 ticket 是由第一个服务器产生的，通过认证服务器之间标准的通讯协议（例如 SAML）来交换认证信息，仍然能够完成 SSO 的功能。</li></ul><p><img src="https://s3.ax1x.com/2021/03/15/6B0KPI.gif" alt="单点登录"></p><h3 id="单一登录，单账号单-ip-登录策略"><a href="#单一登录，单账号单-ip-登录策略" class="headerlink" title="单一登录，单账号单 ip 登录策略"></a>单一登录，单账号单 ip 登录策略</h3><p>用是<code>Cache.Insert(key(用户名),value(用户名),时间为(session.Timeout))</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Cache[<span class="string">&#x27;key&#x27;</span>] == 用户名) response.write(己经登录);</span><br></pre></td></tr></table></figure><p>我说一个比较普遍的做法，我看过很多项目就是这么干的，是可行的。用一个 Application 存储一个 Table，<br>Table 里记录 username,sessionid,time，那么在正式登陆之前就检查这个 Table 就可以了。<br>用户退出，可以根据这个 Table 移除记录，session、timeout 可以根据 sessionid 移除记录。</p><p>服务器中断了 Application 也就没了…这个思路应该可以帮你解决</p><p>放在服务器缓存中就可以。再次登录的时候判断当前用户列表中有没有，有的话，说明已经登录。</p><p>如果楼主说的一机一号的机制，那么可以直接绑定用户首次登录的 IP 地址，将用户的 IP 地址绑定在数据库中，<br>每次登录的时候判断 IP 是否正确。如用户是 IP 是自动获取的话，那么就绑定用户的硬件串口号。<br>要做成 QQ 那种形式的话可以在数据库中加字段来表明，帐号是否属于登录的状态。</p><p>用缓存+session 控制,如果缓存存在，则不让另外地方登录</p><p>每次登录都自动更新一次随机密码，也就是在用户表中 usrId usrName usrPass usrRanPass ，<br>用户每次登录后把随机密码记录 Cookie 或 session 中 （包括用户 ID），<br>然后每次刷新页面的时候用 UsrId 与 UsrRanPass 与数据库进行对比。如果随机密码不同则退出，也可以设为定时对比。</p><p>webform? 登录的时候提取一个 sessionID 保存在数据库里 ajax 和服务器保持联络，<br>检测服务器上的登录记录，当另一个用户登录的时候数据库的 sessionID 就会被现在登录的用户生存的 sessionID 替换掉，<br>那当 ajax 和服务器通信时匹配数据库里的 sessionID 不同时就提示。</p><p>据说 sessionID 是唯一的…实在不行就用 guid 生成一个也一样…不知道有没有说错</p><p>系统中一个 LoginSession 表（sessionId,UserId,ip,expireDate)</p><p>登录成功后，检查单点登录策略，如果当前是不允许多个地方登录，那么就清空 LoginSession 中当前 UesrId 的记录。<br>同时把当前 Session 记录起来，同时返回一个 token{sessionId,userId}给客户端。</p><p>每次和服务端的请求，都要到 LoginSession 中校验这个 token，看是否存在（被踢啦），是否过期（expireDate），是否被限定的 Ip 地址。</p><p>如果 Ok 的话，修改 expireDate，再延迟 20 分钟之类</p><p>上述接近方案，可以实现：踢人，限定 Ip，登录超时的问题</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/x-poior/p/6200919.html">单点登录和单一登录的区别？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/03/15/6BwwuD.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="SSO" scheme="https://www.gaotianyang.top/tags/SSO/"/>
    
    <category term="单点登录" scheme="https://www.gaotianyang.top/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
    <category term="单一登录" scheme="https://www.gaotianyang.top/tags/%E5%8D%95%E4%B8%80%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
</feed>
