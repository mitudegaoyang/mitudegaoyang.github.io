<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Hexo</title>
  
  
  <link href="https://www.gaotianyang.top/atom.xml" rel="self"/>
  
  <link href="https://www.gaotianyang.top/"/>
  <updated>2021-04-20T03:14:06.372Z</updated>
  <id>https://www.gaotianyang.top/</id>
  
  <author>
    <name>迷途的羔羊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试经</title>
    <link href="https://www.gaotianyang.top/archives/2021032932cd20c6/"/>
    <id>https://www.gaotianyang.top/archives/2021032932cd20c6/</id>
    <published>2021-03-29T02:27:35.000Z</published>
    <updated>2021-04-20T03:14:06.372Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/03/15/6BreZF.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前端面试汇总"><a href="#前端面试汇总" class="headerlink" title="前端面试汇总"></a>前端面试汇总</h2><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><p>最近的工作经历及项目经验，用到了哪些技术，负责哪些工作。</p><p>遇到了什么问题及怎么处理的。</p><h4 id="是否封装过组件，封装的过程是什么"><a href="#是否封装过组件，封装的过程是什么" class="headerlink" title="是否封装过组件，封装的过程是什么"></a>是否封装过组件，封装的过程是什么</h4><p><a href="https://zhuanlan.zhihu.com/p/111873208">React 组件封装技巧（HOC、Render Props、Hook）</a></p><h4 id="H5-项目做过什么"><a href="#H5-项目做过什么" class="headerlink" title="H5 项目做过什么"></a>H5 项目做过什么</h4><h5 id="屏幕尺寸适配"><a href="#屏幕尺寸适配" class="headerlink" title="屏幕尺寸适配"></a>屏幕尺寸适配</h5><p><a href="https://juejin.cn/post/6844904029898670088">都 2020 移动端适配你还用 flexible.js 吗？vw+rem 一行代码搞定</a></p><p>优点：不需要引入新的 js，一行代码搞定适配问题<br>缺点：浏览器兼容性差，IE9 以下不支持，但现代浏览器，特别是移动端，基本都支持</p><h5 id="em-和-rem-的区别"><a href="#em-和-rem-的区别" class="headerlink" title="em 和 rem 的区别"></a>em 和 rem 的区别</h5><p>两者都是相对尺寸</p><p>em 继承父级元素的字体大小<br>rem 是相对 HTML 根元素</p><h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。<br>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p><h5 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h5><p>事件触发过程中不触发，并设置延时。当延时完毕才调取，若延时内再次触发则重置延时。</p><p>设置状态或使用 lodash</p><h5 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h5><p>时间戳和定时器一定时间内只能触发一次</p><p><a href="https://juejin.cn/post/6844903618827517965">JS 的防抖与节流</a></p><h4 id="babel-的作用"><a href="#babel-的作用" class="headerlink" title="babel 的作用"></a>babel 的作用</h4><p>Babel 是一个广泛使用的转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。 这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p><h4 id="webpack-的-loader-和-plugin-的区别"><a href="#webpack-的-loader-和-plugin-的区别" class="headerlink" title="webpack 的 loader 和 plugin 的区别"></a>webpack 的 loader 和 plugin 的区别</h4><p>loader 一般是将某个语法统一处理为统一的语法<br>plugin 一般是在打包前或打包后对结果进行再次操作</p><p>loader:让 webpack 能够处理非 js 文件(自身职能理解 js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>例如：css-loader、style-loader、postcss-loader、sass-loader</p><p>plugins:从打包优化和压缩，一直到重新定义环境中的变量.<br>例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</p><p>loader 用于加载待打包的资源<br>plugin 用于扩展 webpack<br>loader：webpack 自身只支持 js 和 json 这两种格式的文件，对于其他文件需要通过 loader 将其转换为 commonJS 规范的文件后，webpack 才能解析到<br>plugin：是用于在 webpack 打包编译过程里，在对应的事件节点里执行自定义操作，比如资源管理、bundle 文件优化等操作</p><h4 id="组件库发布至-npm"><a href="#组件库发布至-npm" class="headerlink" title="组件库发布至 npm"></a>组件库发布至 npm</h4><p>这个是建立一个私有的 组件库<br><a href="https://www.cnblogs.com/zycbloger/p/sinopia.html">npm 私有仓库搭建</a></p><p>搭建 注册 发布 使用<br><a href="https://www.jianshu.com/p/c61f08b7cb88">npm 私有仓库搭建【verdaccio】</a></p><p><a href="https://my.oschina.net/u/4292771/blog/3306024">手把手教你搭建 npm 私有仓库及发布高质量的 npm 包</a></p><h4 id="路由-hash-和-history-有什么差别"><a href="#路由-hash-和-history-有什么差别" class="headerlink" title="路由 hash 和 history 有什么差别"></a>路由 hash 和 history 有什么差别</h4><ul><li>hash 模式是通过改变锚点(#)来更新页面 URL，并不会触发页面重新加载，我们可以通过 window.onhashchange 监听到 hash 的改变，从而处理路由。</li><li>history 模式是通过调用 window.history 对象上的一系列方法来实现页面的无刷新跳转。</li></ul><h5 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h5><p>hash，原本用来结合锚点控制页面视窗的位置，具有以下特点：</p><ul><li>可以改变 URL，但不会触发页面重新加载（hash 的改变会记录在 window.hisotry 中）因此并不算是一次 http 请求，所以这种模式不利于 SEO 优化</li><li>只能修改#后面的部分，因此只能跳转与当前 URL 同文档的 URL</li><li>只能通过字符串改变 URL</li><li>通过 window.onhashchange 监听 hash 的改变，借此实现无刷新跳转的功能。</li></ul><h5 id="history"><a href="#history" class="headerlink" title="history"></a>history</h5><p>根据 Mozilla Develop Network 的介绍，调用 history.pushState() 相比于直接修改 hash，存在以下优势</p><ul><li>新的 URL 可以是与当前 URL 同源的任意 URL，也可以与当前 URL 一样，但是这样会把重复的一次操作记录到栈中</li><li>通过参数 stateObject 可以添加任意类型的数据到记录中</li><li>可额外设置 title 属性供后续使用</li><li>通过 pushState、replaceState 实现无刷新跳转的功能。</li></ul><h6 id="history-常用方法"><a href="#history-常用方法" class="headerlink" title="history 常用方法"></a>history 常用方法</h6><ul><li>back()：后退到上一个路由；</li><li>forward()：前进到下一个路由，如果有的话；</li><li>go(number)：进入到任意一个路由，正数为前进，负数为后退；</li><li>pushState(obj, title, url)：前进到指定的 URL，不刷新页面；</li><li>replaceState(obj, title, url)：用 url 替换当前的路由，不刷新页面；</li></ul><p>前面的 hashchange，你只能改变#后面的 url 片段。而 pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL。<br>history 模式则会将 URL 修改得就和正常请求后端的 URL 一样,如后端没有配置对应/user/id 的路由处理，则会返回 404 错误。</p><h4 id="跨域如何处理"><a href="#跨域如何处理" class="headerlink" title="跨域如何处理"></a>跨域如何处理</h4><p>1、 通过 jsonp 跨域<br>2、 document.domain + iframe 跨域<br>3、 location.hash + iframe<br>4、 window.name + iframe 跨域<br>5、 postMessage 跨域<br>6、 跨域资源共享（CORS）<br>7、 nginx 代理跨域<br>8、 nodejs 中间件代理跨域<br>9、 WebSocket 协议跨域</p><p><a href="https://segmentfault.com/a/1190000011145364">前端常见跨域解决方案</a></p><h4 id="除了-dayjs-日期库还有用过其他日期库么"><a href="#除了-dayjs-日期库还有用过其他日期库么" class="headerlink" title="除了 dayjs 日期库还有用过其他日期库么"></a>除了 dayjs 日期库还有用过其他日期库么</h4><p>moment.js 和 dayjs 的差别</p><h4 id="git-提交的时候习惯用命令还是图形化管理工具"><a href="#git-提交的时候习惯用命令还是图形化管理工具" class="headerlink" title="git 提交的时候习惯用命令还是图形化管理工具"></a>git 提交的时候习惯用命令还是图形化管理工具</h4><h5 id="sourseTree-的校验如何实现的"><a href="#sourseTree-的校验如何实现的" class="headerlink" title="sourseTree 的校验如何实现的"></a>sourseTree 的校验如何实现的</h5><h5 id="git-插件如何提交"><a href="#git-插件如何提交" class="headerlink" title="git 插件如何提交"></a>git 插件如何提交</h5><h4 id="eslint-是否了解"><a href="#eslint-是否了解" class="headerlink" title="eslint 是否了解"></a>eslint 是否了解</h4><p>指定规范</p><p><a href="https://www.jianshu.com/p/ad1e46faaea2">Eslint 超简单入门教程</a></p><h4 id="小程序是否接触过"><a href="#小程序是否接触过" class="headerlink" title="小程序是否接触过"></a>小程序是否接触过</h4><p>做了一版小程序</p><h5 id="小程序如何获取-token"><a href="#小程序如何获取-token" class="headerlink" title="小程序如何获取 token"></a>小程序如何获取 token</h5><ol><li>微信小程序通过访问 wx.login 获得一个 code，返回给后台</li><li>后台拿着这个 code，调用腾讯的接口，获取到 openid、seesion-key 等信息，openid 是用户唯一的</li><li>后台拿着 openid 去数据库中检查，该用户是否是第一次登陆<ol><li>如果是第一次登陆，那么就新建一个用户–UserAcount；如果不是第一次登陆，就修改该用户的最后登录时间</li><li>不管是不是第一次登录，都有了一个用户</li></ol></li><li>然后根据用户的信息利用 JWT 生成 token，下发给微信小程序</li></ol><p><a href="https://www.dazhuanlan.com/2019/12/16/5df6867423c68/">小程序开发之获取 token 值</a></p><h4 id="混合开发用过什么-与原生交互如蓝牙图片等"><a href="#混合开发用过什么-与原生交互如蓝牙图片等" class="headerlink" title="混合开发用过什么 与原生交互如蓝牙图片等"></a>混合开发用过什么 与原生交互如蓝牙图片等</h4><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="cookie-SessionStorage-LocalStorage-的差别"><a href="#cookie-SessionStorage-LocalStorage-的差别" class="headerlink" title="cookie SessionStorage LocalStorage 的差别"></a>cookie SessionStorage LocalStorage 的差别</h4><p>相同点：</p><ul><li>都是存储数据，存储在 web 端，并且都是同源</li></ul><p>不同点：</p><ol><li>cookie 只有 4K 小 并且每一次请求都会带上 cookie 体验不好，浪费带宽</li><li>session 和 local 直接存储在本地，请求不会携带，并且容量比 cookie 要大的多(sessionStorage 约 5M、localStorage 约 20M)</li><li>session 是临时会话，当窗口被关闭的时候就清除掉 ，而 local 永久存在，cookie 有过期时间</li><li>cookie 和 local 都可以支持多窗口共享，而 session 不支持多窗口共享 但是都支持 a 链接跳转的新窗口</li></ol><p>cookie 数量和长度都有限制，Web Storage 解决了这样的限制，且 localStorage 做到了永久储存。<br>但是 Cookie 也是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在 ，<br>而 Web Storage 仅仅是为了在本地“存储”数据而生。</p><p>web 存储的特点</p><ol><li>设置、读取方便</li><li>容量较大，sessionStorage 约 5M、localStorage 约 20M</li><li>只能存储字符串，可以将对象 JSON.stringify() 编码后存储</li></ol><p>sessionStorage</p><ol><li>生命周期为关闭当前页面窗口</li><li>不能多窗口下数据可以共享 （同源策略，百度家的 local 阿里他们家是拿不到）</li><li>补充：通过跳转可以 运用场景： 页面跳转的时候可以通过 session 实现数据共享 在一些单页面（spa）的运用中，进行页面传值的时候比较有用</li></ol><p>localStorage</p><ol><li>永久生效，除非手动删除或用代码删除</li><li>可以多窗口共享（同源策略）</li><li>运用场景：一些不涉及到安全的一些数据（不要太过庞大）都可以存储到本地</li></ol><p><a href="https://segmentfault.com/a/1190000010400892">cookie、sessionStorage、localStorage 详解及应用场景</a></p><h5 id="AB-相同页面-LocalStorage-是否相互影响"><a href="#AB-相同页面-LocalStorage-是否相互影响" class="headerlink" title="AB 相同页面 LocalStorage 是否相互影响"></a>AB 相同页面 LocalStorage 是否相互影响</h5><p>A 页面改变 LocalStorageB 页面如何监听到</p><ul><li>同一浏览器打开了两个同源页面</li><li>其中一个网页修改了 localStorage</li><li>另一网页注册了 storage 事件</li></ul><p><a href="https://www.jianshu.com/p/519a1b42d659">监听 localStorage 变化</a></p><h4 id="H5-缓存"><a href="#H5-缓存" class="headerlink" title="H5 缓存"></a>H5 缓存</h4><p><a href="https://segmentfault.com/a/1190000004132566">H5 缓存机制浅析 - 移动端 Web 加载性能优化</a></p><h4 id="资源缓存有哪些类型"><a href="#资源缓存有哪些类型" class="headerlink" title="资源缓存有哪些类型"></a>资源缓存有哪些类型</h4><p>HTML<br>JavaScript<br>CSS、SCSS<br>图片<br>SVG<br>视频、音频和字幕<br>字体文件</p><h4 id="为什么会出现缓存-200-和-304-是怎么发生的"><a href="#为什么会出现缓存-200-和-304-是怎么发生的" class="headerlink" title="为什么会出现缓存 200 和 304 是怎么发生的"></a>为什么会出现缓存 200 和 304 是怎么发生的</h4><p>请求 200 还是请求 304 是根据什么区分的</p><p>首次请求：200<br>缓存有效期内请求：200(from cache)——再次请求文件未超时不发送请求<br>缓存过期后请求：304（Not Modified)——文件缓存超时，发送请求到服务器，并携带本地缓存的文件信息，服务器对比信息(最后修改时间)，可继续使用时，返回 304 表示可据需使用</p><p><a href="https://blog.csdn.net/apple_osp/article/details/106717505">HTTP 304 与 200 区别</a></p><h4 id="Http-请求状态码有哪些及含义"><a href="#Http-请求状态码有哪些及含义" class="headerlink" title="Http 请求状态码有哪些及含义"></a>Http 请求状态码有哪些及含义</h4><ul><li>100:信息响应</li><li>200:成功响应</li><li>300:重定向<ul><li>304: Not Modified 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</li></ul></li><li>400:客户端响应</li><li>500:服务端响应<ul><li>502:此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</li><li>504:当服务器作为网关，不能及时得到响应时返回此错误代码。</li></ul></li></ul><h4 id="http2-0-和-http1-x-的区别"><a href="#http2-0-和-http1-x-的区别" class="headerlink" title="http2.0 和 http1.x 的区别"></a>http2.0 和 http1.x 的区别</h4><ul><li>http1 的解析是基于文本协议的各式解析,而 http2.0 的协议解析是二进制格式,更加的强大</li><li>多路复用(Mutiplexing) : 一个连接上可以有多个 request,且可以随机的混在一起,每个不同的 request 都有对应的 id,服务端可以通过 request_id 来辨别,大大加快了传输速率</li><li>header 压缩: http1.x 中的 header 需要携带大量信息.而且每次都要重复发送.http2.0 使用 encode 来减少传输的 header 大小.而且客户端和服务端可以各自缓存(cache)一份 header filed 表,避免了 header 的重复传输,还可以减少传输的大小.</li><li>服务端推送(server push): 可以通过解析 html 中的依赖,智能的返回所需的其他文件(css 或者 js 等),而不用再发起一次请求.</li></ul><h3 id="Vue-相关"><a href="#Vue-相关" class="headerlink" title="Vue 相关"></a>Vue 相关</h3><h4 id="如何声明一个全局变量"><a href="#如何声明一个全局变量" class="headerlink" title="如何声明一个全局变量"></a>如何声明一个全局变量</h4><h4 id="深度选择器-deep"><a href="#深度选择器-deep" class="headerlink" title="深度选择器 /deep/"></a>深度选择器 /deep/</h4><ul><li>vue 组件的 scoped 属性的作用</li><li>在 style 标签上添加 scoped 属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的；</li><li>但是也得慎用：样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的；</li></ul><h4 id="route-和-router-的区别"><a href="#route-和-router-的区别" class="headerlink" title="#$route 和 $router 的区别"></a>#$route 和 $router 的区别</h4><p>$router是VueRouter的实例，在script标签中想要导航到不同的URL,使用$router.push 方法。<br>返回上一个历史 history 用 $router.to(-1) $route 为当前 router 跳转对象。里面可以获取当前路由的 name,path,query,parmas 等。</p><p>$route从当前router跳转对象里面可以获取name、path、query、params等（<code>&lt;router-link&gt;</code>传的参数由 this.$route.query 或者 this.$route.params 接收）</p><p>$router为VueRouter实例。想要导航到不同URL，则使用$router.push 方法；返回上一个 history 也是使用$router.go 方法</p><h4 id="params-和-query-的区别-如何获取传递的参数"><a href="#params-和-query-的区别-如何获取传递的参数" class="headerlink" title="params 和 query 的区别?如何获取传递的参数"></a>params 和 query 的区别?如何获取传递的参数</h4><p>url 地址显示：query 更加类似于我们 ajax 中 get 传参，params 则类似于 post，<br>说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示<br>注意点：query 刷新不会丢失 query 里面的数据 params 刷新会丢失 params 里面的数据。</p><p>this.$route.query.name和this.$route.params.name</p><h4 id="vue-router-的有哪两种模式？-history-模式的问题是是什么？"><a href="#vue-router-的有哪两种模式？-history-模式的问题是是什么？" class="headerlink" title="vue-router 的有哪两种模式？ history 模式的问题是是什么？"></a>vue-router 的有哪两种模式？ history 模式的问题是是什么？</h4><ul><li>hash 模式：即地址栏 URL 中的 # 符号；</li><li>history 模式：window.history 对象打印出来可以看到里边提供的方法和记录长度。利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）</li><li>hash 模式是通过改变锚点(#)来更新页面 URL，并不会触发页面重新加载，我们可以通过 window.onhashchange 监听到 hash 的改变，从而处理路由。</li><li>history 模式是通过调用 window.history 对象上的一系列方法来实现页面的无刷新跳转。</li></ul><h3 id="React-相关"><a href="#React-相关" class="headerlink" title="React 相关"></a>React 相关</h3><h4 id="如何搭建-react-项目"><a href="#如何搭建-react-项目" class="headerlink" title="如何搭建 react 项目"></a>如何搭建 react 项目</h4><p>creat-react-app</p><h4 id="简述-react-脚手架的原理"><a href="#简述-react-脚手架的原理" class="headerlink" title="简述 react 脚手架的原理"></a>简述 react 脚手架的原理</h4><h4 id="React-生命周期有哪些"><a href="#React-生命周期有哪些" class="headerlink" title="React 生命周期有哪些"></a>React 生命周期有哪些</h4><p><img src="https://z3.ax1x.com/2021/03/29/cP3j8P.png" alt="life-cycle"></p><p>生命周期的方法有：</p><ul><li>componentWillMount 在渲染前调用,在客户端也在服务端。</li><li>componentDidMount 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的 DOM 结构，可以通过 this.getDOMNode()来进行访问。 如果你想和其他 JavaScript 框架一起使用，可以在这个方法中调用 setTimeout, setInterval 或者发送 AJAX 请求等操作(防止异步操作阻塞 UI)。</li><li>componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化 render 时不会被调用。</li><li>shouldComponentUpdate 返回一个布尔值。在组件接收到新的 props 或者 state 时被调用。在初始化时或者使用 forceUpdate 时不被调用。可以在你确认不需要更新组件时使用。</li><li>componentWillUpdate 在组件接收到新的 props 或者 state 但还没有 render 时被调用。在初始化时不会被调用。</li><li>componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。</li><li>componentWillUnmount 在组件从 DOM 中移除之前立刻被调用。</li></ul><p>即将弃用：</p><ul><li>componentWillMount</li><li>componentWillReceiveProps</li><li>componentWillUpdate</li></ul><p>新增：</p><ul><li>getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ul><p><a href="https://juejin.cn/post/6844904005152276487">React 的生命周期变化</a></p><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>useState 扁平化存储数据<br>useEffect 初始化时、监听某个或某几个值变化、监听卸载</p><p><a href="https://zhuanlan.zhihu.com/p/88593858">谈谈 react hooks 的优缺点</a></p><h4 id="react-渲染虚拟-dom-的过程"><a href="#react-渲染虚拟-dom-的过程" class="headerlink" title="react 渲染虚拟 dom 的过程"></a>react 渲染虚拟 dom 的过程</h4><h4 id="react-列表的-keys-的作用是什么"><a href="#react-列表的-keys-的作用是什么" class="headerlink" title="react 列表的 keys 的作用是什么"></a>react 列表的 keys 的作用是什么</h4><p>Keys 可以在 DOM 中的某些元素被增加或删除的时候帮助 React 识别哪些元素发生了变化。因此你应当给数组中的每一个元素赋予一个确定的标识。</p><p>一般使用 id，如果没有使用 index。</p><p>不推荐使用 index，在可调整排序的列表中性能较差。</p><h4 id="react-和-vue-的差别有哪些"><a href="#react-和-vue-的差别有哪些" class="headerlink" title="react 和 vue 的差别有哪些"></a>react 和 vue 的差别有哪些</h4><p>相同点：</p><ul><li>都使用 Virtural DOM</li><li>都使用组件化思想，流程基本一致</li><li>都是响应式，推崇单向数据流</li><li>都有成熟的社区，都支持服务端渲染</li></ul><p>不同点：</p><p>Vue 推崇灵活易用（渐进式开发体验），数据可变，双向数据绑定（依赖收集）<br>React 推崇函数式编程（纯组件），数据不可变以及单向数据流</p><p>Vue 推崇 template（简单易懂，从传统前端转过来易于理解）、单文件 vue<br>React 推崇 JSX、HOC、all in js</p><p><a href="https://juejin.cn/post/6844904158093377549">Vue 和 React 区别</a></p><h4 id="react-和-vue-的优缺点"><a href="#react-和-vue-的优缺点" class="headerlink" title="react 和 vue 的优缺点"></a>react 和 vue 的优缺点</h4><p>React.js 的优点：灵活性和响应性、虚拟 DOM、丰富的 JavaScript 库、可扩展性、不断发展、Web 或移动平台</p><ul><li>灵活性和响应性：它提供最大的灵活性和响应能力。</li><li>虚拟 DOM：由于它基于文档对象模型，因此它允许浏览器友好地以 HTML，XHTML 或 XML 格式排列文档。</li><li>丰富的 JavaScript 库：来自世界各地的贡献者正在努力添加更多功能。</li><li>可扩展性：由于其灵活的结构和可扩展性，React 已被证明对大型应用程序更好。</li><li>不断发展： React 得到了 Facebook 专业开发人员的支持，他们不断寻找改进方法。</li><li>Web 或移动平台： React 提供 React Native 平台，可通过相同的 React 组件模型为 iOS 和 Android 开发本机呈现的应用程序。无论是 Web 还是本机移动开发，React 都是大多数用户界面设计平台的理想选择。</li></ul><p>React.js 的缺点：陡峭的学习曲线</p><ul><li>陡峭的学习曲线：由于复杂的设置过程，属性，功能和结构，它需要深入的知识来构建应用程序。</li></ul><p>现在，让我们转到 Vue.js 并谈谈它的优点和缺点：<br>与 React 相比，Vue.js 的下载量更少，并且主要用于构建有吸引力的单页面应用程序和 Web 应用程序。但是，Vue.js 具有适应性强的体系结构，使其成为广泛使用的框架之一，具有最新的库和包。</p><p>使用 Vue.Js 的优点：易于使用、更顺畅的集成、更好的性能，更小的尺寸、精心编写的文档、适应性</p><ul><li>易于使用： Vue.js 包含基于 HTML 的标准模板，可以更轻松地使用和修改现有应用程序。</li><li>更顺畅的集成：无论是单页应用程序还是复杂的 Web 界面，Vue.js 都可以更平滑地集成更小的部件，而不会对整个系统产生任何影响。</li><li>更好的性能，更小的尺寸：它占用更少的空间，并且往往比其他框架提供更好的性能。</li><li>精心编写的文档：通过详细的文档提供简单的学习曲线，无需额外的知识; HTML 和 JavaScript 将完成工作。</li><li>适应性：整体声音设计和架构使其成为一种流行的 JavaScript 框架。它提供无障碍的迁移，简单有效的结构和可重用的模板。</li></ul><p>使用 Vue.js 的缺点：市场份额小。世界范围内的外企有刻意回避使用的情况。</p><ul><li>与 Angular 和 React 相比，Vue.js 框架的市场份额仍然很小。它正在快速流行，但与此同时，在使用 Vue.js 时，可能会出现大规模应用程序开发方面的问题。<br>好吧，考虑到其现代功能，速度和灵活性，Vue.js 有可能实现 Web 应用程序开发的里程碑。</li></ul><h3 id="JS-相关"><a href="#JS-相关" class="headerlink" title="JS 相关"></a>JS 相关</h3><h4 id="检测变量的类型并区分数组和对象"><a href="#检测变量的类型并区分数组和对象" class="headerlink" title="检测变量的类型并区分数组和对象"></a>检测变量的类型并区分数组和对象</h4><table><thead><tr><th>值</th><th>类型</th></tr></thead><tbody><tr><td>typeof 1</td><td>“number”</td></tr><tr><td>typeof NaN</td><td>“number”</td></tr><tr><td>typeof “1”</td><td>“string”</td></tr><tr><td>typeof true</td><td>“boolean”</td></tr><tr><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>typeof null</td><td>“object”</td></tr><tr><td>typeof []</td><td>“object”</td></tr><tr><td>typeof {}</td><td>“object”</td></tr></tbody></table><ul><li>如果返回 number，判断是否是 NAN，isNaN(a) ，</li><li>首先使用 typeof 判断，如果返回 object，判断是否为 null</li><li>最后使用 toString 如果是”[object Object]”是对象，否则是数组。</li></ul><p><a href="https://segmentfault.com/a/1190000018160547">javascript 判断数据类型的几种方法</a></p><h4 id="对比对象-A、B-是否相等"><a href="#对比对象-A、B-是否相等" class="headerlink" title="对比对象 A、B 是否相等()"></a>对比对象 A、B 是否相等()</h4><p><a href="https://juejin.cn/post/6844903802298974221">JavaScript 中，如何判断两个对象是否相等？</a></p><ul><li>判断 A===B 返回 true</li><li>判断 A 和 B 长度是否相等<ul><li>如果不等返回 false</li></ul></li><li>遍历对比</li></ul><h5 id="js-获取对象长度"><a href="#js-获取对象长度" class="headerlink" title="js 获取对象长度"></a>js 获取对象长度</h5><p>对象无法直接获取 length，可以使用原生的 Object.keys 获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objA = &#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;18&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> objB = &#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;18&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Object</span>.keys(objA);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  objA[item] === objB[item];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="多维转一维数组"><a href="#多维转一维数组" class="headerlink" title="多维转一维数组"></a>多维转一维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>], <span class="number">6</span>], <span class="number">7</span>];</span><br></pre></td></tr></table></figure><ul><li>递归</li><li>toString 正则处理</li><li>Array​.prototype​.flat(Infinity)</li><li>扩展运算符</li></ul><p>递归</p><blockquote><p>递归的遍历每一项，若为数组则继续遍历，否则 concat</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  [[<span class="number">9</span>, <span class="number">10</span>], <span class="number">11</span>],</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  arr.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      result = result.concat(flat(item));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flat(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure><p>扩展运算符</p><blockquote><p>… 用于取出参数对象的所有可遍历属性，拷贝到当前对象中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>],</span><br><span class="line">  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  [[<span class="number">9</span>, <span class="number">10</span>], <span class="number">11</span>],</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.some(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">    arr = [].concat(...arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flat(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_38128179/article/details/89950590">扁平化数组的几种方法</a></p><h4 id="变量提升函数提升"><a href="#变量提升函数提升" class="headerlink" title="变量提升函数提升"></a>变量提升函数提升</h4><p><a href="https://blog.csdn.net/kontar123/article/details/83508740">js 中的变量提升和函数提升</a></p><h4 id="前端模块化的规范"><a href="#前端模块化的规范" class="headerlink" title="前端模块化的规范"></a>前端模块化的规范</h4><p>CommonJS： 在 NodeJS 中实现。主要方法是 exports 和 require<br>AMD：提前执行依赖-尽早执行 requireJs<br>CMD：按需执行依赖-懒执行 seaJs<br>ES6: import 和 export</p><h4 id="ES6-有哪些新特性"><a href="#ES6-有哪些新特性" class="headerlink" title="ES6 有哪些新特性"></a>ES6 有哪些新特性</h4><ol><li>不一样的变量声明：const 和 let</li><li>模板字符串</li><li>箭头函数（Arrow Functions）</li><li>函数的参数默认值</li><li>Spread / Rest 操作符</li><li>二进制和八进制字面量</li><li>对象和数组解构</li><li>对象超类</li><li>for…of 和 for…in</li><li>ES6 中的类</li></ol><p><a href="https://juejin.cn/post/6844903618810757128">ES6 中常用的 10 个新特性讲解</a></p><h5 id="箭头函数能作为构造函数吗"><a href="#箭头函数能作为构造函数吗" class="headerlink" title="箭头函数能作为构造函数吗"></a>箭头函数能作为构造函数吗</h5><ul><li>从上面的运行结果也可以看到箭头函数与构造函数相比，缺少了很多东西，比如：caller，arguments，prototype，但同时也可以看到，箭头函数是有<strong>proto</strong>属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是原型链到箭头函数这一环就停止了，因为它自己没有 prototype 属性，没法让他的实例的<strong>proto</strong>属性指向，所以箭头函数也就无法作为构造函数。</li><li>同时我们可以看到，由于箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数，不能绑定 this，所以 call()和 apply()的第一个参数会被忽略。</li></ul><p><a href="https://blog.csdn.net/weixin_42798473/article/details/105319353">箭头函数为什么不能作为构造函数？</a></p><h4 id="原型、原型链是什么"><a href="#原型、原型链是什么" class="headerlink" title="原型、原型链是什么"></a>原型、原型链是什么</h4><h5 id="原型是什么"><a href="#原型是什么" class="headerlink" title="原型是什么"></a>原型是什么</h5><p>JS 中每个函数都存在有一个原型对象属性 prototype。并且所有函数的默认原型都是 Object 的实例。</p><h5 id="原型链是什么"><a href="#原型链是什么" class="headerlink" title="原型链是什么"></a>原型链是什么</h5><p>原型链，简单理解就是原型组成的链，对象的<strong>proto</strong>它的是原型，而原型也是一个对象，也有<strong>proto</strong>属性，<br>原型的<strong>proto</strong>又是原型的原型，就这样可以一直通过<strong>proto</strong>想上找，这就是原型链，当向上找找到 Object 的原型的时候，这条原型链就算到头了。</p><h5 id="原型链作用"><a href="#原型链作用" class="headerlink" title="原型链作用"></a>原型链作用</h5><p>原型链实现了继承。原型链存在两个问题：</p><ol><li>包含引用类型值的原型属性会被所有实例共享。</li><li>在创建子类型时，无法向超类型的构造函数中传递参数。</li></ol><h5 id="如何检测它的原型链"><a href="#如何检测它的原型链" class="headerlink" title="如何检测它的原型链"></a>如何检测它的原型链</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prototypeObject.isPrototypeOf(object);</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/5801.html">JS isPrototypeOf()方法：检测一个对象是否存在于另一个对象的原型链中</a></p><h5 id="实例的原型链的上一层指向什么"><a href="#实例的原型链的上一层指向什么" class="headerlink" title="实例的原型链的上一层指向什么"></a>实例的原型链的上一层指向什么</h5><p>构造函数的 protoType</p><h4 id="New-关键词干了什么"><a href="#New-关键词干了什么" class="headerlink" title="New 关键词干了什么"></a>New 关键词干了什么</h4><ol><li>创建一个新对象</li><li>将新对象的<em>proto</em>指向构造函数的 prototype 对象</li><li>将构造函数的作用域赋值给新对象 （也就是 this 指向新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = &#123;&#125;;</span><br><span class="line">Obj._proto_ = Person.prototype();</span><br><span class="line">Person.call(Obj);</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_34038293/article/details/92886267">js 中的 new 关键字做了什么？</a></p><h4 id="事件监听函数参数有什么"><a href="#事件监听函数参数有什么" class="headerlink" title="事件监听函数参数有什么"></a>事件监听函数参数有什么</h4><p>event、function、Boolean</p><p>event：监听什么事件<br>function：触发什么方法<br>Boolean：是否冒泡</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Promise(resolve, reject)和 Promise.all([])</p><h5 id="promise-代码的输出结果是什么"><a href="#promise-代码的输出结果是什么" class="headerlink" title="promise 代码的输出结果是什么"></a>promise 代码的输出结果是什么</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><blockquote><p>输出结果是什么</p></blockquote><p>(ok)</p><blockquote><p>为什么不是 err</p></blockquote><p><a href="https://yuanfentiank789.github.io/2019/11/07/promise%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%80%BB%E7%BB%93/">promise 执行顺序总结</a></p><h5 id="promise-有哪些状态是如何改变的"><a href="#promise-有哪些状态是如何改变的" class="headerlink" title="promise 有哪些状态是如何改变的"></a>promise 有哪些状态是如何改变的</h5><p>promise 有 3 种状 态： pending、fulfilled 或 rejected。<br>状态改变只能是 pending-&gt;fulfilled 或者 pending-&gt; rejected，状态一旦改变则不能再变。</p><h5 id="promise-的-then-的参数类型是什么"><a href="#promise-的-then-的参数类型是什么" class="headerlink" title="promise 的.then 的参数类型是什么"></a>promise 的.then 的参数类型是什么</h5><p>Promise 类型的对象</p><p><a href="https://blog.csdn.net/weixin_41728198/article/details/103450075">Promise.then 函数返回值类型与参数传递</a></p><h5 id="手动实现-Promise-all"><a href="#手动实现-Promise-all" class="headerlink" title="手动实现 Promise.all"></a>手动实现 Promise.all</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all2 = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = promises.length;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">      results = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(</span><br><span class="line">        (value) =&gt; &#123;</span><br><span class="line">          count++;</span><br><span class="line">          results[i] = value;</span><br><span class="line">          <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(results);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        (reason) =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;p1 resolved&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;p2 resolved&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;cost&quot;</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all2([p1, p2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;cost&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/7e60fc1be1b2">理解和使用 Promise.all 和 Promise.race</a></p><h4 id="使用-promise-实现-sleep"><a href="#使用-promise-实现-sleep" class="headerlink" title="使用 promise 实现 sleep()"></a>使用 promise 实现 sleep()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * s 休眠时长， 单位：秒</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s || <span class="number">0</span>;</span><br><span class="line">    s = <span class="built_in">parseInt</span>(s) * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (now + s &lt; +<span class="keyword">new</span> <span class="built_in">Date</span>()) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">          resolve(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`start: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">3</span>); <span class="comment">// 休眠3秒</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`end  : <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013137242/article/details/83054750">JavaScript 通过 Promise 实现 sleep 方法</a></p><h4 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h4><ul><li>创建型模式<ul><li>工厂模式</li><li>单例模式</li></ul></li><li>结构型模式<ul><li>适配器</li><li>组合模式</li><li>装饰模式</li><li>代理模式</li></ul></li><li>行为模式<ul><li>观察者模式</li><li>策略模式</li><li>模板方法模式</li></ul></li></ul><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><p>在父类中提供一个创建对象的接口，以允许子类根据具体的需要创建对象。</p><p><strong>应用场景</strong>：</p><ol><li>当你在编码过程中，无法预知要使用的对象的确切类别时</li></ol><p><strong>设计原则</strong>：</p><ol><li>单一职责（工厂类负责所有对象的创建）</li><li>开闭原则（在增加新的类型时，客户端无需修改代码）</li></ol><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>保证一个类只有一个实例，并提供一个全局的访问方式。</p><p><strong>应用场景</strong>：</p><ol><li>当你需要保证一个类只有一个实例时。比如：控制某个共享资源的访问权限。</li><li>当你需要提供一个全局访问某个实例的方式，同时又要保护该实例不会被复写时。</li></ol><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><p>能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p><p><strong>应用场景</strong>：</p><ol><li>当你有许多仅在执行某些行为时略有不同的相似类时。</li><li>当你想要将类的业务逻辑与其算法实现细节隔离开来时。</li></ol><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其他对象。</p><p><strong>应用场景</strong>：</p><ol><li>当一个对象状态的改变需要引起其他对象的改变时</li></ol><p><a href="https://xie.infoq.cn/article/b81e720d57e4d453c5067aaa1">浅析常用设计模式及应用场景</a></p><h4 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h4><ul><li>数组</li><li>栈</li><li>队列</li><li>链表</li><li>图</li><li>树</li><li>前缀树</li><li>哈希表</li></ul><h3 id="HTML-相关"><a href="#HTML-相关" class="headerlink" title="HTML 相关"></a>HTML 相关</h3><h4 id="圣杯布局双飞翼布局"><a href="#圣杯布局双飞翼布局" class="headerlink" title="圣杯布局双飞翼布局"></a>圣杯布局双飞翼布局</h4><p><img src="https://z3.ax1x.com/2021/03/29/cP8SKS.jpg" alt="圣杯布局双飞翼布局"></p><h5 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h5><ul><li>首先把 left、middle、right 都放出来</li><li>给它们三个设置上 float: left, 脱离文档流；</li><li>一定记得给 container 设置上 overflow: hidden; 可以形成 BFC 撑开文档</li><li>left、right 设置上各自的宽度</li><li>middle 设置 width: 100%;</li></ul><p>接下来比较重要了：</p><ul><li>给 left、middle、right 设置 position: relative;</li><li>left 设置 left: -leftWidth, right 设置 right: -rightWidth;</li><li>container 设置 padding: 0, rightWidth, 0, leftWidth;</li></ul><h5 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h5><ul><li>首先把 left、middle、right 都放出来, middle 中增加 inner</li><li>给它们三个设置上 float: left, 脱离文档流；</li><li>一定记得给 container 设置上 overflow: hidden; 可以形成 BFC 撑开文档</li><li>left、right 设置上各自的宽度</li><li>middle 设置 width: 100%;</li></ul><p>接下来与圣杯布局不一样的地方：</p><ul><li>left 设置 margin-left: -100%, right 设置 right: -rightWidth;</li><li>container 设置 padding: 0, rightWidth, 0, leftWidth;</li></ul><p><a href="https://juejin.cn/post/6844903817104850952">深入理解圣杯布局和双飞翼布局</a></p><h4 id="相邻元素-margin-重叠产生的原因及解决方法"><a href="#相邻元素-margin-重叠产生的原因及解决方法" class="headerlink" title="相邻元素 margin 重叠产生的原因及解决方法"></a>相邻元素 margin 重叠产生的原因及解决方法</h4><p><a href="https://my.oschina.net/u/2612473/blog/2221555">垂直方向 margin 重叠原因与解决方法</a></p><h5 id="什么是-BFC-为什么会有-BFC-的概念"><a href="#什么是-BFC-为什么会有-BFC-的概念" class="headerlink" title="什么是 BFC 为什么会有 BFC 的概念"></a>什么是 BFC 为什么会有 BFC 的概念</h5><p>什么是 BFC：Block Formatting Context，解释为块级格式化上下文</p><p>一个 HTML 元素要创建 BFC，则满足下列的任意一个或多个条件即可：</p><p>1、float 的值不是 none。（float:left 或者 float:right）<br>2、position 的值不是 static 或者 relative。（position:absolute 或者 position:fixed）<br>3、display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex<br>4、overflow 的值不是 visible（overflow:hidden、overflow:scroll）<br>5、父元素与正常文件流的子元素（非浮动子元素）自动形成一个 BFC</p><p><a href="https://blog.csdn.net/sinat_36422236/article/details/88763187">什么是 BFC？看这一篇就够了</a><br><a href="https://zhuanlan.zhihu.com/p/45515245">BFC 是什么？</a></p><p>BFC 特性/功能</p><ul><li>父亲管儿子(子元素浮动，父元素不再塌陷)</li><li>兄弟之间划清界限(兄弟元素其一浮动重叠，另一个元素设置 BFC 便不再重叠)</li></ul><h3 id="CSS-相关"><a href="#CSS-相关" class="headerlink" title="CSS 相关"></a>CSS 相关</h3><h4 id="div-垂直水平居中"><a href="#div-垂直水平居中" class="headerlink" title="div 垂直水平居中"></a>div 垂直水平居中</h4><p>方法 1：绝对定位+margin:auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 2：绝对定位+负 margin</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 3：绝对定位+transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>; <span class="comment">/* 定位父级的50% */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/*自己的50% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 4：flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  justify-content: center; //子元素水平居中</span><br><span class="line">  align-items: center; //子元素垂直居中</span><br><span class="line">  <span class="comment">/* aa只要三句话就可以实现不定宽高水平垂直居中。 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法 5：table-cell 实现居中</p><p>设置<br>display:table-cell;<br>text-align:center;<br>vertical-align: middle;</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="前端项目性能优化"><a href="#前端项目性能优化" class="headerlink" title="前端项目性能优化"></a>前端项目性能优化</h4><ul><li>请求数量：合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域</li><li>请求带宽：开启 Gzip，精简 JS，移除重复脚本，图像优化，将 Icon 做成字体</li><li>缓存利用：使用 CDN，使用外部 JS、CSS，添加 Expires 头，减少 DNS 查找，配置 ETag，使 AJAX 可缓存</li><li>页面结构：样式表放在顶部，脚本放在底部，尽早刷新文档的输出</li><li>代码校验：避免 CSS 表达式，避免重定向</li></ul><h4 id="输入地址后的过程"><a href="#输入地址后的过程" class="headerlink" title="输入地址后的过程"></a>输入地址后的过程</h4><ol><li>域名解析</li><li>发起 TCP3 次握手</li><li>建立 TCP 链接后发起 http 请求</li><li>服务器响应 http 请求，浏览器获得 html 代码</li><li>浏览器解析 html 代码，并请求 html 中的资源</li><li>浏览器对页面进行渲染并呈现给用户</li></ol><h4 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h4><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><p><a href="https://juejin.cn/post/6844903565610188807">十分钟读懂浏览器渲染流程</a></p><h4 id="浏览器循环机制"><a href="#浏览器循环机制" class="headerlink" title="浏览器循环机制"></a>浏览器循环机制</h4><p>调用栈先入后出<br>消息队列先入先出：异步操作-feath、settimeout<br>微任务在消息队列前执行 promise<br><img src="https://z3.ax1x.com/2021/03/29/c9b9hQ.png" alt="EventLoop"><br>调用栈先进后出<br><img src="https://z3.ax1x.com/2021/03/29/c9bPpj.png" alt="EventLoop"><br>fetch、事件回调、setTimeout、setInterval 会压入消息队列，消息队列在调用栈清空后执行，先入先出<br><img src="https://z3.ax1x.com/2021/03/29/c9bSAS.png" alt="EventLoop"><br>使用 promise、async await 创建的异步操作会被放置于微任务队列，会在调用栈清空时立即执行，先于消息队列执行<br><img src="https://z3.ax1x.com/2021/03/29/c9bptg.png" alt="EventLoop"></p><p><a href="https://juejin.cn/post/6844903606466904078">浏览器事件循环机制（event loop）</a><br><a href="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&amp;seid=2586724673120864651">2 分钟了解 JavaScript Event Loop</a></p><h4 id="请求的方法有哪些-option-是什么含义"><a href="#请求的方法有哪些-option-是什么含义" class="headerlink" title="请求的方法有哪些 option 是什么含义"></a>请求的方法有哪些 option 是什么含义</h4><p>GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE</p><h5 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h5><p>HEAD 方法与 GET 方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应 HEAD 请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD 方法常被用于客户端查看服务器的性能。</p><h5 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h5><p>CONNECT 方法是 HTTP/1.1 协议预留的，能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接与非加密的 HTTP 代理服务器的通信。</p><h5 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h5><p>OPTIONS 请求与 HEAD 类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有 HTTP 请求方法，该方法会用’*‘来代替资源名称，向服务器发送 OPTIONS 请求，可以测试服务器功能是否正常。JavaScript 的 XMLHttpRequest 对象进行 CORS 跨域资源共享时，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许</p><h5 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h5><p>TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。</p><p><a href="https://itbilu.com/other/relate/EkwKysXIl.html">HTTP 请求方法详解</a></p><h4 id="网站漏洞的攻击方式和预防"><a href="#网站漏洞的攻击方式和预防" class="headerlink" title="网站漏洞的攻击方式和预防"></a>网站漏洞的攻击方式和预防</h4><p>网络安全攻击方式</p><h5 id="DDoS-攻击"><a href="#DDoS-攻击" class="headerlink" title="DDoS 攻击"></a>DDoS 攻击</h5><p>DDoS 是最常见的一种攻击方式，攻击者通过向某一个站点服务器反复发送请求，导致服务器无法承载大量的请求而产生“拒绝服务”，这就导致正常的服务无法进行，影响我们服务器的使用。</p><h5 id="获取账号和密码"><a href="#获取账号和密码" class="headerlink" title="获取账号和密码"></a>获取账号和密码</h5><p>这类攻击会存在一定的技术性。一般来说，攻击者会利用程序来抓取数据包，获取口令和数据内容，通过侦听程序在来监视网络数据流，进而通过分析获取用户的登录账号和密码。</p><h5 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h5><p>SQL 注入的攻击手段主要是利用后台的漏洞，通过 URL 将关键 SQL 语句带入程序，在数据库中进行破坏。许多的攻击者会使用 F12 或者 postman 等拼装 ajax 请求，将非法的数字发送给后台，造成程序的报错，并展现在页面上，这样攻击者就会知道后台使用的语言和框架了。</p><h5 id="恶意小程序"><a href="#恶意小程序" class="headerlink" title="恶意小程序"></a>恶意小程序</h5><p>这类攻击的方式主要存在我们使用的程序上面，它们可以通过入侵修改硬盘上的文件、窃取口令等。</p><h5 id="木马植入"><a href="#木马植入" class="headerlink" title="木马植入"></a>木马植入</h5><p>这种攻击方式主要是通过向服务器植入木马，开启后面，获取服务器的控制权，恶意破坏服务器文件或盗取服务器数据，这类的危害都是比较大的。</p><p><a href="https://blog.fundebug.com/2019/01/25/11-security-flaws-for-web-application/">WEB 应用常见 15 种安全漏洞一览</a></p><h4 id="最近有新学习什么技术么"><a href="#最近有新学习什么技术么" class="headerlink" title="最近有新学习什么技术么"></a>最近有新学习什么技术么</h4><h5 id="flutter1-0-和-2-0-的差别有什么"><a href="#flutter1-0-和-2-0-的差别有什么" class="headerlink" title="flutter1.0 和 2.0 的差别有什么"></a>flutter1.0 和 2.0 的差别有什么</h5><p>Flutter2.0 最大的变化是除了之前已经处于 stable 渠道的移动设备支持外，<br>桌面和 Web 支持也正式宣布进入 stable 渠道.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/03/15/6BreZF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>单点登录和单一登录</title>
    <link href="https://www.gaotianyang.top/archives/20210315771a976/"/>
    <id>https://www.gaotianyang.top/archives/20210315771a976/</id>
    <published>2021-03-15T01:08:15.000Z</published>
    <updated>2021-03-29T01:39:55.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/15/6BwwuD.jpg" alt="首屏图"></p><a id="more"></a><h2 id="单点登录和单一登录"><a href="#单点登录和单一登录" class="headerlink" title="单点登录和单一登录"></a>单点登录和单一登录</h2><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>单点登录是登录之后，所有该域名的网站都可以不用登录了，包括子域名。</p><p>单点登录是从一个系统登录以后，其他地方不用登录。</p><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。<br>SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p>较大的企业内部，一般都有很多的业务支持系统为其提供相应的管理和IT服务</p><p>单点登录的机制也一样，如下图所示，当用户第一次访问应用系统1的时候，因为还没有登录，<br>会被引导到认证系统中进行登录（1）；根据用户提供的登录信息，认证系统进行身份效验，<br>如果通过效验，应该返回给用户一个认证的凭据－－ticket（2）；<br>用户再访问别的应用的时候（3，5）就会将这个ticket带上，作为自己认证的凭据，<br>应用系统接受到请求之后会把ticket送到认证系统进行效验，检查ticket的合法性（4，6）。<br>如果通过效验，用户就可以在不用再次登录的情况下访问应用系统2和应用系统3了。<br>[重点是Ticket,参考中国电信，重点还有 认证中心]</p><p><img src="https://s3.ax1x.com/2021/03/15/6B0mad.gif" alt="单点登录"></p><p>从上面的视图可以看出，要实现SSO，需要以下主要的功能：</p><ul><li>所有应用系统共享一个身份认证系统。<br>统一的认证系统是SSO的前提之一。认证系统的主要功能是将用户的登录信息和用户信息库相比较，对用户进行登录认证；认证成功后，认证系统应该生成统一的认证标志（ticket），返还给用户。另外，认证系统还应该对ticket进行效验，判断其有效性。</li><li>所有应用系统能够识别和提取ticket信息<br>要实现SSO的功能，让用户只登录一次，就必须让应用系统能够识别已经登录过的用户。应用系统应该能对ticket进行识别和提取，通过与认证系统的通讯，能自动判断当前用户是否登录过，从而完成单点登录的功能。</li><li>统一的认证系统并不是说只有单个的认证服务器，如下图所示，整个系统可以存在两个以上的认证服务器，这些服务器甚至可以是不同的产品。认证服务器之间要通过标准的通讯协议，互相交换认证信息，就能完成更高级别的单点登录。如下图，当用户在访问应用系统1时，由第一个认证服务器进行认证后，得到由此服务器产生的ticket。当他访问应用系统4的时候，认证服务器2能够识别此ticket是由第一个服务器产生的，通过认证服务器之间标准的通讯协议（例如SAML）来交换认证信息，仍然能够完成SSO的功能。</li></ul><p><img src="https://s3.ax1x.com/2021/03/15/6B0KPI.gif" alt="单点登录"></p><h3 id="单一登录，单账号单ip登录策略"><a href="#单一登录，单账号单ip登录策略" class="headerlink" title="单一登录，单账号单ip登录策略"></a>单一登录，单账号单ip登录策略</h3><p>用是<code>Cache.Insert(key(用户名),value(用户名),时间为(session.Timeout))</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Cache[<span class="string">&quot;key&quot;</span>]==用户名)</span><br><span class="line">response.write(己经登录)</span><br></pre></td></tr></table></figure><p>我说一个比较普遍的做法，我看过很多项目就是这么干的，是可行的。用一个Application存储一个Table，<br>Table里记录username,sessionid,time，那么在正式登陆之前就检查这个Table就可以了。<br>用户退出，可以根据这个Table移除记录，session、timeout可以根据sessionid移除记录。</p><p>服务器中断了 Application也就没了…这个思路应该可以帮你解决</p><p>放在服务器缓存中就可以。再次登录的时候判断当前用户列表中有没有，有的话，说明已经登录。</p><p>如果楼主说的一机一号的机制，那么可以直接绑定用户首次登录的IP地址，将用户的IP地址绑定在数据库中，<br>每次登录的时候判断IP是否正确。如用户是IP是自动获取的话，那么就绑定用户的硬件串口号。<br>要做成QQ那种形式的话可以在数据库中加字段来表明，帐号是否属于登录的状态。</p><p>用缓存+session控制,如果缓存存在，则不让另外地方登录</p><p>每次登录都自动更新一次随机密码，也就是在用户表中 usrId usrName usrPass usrRanPass ，<br>用户每次登录后把随机密码记录 Cookie 或 session 中 （包括用户ID），<br>然后每次刷新页面的时候用 UsrId 与 UsrRanPass 与数据库进行对比。如果随机密码不同则退出，也可以设为定时对比。</p><p>webform? 登录的时候提取一个sessionID 保存在数据库里 ajax和服务器保持联络，<br>检测服务器上的登录记录，当另一个用户登录的时候数据库的sessionID就会被现在登录的用户生存的sessionID替换掉，<br>那当ajax和服务器通信时匹配数据库里的sessionID不同时就提示。</p><p>据说sessionID是唯一的…实在不行就用guid生成一个也一样…不知道有没有说错</p><p>系统中一个LoginSession表（sessionId,UserId,ip,expireDate)</p><p>登录成功后，检查单点登录策略，如果当前是不允许多个地方登录，那么就清空LoginSession中当前UesrId的记录。<br>同时把当前Session记录起来，同时返回一个token{sessionId,userId}给客户端。</p><p>每次和服务端的请求，都要到LoginSession中校验这个token，看是否存在（被踢啦），是否过期（expireDate），是否被限定的Ip地址。</p><p>如果Ok的话，修改expireDate，再延迟20分钟之类</p><p>上述接近方案，可以实现：踢人，限定Ip，登录超时的问题</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/x-poior/p/6200919.html">单点登录和单一登录的区别？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/15/6BwwuD.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="SSO" scheme="https://www.gaotianyang.top/tags/SSO/"/>
    
    <category term="单点登录" scheme="https://www.gaotianyang.top/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
    <category term="单一登录" scheme="https://www.gaotianyang.top/tags/%E5%8D%95%E4%B8%80%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>react生命周期函数</title>
    <link href="https://www.gaotianyang.top/archives/202103112a3f29d/"/>
    <id>https://www.gaotianyang.top/archives/202103112a3f29d/</id>
    <published>2021-03-11T02:42:26.000Z</published>
    <updated>2021-03-13T06:12:04.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/11/6Y5OyV.jpg" alt="首屏图"></p><a id="more"></a><h2 id="React生命周期函数"><a href="#React生命周期函数" class="headerlink" title="React生命周期函数"></a>React生命周期函数</h2><blockquote><p>react哪些生命周期可以执行setState</p></blockquote><ul><li>挂载或卸载过程涉及到三个函数：<ul><li>componentWillMount - 组件即将挂载、</li><li>componentDidMount - 组件挂载完成、</li><li>componentWillUnmount - 组件即将卸载。</li><li>这些函数都只会在组件初始化或者卸载时运行一次。</li></ul></li><li>组件更新时涉及到四个函数：<ul><li>shouldComponentUpdate - 判断组件是否需要更新、</li><li>componentWillUpdate - 组件即将更新、</li><li>componentDidUpdate - 组件完成更新、</li><li>componentWillReceiveProps - 组件即将接收新的 props。</li></ul></li></ul><p><img src="https://s3.ax1x.com/2021/03/11/6Y5CKf.jpg" alt="react生命周期"></p><h3 id="生命周期函数里可以-setState-吗？什么时候-setState-合适？"><a href="#生命周期函数里可以-setState-吗？什么时候-setState-合适？" class="headerlink" title="生命周期函数里可以 setState 吗？什么时候 setState 合适？"></a>生命周期函数里可以 setState 吗？什么时候 setState 合适？</h3><ol><li>在 <code>componentWillMount</code>中执行 setState 是无意义的，应该将这里的 setState 放到初始化 this.state 的地方去（如 constructor）直接作为 state 的初始值。 <code>不可以</code><br>原因：组件只挂载一次，在 componentWillMount里 setState 会但是仅会更新 state 一次，而且会和 constructor 里的初始化 state 合并执行，因此这是无意义的 setState。</li><li>在 <code>componentDidMount</code> 中执行 setState 会导致组件在初始化的时候就触发了更新，渲染了两遍。<code>可以</code></li><li>在 <code>componentWillUnmount</code>中执行 setState 不会更新 state，是不生效而且无意义的。<code>不可以</code></li><li>禁止在 <code>shouldComponentUpdate</code> 和 <code>componentWillUpdate</code>中调用setState，这会造成循环调用，直至耗光浏览器内存后崩溃。<code>不可以</code><br>shouldComponentUpdate` 或者 componentWillUpdate里调用 setState 会再次触发这两个函数，然后在两个函数又触发了 setState，然后再次触发这两个函数。从而死循环。</li><li>在 <code>componentDidUpdate</code> 中执行 setState 会导致组件刚刚完成更新，又要再更新一次，连续渲染两遍（和在 componentDidMount 中执行 setState 类似）。<code>可以</code></li><li>在 <code>componentWillReceiveProps</code>中可以 setState，不会造成二次渲染。由于只有 props 的变化才会触发 componentWillReceiveProps 事件，因为在这个事件里 setState 不会造成不停触发组件更新的死循环，可以放心在这个函数里 setState。<code>可以</code></li></ol><blockquote><p>总结如下</p></blockquote><ol><li><code>componentWillMount</code> 被初始化替代 无意义 <code>不可以</code></li><li><code>componentDidMount</code> 连续渲染两遍 <code>可以</code></li><li><code>componentWillUnmount</code> 不生效 无意义 <code>不可以</code></li><li><code>shouldComponentUpdate</code> 和 <code>componentWillUpdate</code> 死循环 <code>不可以</code></li><li><code>componentDidUpdate</code> 连续渲染两遍 <code>可以</code></li><li><code>componentWillReceiveProps</code> <code>可以</code></li></ol><p>回到<a href="/archives/2021021570ca98d5/#生命周期函数">前端知识积累</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/yh_ang_eng/article/details/98958474">React 生命周期中 对setState的调用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/11/6Y5OyV.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/react/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="react" scheme="https://www.gaotianyang.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Go2Shell关于BigSur的适配</title>
    <link href="https://www.gaotianyang.top/archives/20210306fb26c275/"/>
    <id>https://www.gaotianyang.top/archives/20210306fb26c275/</id>
    <published>2021-03-06T06:43:14.000Z</published>
    <updated>2021-03-06T06:58:43.517Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/02/26/yxRURf.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Go2Shell介绍"><a href="#Go2Shell介绍" class="headerlink" title="Go2Shell介绍"></a>Go2Shell介绍</h2><p>Go2Shell for mac是一款非常高效的即时终端窗口，无需学习曲线，<br>只需单击鼠标即可完成所需的工作，是您可以使用的最快，最直观的工具之一。<br>使用Go2Shell非常简单，您只需要打开一个Terminal窗口，<br>写下<code>open -a Go2Shell --args config</code>参数，然后按Return键即可。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Go2shell 很久不更新，导致新系统不再支持使用，Go2shell无法使用的替代方案，和原版基本一致</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Github有人分享的，下载后复制到应用程序目录，然后按住Cmd+鼠标左键拖动到Finder的工具栏中就可以了，<br>图标和效果基本和原版Go2shell一致，支持最新的Big Sur。</p><ul><li><a href="https://download.csdn.net/download/u011478374/13210059">CSDN下载地址</a></li><li><a href="https://github.com/Breathleas/Go2Shell">Github下载地址</a></li></ul><p><img src="https://s3.ax1x.com/2021/03/06/6nhoEF.png" alt="Go2shell"></p><p>安装包共有4个</p><ul><li>Go2Shell_iTerm    // 使用iTerm打开当前目录</li><li>Go2Shell_iTerm_newWin    // 使用iTerm在新窗口打开当前目录</li><li>Go2Shell_Term    // 使用Term打开当前目录</li><li>Go2Shell_Term_newWin    // 使用Term在新窗口打开当前目录</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/113184152">Go2Shell for mac(即时终端窗口) v2.5</a></li><li><a href="https://blog.csdn.net/u011478374/article/details/109754818">Mac 必备神器之Go2Shell，最新版支持Big Sur</a></li><li><a href="https://github.com/Breathleas/Go2Shell">github-Go2Shell</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/26/yxRURf.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="Mac" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/Mac/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="Mac" scheme="https://www.gaotianyang.top/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Flutter教程</title>
    <link href="https://www.gaotianyang.top/archives/202102261bf41062/"/>
    <id>https://www.gaotianyang.top/archives/202102261bf41062/</id>
    <published>2021-02-26T02:33:35.000Z</published>
    <updated>2021-03-13T06:12:04.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/01/6iJtn1.png" alt="首屏图"></p><a id="more"></a><h2 id="Flutter介绍"><a href="#Flutter介绍" class="headerlink" title="Flutter介绍"></a>Flutter介绍</h2><h2 id="Flutter环境搭建"><a href="#Flutter环境搭建" class="headerlink" title="Flutter环境搭建"></a>Flutter环境搭建</h2><h3 id="Windows系统安装Flutter"><a href="#Windows系统安装Flutter" class="headerlink" title="Windows系统安装Flutter"></a>Windows系统安装Flutter</h3><h3 id="Mac系统安装Flutter"><a href="#Mac系统安装Flutter" class="headerlink" title="Mac系统安装Flutter"></a>Mac系统安装Flutter</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>升级MacOS至最新系统</li><li>安装最新版本的Xcode</li><li>运行一次Xcode</li><li>电脑上安装<a href="https://brew.sh">brew</a></li></ol><h4 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title="安装Flutter"></a>安装Flutter</h4><h5 id="下载Flutter"><a href="#下载Flutter" class="headerlink" title="下载Flutter"></a>下载Flutter</h5><p><a href="https://flutter.cn/docs/development/tools/sdk/releases?tab=macos">下载地址</a></p><p><img src="https://s3.ax1x.com/2021/02/26/yxRVaR.png" alt="下载地址"></p><h5 id="将Flutter解压至安装目录下"><a href="#将Flutter解压至安装目录下" class="headerlink" title="将Flutter解压至安装目录下"></a>将Flutter解压至安装目录下</h5><p><img src="https://s3.ax1x.com/2021/02/26/yxWmwj.png" alt="安装目录"></p><h5 id="配置Flutter环境变量"><a href="#配置Flutter环境变量" class="headerlink" title="配置Flutter环境变量"></a>配置Flutter环境变量</h5><ul><li>打开环境变量配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>flutter环境变量配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意：下面第一行的环境变量需要改为自己flutter的安装目录</span></span><br><span class="line">export PATH=/Users/gaotianyang/flutter_mac/flutter/bin:$PATH</span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><ul><li>让环境变量立即生效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>验证flutter是否配置成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/02/26/yxh8Z4.png" alt="安装成功"></p><blockquote><p>注意：如果<code>flutter -h</code>提示flutter不是内置命令之类的错误，可能是sdk没有配置成功或者sdk下载时出错，需重新下载并配置。</p></blockquote><h4 id="运行Flutter-doctor检测环境"><a href="#运行Flutter-doctor检测环境" class="headerlink" title="运行Flutter doctor检测环境"></a>运行Flutter doctor检测环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检测flutter环境</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter doctor</span></span><br></pre></td></tr></table></figure><p>根据Flutter doctor报错提示进行修复</p><p>直至只提示缺少安卓环境为止</p><p><img src="https://s3.ax1x.com/2021/02/26/yxIswF.png" alt="检测成功"></p><h4 id="生成Flutter项目"><a href="#生成Flutter项目" class="headerlink" title="生成Flutter项目"></a>生成Flutter项目</h4><p>通过以下步骤来创建你的第一个 Flutter 应用并进行测试：</p><ul><li>通过运行以下命令来创建一个新的 Flutter 应用：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目 flutter create [项目名称]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter create my_app</span></span><br></pre></td></tr></table></figure><ul><li>上述命令创建了一个 my_app 的目录，包含了 Flutter 初始的应用模版，切换路径到这个目录内：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> my_app</span></span><br></pre></td></tr></table></figure><ul><li>确保模拟器已经处于运行状态，输入以下命令来启动应用：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行flutter项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter run</span></span><br></pre></td></tr></table></figure><h4 id="修改Flutter-SDK目录权限及项目权限"><a href="#修改Flutter-SDK目录权限及项目权限" class="headerlink" title="修改Flutter SDK目录权限及项目权限"></a>修改Flutter SDK目录权限及项目权限</h4><p>如果项目运行提示权限不足可使用如下指令进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sudo chmod -R 777 [对应项目文件名]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod -R 777 flutterDemo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改SDK文件夹权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /Users/gaotianyang/flutter_mac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod -R 777 flutter</span></span><br></pre></td></tr></table></figure><h4 id="Xcode打开Flutter项目模拟器运行项目"><a href="#Xcode打开Flutter项目模拟器运行项目" class="headerlink" title="Xcode打开Flutter项目模拟器运行项目"></a>Xcode打开Flutter项目模拟器运行项目</h4><ul><li>Xcode运行项目双击项目目录下的文件</li></ul><p><img src="https://s3.ax1x.com/2021/02/26/yzeUQs.png" alt="Xcode运行项目"></p><ul><li>运行模拟器</li></ul><p><img src="https://s3.ax1x.com/2021/02/26/yzmUhD.png" alt="运行模拟器"></p><h5 id="可能会有报错导致模拟器启动失败"><a href="#可能会有报错导致模拟器启动失败" class="headerlink" title="可能会有报错导致模拟器启动失败"></a>可能会有报错导致模拟器启动失败</h5><ul><li><code>Runner.app/Info.plist does not exist. The Flutter &quot;Thin Binary&quot; build phase must run after &quot;Copy Bundle Resources&quot;.</code></li></ul><blockquote><p>解决方法：打开Xcode菜单,选择 “Product” &gt; “Clean Build Folder”. 清空项目预览文件，再重新启动模拟器。</p></blockquote><ul><li>打开项目后项目白屏</li></ul><blockquote><p>解决方法：再重新启动模拟器，重新打开项目。</p></blockquote><h4 id="Vscode配置及开发Flutter项目"><a href="#Vscode配置及开发Flutter项目" class="headerlink" title="Vscode配置及开发Flutter项目"></a>Vscode配置及开发Flutter项目</h4><h5 id="安装Flutter插件Dart插件"><a href="#安装Flutter插件Dart插件" class="headerlink" title="安装Flutter插件Dart插件"></a>安装Flutter插件Dart插件</h5><p>安装Flutter、Flutter插件提示插件</p><p><img src="https://s3.ax1x.com/2021/02/26/yznNbq.png" alt="Flutter插件"></p><p>安装Dart插件</p><p><img src="https://s3.ax1x.com/2021/02/26/yzndaV.png" alt="Dart插件"></p><h5 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动模拟器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> open -a Simulator</span></span><br></pre></td></tr></table></figure><h5 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flutter run</span></span><br></pre></td></tr></table></figure><h5 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h5><ul><li>R 启动热更新，重新加载项目</li><li>O 切换为安卓/iOS模式</li><li>P 打开/关闭网格，可以方便掌握布局情况</li><li>Q 退出调试预览模式</li></ul><h2 id="Flutter目录结构"><a href="#Flutter目录结构" class="headerlink" title="Flutter目录结构"></a>Flutter目录结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">项目目录</span><br><span class="line">├── README.md</span><br><span class="line">├── android         // 安卓平台相关代码资源</span><br><span class="line">├── build           // 运行项目生成的编译目录</span><br><span class="line">├── ios             // iOS平台相关代码资源</span><br><span class="line">├── lib             // flutter相关代码，编写项目主要在这个目录</span><br><span class="line">├── test            // 测试文件目录</span><br><span class="line">├── flutterDemo.iml</span><br><span class="line">├── pubspec.lock</span><br><span class="line">└── pubspec.yaml    // 项目配置文件：项目名称、描述、第三方库依赖</span><br></pre></td></tr></table></figure><h3 id="Flutter入口"><a href="#Flutter入口" class="headerlink" title="Flutter入口"></a>Flutter入口</h3><p>每一个 flutter 项目的 lib 目录里面都有一个 main.dart 这个文件就是 flutter 的入口文件</p><p><code>main.dart</code> 里面的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123; </span><br><span class="line">    runApp(MyApp()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以简写 </span></span><br><span class="line"><span class="keyword">void</span> main()=&gt;runApp(MyApp());</span><br></pre></td></tr></table></figure><p>其中的 main 方法是 dart 的入口方法。runApp 方法是 flutter 的入口方法。</p><p>MyApp 是自定义的一个组件</p><h3 id="首个Demo-Center组件"><a href="#首个Demo-Center组件" class="headerlink" title="首个Demo Center组件"></a>首个Demo Center组件</h3><p><code>main.dart</code> 里面的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(Center(</span><br><span class="line">    child: Text(</span><br><span class="line">      <span class="string">&quot;Welcome Flutter&quot;</span>,</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行R进行重新编译</p><p><img src="https://s3.ax1x.com/2021/02/26/yzBhnI.png" alt="首个Demo"></p><h3 id="自定义Widget"><a href="#自定义Widget" class="headerlink" title="自定义Widget"></a>自定义Widget</h3><p><code>main.dart</code> 里面的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;Welcome Flutter&quot;</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行r进行重新加载</p><h3 id="Text组件简单介绍"><a href="#Text组件简单介绍" class="headerlink" title="Text组件简单介绍"></a>Text组件简单介绍</h3><p>给文字调整字号和颜色</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Text(<span class="string">&quot;Welcome Flutter&quot;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">40.0</span>, color: Colors.yellow</span><br><span class="line">              <span class="comment">// color: Color.fromRGBO(255, 0, 255, 0.7)</span></span><br><span class="line">              )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h4><p>文本显示方式<code>TextDirection.ltr</code>从左到右</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p>文本样式</p><h3 id="MaterialApp组件"><a href="#MaterialApp组件" class="headerlink" title="MaterialApp组件"></a>MaterialApp组件</h3><p>MaterialApp 是一个方便的 Widget，它封装了应用程序实现 Material Design 所需要的 一些 Widget。一般作为顶层(根) widget 使用。</p><p>常用的属性：</p><ul><li>home（主页）</li><li>title（标题）</li><li>color（颜色）</li><li>theme（主题）</li><li>routes（路由）</li><li>…</li></ul><h3 id="Scaffold组件"><a href="#Scaffold组件" class="headerlink" title="Scaffold组件"></a>Scaffold组件</h3><p>Scaffold 是 Material Design 布局结构的基本实现。此类提供了用于显示 drawer、 snackbar 和底部 sheet 的 API。</p><p>Scaffold 有下面几个主要属性：</p><ul><li>appBar - 显示在界面顶部的一个 AppBar。</li><li>body - 当前界面所显示的主要内容 Widget。</li><li>drawer - 抽屉菜单控件。</li><li>…</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text(<span class="string">&#x27;Flutter Demo&#x27;</span>)),</span><br><span class="line">        body: HomeContent(),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.yellow),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">        child: Text(</span><br><span class="line">      <span class="string">&#x27;你好Flutter 111&#x27;</span>,</span><br><span class="line">      textDirection: TextDirection.ltr,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">        fontSize: <span class="number">40.0</span>,</span><br><span class="line">        color: Colors.yellow,</span><br><span class="line">        <span class="comment">// color: Color.fromRGBO(244, 233, 121, 0.5),</span></span><br><span class="line">      ),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/03/01/6Pvkxx.png" alt="使用MaterialApp及Scaffold"></p><h2 id="Flutter组件"><a href="#Flutter组件" class="headerlink" title="Flutter组件"></a>Flutter组件</h2><h3 id="Container组件"><a href="#Container组件" class="headerlink" title="Container组件"></a>Container组件</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">alignment</td><td style="text-align:center">topCenter：顶部居中对齐</br>topLeft：顶部左对齐</br>topRight：顶部右对齐</br>center：水平垂直居中对齐</br>centerLeft：垂直居中水平居左对齐</br>centerRight：垂直居中水平居右对齐</br>bottomCenter 底部居中对齐</br>bottomLeft：底部居左对齐</br>bottomRight：底部居右对齐</td></tr><tr><td style="text-align:center">decoration</td><td style="text-align:center">decoration: BoxDecoration( color: Colors.blue, border: Border.all( color: Colors.red, width: 2.0, ),borderRadius: BorderRadius.all( Radius.circular(8.0) ) )</td></tr><tr><td style="text-align:center">margin</td><td style="text-align:center">margin 属性是表示 Container 与外部其他 组件的距离。</br>EdgeInsets.all(20.0),</td></tr><tr><td style="text-align:center">padding</td><td style="text-align:center">padding 就 是 Container 的 内 边 距 ， 指 Container 边缘与 Child 之间的距离</br>padding: EdgeInsets.all(10.0)</td></tr><tr><td style="text-align:center">transform</td><td style="text-align:center">让 Container 容易进行一些旋转之类的</br>transform: Matrix4.rotationZ(0.2)</td></tr><tr><td style="text-align:center">height</td><td style="text-align:center">容器高度</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">容器宽度</td></tr><tr><td style="text-align:center">child</td><td style="text-align:center">容器子元素</td></tr></tbody></table><p><a href="https://api.flutter.dev/flutter/widgets/Container-class.html">更多参数</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;home&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: HomeContent(),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.lightBlue),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;我是超长长长长长长长长长长长文本&#x27;</span>,</span><br><span class="line">          textAlign: TextAlign.center,</span><br><span class="line">          overflow: TextOverflow.ellipsis,</span><br><span class="line">          maxLines: <span class="number">1</span>,</span><br><span class="line">          textScaleFactor: <span class="number">2</span>,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">16.0</span>,</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            <span class="comment">// color: Color.fromARGB(a, r, g, b),</span></span><br><span class="line">            fontWeight: FontWeight.w800,</span><br><span class="line">            fontStyle: FontStyle.italic,</span><br><span class="line">            decoration: TextDecoration.lineThrough,</span><br><span class="line">            decorationColor: Colors.green,</span><br><span class="line">            decorationStyle: TextDecorationStyle.dashed,</span><br><span class="line">            letterSpacing: <span class="number">5.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        height: <span class="number">300.0</span>,</span><br><span class="line">        width: <span class="number">300.0</span>,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: Colors.yellow,</span><br><span class="line">          border: Border.all(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            width: <span class="number">2.0</span>,</span><br><span class="line">          ),</span><br><span class="line">          borderRadius: BorderRadius.all(</span><br><span class="line">            <span class="comment">// Radius.circular(150), // 圆形</span></span><br><span class="line">            Radius.circular(<span class="number">50</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// padding: EdgeInsets.all(20),</span></span><br><span class="line">        padding: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        margin: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="comment">// transform: Matrix4.translationValues(100, 10, 10),  // 位移</span></span><br><span class="line">        <span class="comment">// transform: Matrix4.rotationZ(0.3),  // 旋转</span></span><br><span class="line">        <span class="comment">// transform: Matrix4.diagonal3Values(1.3, 1, 1), // 缩放</span></span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/03/01/6iG5O1.png" alt="使用Container组件"></p><h3 id="Text组件"><a href="#Text组件" class="headerlink" title="Text组件"></a>Text组件</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">textAlign</td><td style="text-align:center">文本对齐方式（center 居中，left 左 对齐，right 右对齐，justfy 两端对齐）</td></tr><tr><td style="text-align:center">textDirection</td><td style="text-align:center">文本方向（ltr 从左至右，rtl 从右至 左）</td></tr><tr><td style="text-align:center">overflow</td><td style="text-align:center">文字超出屏幕之后的处理方式（clip 裁剪，fade 渐隐，ellipsis 省略号）</td></tr><tr><td style="text-align:center">textScaleFactor</td><td style="text-align:center">字体显示倍率</td></tr><tr><td style="text-align:center">maxLines</td><td style="text-align:center">文字显示最大行数</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">字体的样式设置</td></tr></tbody></table><p>下面是 TextStyle 的参数</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">decoration</td><td style="text-align:center">文字装饰线（none 没有线，lineThrough 删除线，overline 上划线，underline 下划线）</td></tr><tr><td style="text-align:center">decorationColor</td><td style="text-align:center">文字装饰线颜色</td></tr><tr><td style="text-align:center">decorationStyle</td><td style="text-align:center">文字装饰线风格（[dashed,dotted]虚线， double 两根线，solid 一根实线，wavy 波浪 线）</td></tr><tr><td style="text-align:center">wordSpacing</td><td style="text-align:center">单词间隙（如果是负值，会让单词变得更紧凑）</td></tr><tr><td style="text-align:center">letterSpacing</td><td style="text-align:center">字母间隙（如果是负值，会让字母变得更紧凑）</td></tr><tr><td style="text-align:center">fontStyle</td><td style="text-align:center">文字样式（italic 斜体，normal 正常体）</td></tr><tr><td style="text-align:center">fontSize</td><td style="text-align:center">文字大小</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">文字颜色</td></tr><tr><td style="text-align:center">fontWeight</td><td style="text-align:center">字体粗细（bold 粗体，normal 正常体）</td></tr></tbody></table><p><a href="https://api.flutter.dev/flutter/painting/TextStyle-class.html">更多参数</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;home&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: HomeContent(),</span><br><span class="line">      ),</span><br><span class="line">      theme: ThemeData(primarySwatch: Colors.lightBlue),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;我是文本&#x27;</span>,</span><br><span class="line">          textAlign: TextAlign.center,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">16.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        height: <span class="number">300.0</span>,</span><br><span class="line">        width: <span class="number">300.0</span>,</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        decoration: BoxDecoration(</span><br><span class="line">          color: Colors.yellow,</span><br><span class="line">          border: Border.all(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            width: <span class="number">2.0</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/03/01/6PzWx1.png" alt="使用Text组件"></p><h3 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h3><p><a href="https://api.flutter.dev/flutter/widgets/Image-class.html">更多参数</a></p><h4 id="图片引入"><a href="#图片引入" class="headerlink" title="图片引入"></a>图片引入</h4><h5 id="引入线上图片"><a href="#引入线上图片" class="headerlink" title="引入线上图片"></a>引入线上图片</h5><h5 id="引入本地图片"><a href="#引入本地图片" class="headerlink" title="引入本地图片"></a>引入本地图片</h5><h4 id="原型-圆角图片实现"><a href="#原型-圆角图片实现" class="headerlink" title="原型/圆角图片实现"></a>原型/圆角图片实现</h4><h5 id="使用Container实现"><a href="#使用Container实现" class="headerlink" title="使用Container实现"></a>使用Container实现</h5><h5 id="使用ClipOval组件实现"><a href="#使用ClipOval组件实现" class="headerlink" title="使用ClipOval组件实现"></a>使用ClipOval组件实现</h5><h3 id="ListView组件"><a href="#ListView组件" class="headerlink" title="ListView组件"></a>ListView组件</h3><p><a href="https://api.flutter.dev/flutter/widgets/Image-class.html">更多参数</a></p><h4 id="ListTile组件"><a href="#ListTile组件" class="headerlink" title="ListTile组件"></a>ListTile组件</h4><h3 id="ListView2组件"><a href="#ListView2组件" class="headerlink" title="ListView2组件"></a>ListView2组件</h3><p><a href="https://api.flutter.dev/flutter/widgets/Image-class.html">更多参数</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1S4411E7LY?from=search&amp;seid=18237173814777031437">B站-Dart Flutter教程_Dart Flutter入门实战视频教程-2020年新出-第14讲以后是Flutter教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/01/6iJtn1.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="flutter" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/flutter/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="flutter" scheme="https://www.gaotianyang.top/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Dart教程</title>
    <link href="https://www.gaotianyang.top/archives/202102229c01b81e/"/>
    <id>https://www.gaotianyang.top/archives/202102229c01b81e/</id>
    <published>2021-02-22T06:37:13.000Z</published>
    <updated>2021-03-13T06:12:04.875Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/01/6iYQbt.png" alt="首屏图"></p><a id="more"></a><h2 id="Dart介绍"><a href="#Dart介绍" class="headerlink" title="Dart介绍"></a>Dart介绍</h2><p>Dart是由谷歌开发的计算机编程语言，它可以用于web、服务器、移动应用和物联网等领域的开发。</p><p>Dart 诞生于2011年，号称起到javaScript/但是过去的几年中一直不温不火。知道Flutter的出现人们重新重视。</p><p>要学习Flutter的话我们必须首先得会<a href="https://dart.dev">Dart</a>。</p><h2 id="Dart环境搭建"><a href="#Dart环境搭建" class="headerlink" title="Dart环境搭建"></a>Dart环境搭建</h2><h3 id="Windows系统安装Dart"><a href="#Windows系统安装Dart" class="headerlink" title="Windows系统安装Dart"></a>Windows系统安装Dart</h3><ul><li>命令行安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装dart-sdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  choco install dart-sdk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新dart-sdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  choco upgrade dart-sdk</span></span><br></pre></td></tr></table></figure><ul><li>软件安装SDK(推荐)</li></ul><p><a href="https://gekorm.com/dart-windows/">下载dart的SDK软件</a></p><h3 id="Mac系统安装Dart"><a href="#Mac系统安装Dart" class="headerlink" title="Mac系统安装Dart"></a>Mac系统安装Dart</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 跟新追踪brew的包管理信息，扩展可安装软件的选择</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew tap dart-lang/dart</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用brew安装dart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install dart</span></span><br></pre></td></tr></table></figure><p><a href="https://dart.dev/get-dart">dart官网下载地址</a></p><blockquote><p>注： 如果没有安装brew工具，需先<a href="https://brew.sh/">安装Homebrew</a></p></blockquote><h2 id="Dart开发工具"><a href="#Dart开发工具" class="headerlink" title="Dart开发工具"></a>Dart开发工具</h2><p>Dark常见的开发工具有：IntelliJ IDEA、Webstorm、Atom、Vscode等</p><ul><li>Dart的提示插件</li></ul><p><img src="https://s3.ax1x.com/2021/02/22/y7xdBD.png" alt="Dart的VScode插件"></p><ul><li>Dart的运行插件code runner</li></ul><p><img src="https://s3.ax1x.com/2021/02/22/y7zOzt.png" alt="code-runner"></p><h2 id="Dart的初次编写"><a href="#Dart的初次编写" class="headerlink" title="Dart的初次编写"></a>Dart的初次编写</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello dart&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/02/22/yHSo60.png" alt="运行首个Dart文件"></p><h2 id="Dart方法介绍"><a href="#Dart方法介绍" class="headerlink" title="Dart方法介绍"></a>Dart方法介绍</h2><h3 id="Dart入口方法"><a href="#Dart入口方法" class="headerlink" title="Dart入口方法"></a>Dart入口方法</h3><p>所有需要被执行的方法需放置在main方法中</p><p>共有两种main的写法，分别是基本用法和无返回值的用法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 基本用法 --&gt;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello dart&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 无返回值的main方法 --&gt;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello dart&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart打印"><a href="#Dart打印" class="headerlink" title="Dart打印"></a>Dart打印</h3><p>上面的例子中使用到了打印方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 打印<span class="string">&quot;hello dart&quot;</span> --&gt;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello dart&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart注释"><a href="#Dart注释" class="headerlink" title="Dart注释"></a>Dart注释</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main() &#123;</span></span><br><span class="line"><span class="comment">//   print(&quot;hello dart1&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="comment"><span class="markdown">main() &#123;</span></span></span><br><span class="line"><span class="comment"><span class="markdown">  print(&quot;hello dart2&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="markdown">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> *</span> <span class="emphasis">*/</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">main() &#123;</span></span></span><br><span class="line"><span class="comment">///   <span class="markdown">print(&quot;hello dart3&quot;);</span></span></span><br><span class="line"><span class="comment">/// <span class="markdown">&#125;</span></span></span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello dart4&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart变量"><a href="#Dart变量" class="headerlink" title="Dart变量"></a>Dart变量</h3><p>dart是一个强大的脚本类语言，可以不预先定义变量类型，自动会类型推断</p><p>dart中定义变量可以通过var关键字或类型关键字来申明变量</p><ul><li>字符串类型：String</li><li>数字类型：int</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;this is var&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(str);</span><br><span class="line"><span class="keyword">var</span> mynum = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(mynum);</span><br><span class="line"><span class="built_in">String</span> string = <span class="string">&#x27;this is String&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(string);</span><br><span class="line"><span class="built_in">int</span> mynum2 = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">print</span>(mynum2);</span><br></pre></td></tr></table></figure><blockquote><p>注：var不要和类型关键字一起使用</p></blockquote><p>dart中存在类型校验 下面三种情况均会报错</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">str = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> mynum = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(mynum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> mynum2 = <span class="string">&#x27;456&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(mynum2);</span><br></pre></td></tr></table></figure><p>此时赋值操作会出现报错提示，因为声明时推断str为字符串类型</p><h3 id="Dart常量"><a href="#Dart常量" class="headerlink" title="Dart常量"></a>Dart常量</h3><p>常量只能进行一次赋值操作</p><ul><li>const常量</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">print</span>(PI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> PI2 = <span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">print</span>(PI2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> now = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now();</span><br><span class="line"><span class="built_in">print</span>(now);</span><br></pre></td></tr></table></figure><ul><li>final常量</li></ul><p>区别：final不仅有const的编译时常量的特性，最重要的是它是运行时常量，并且final是惰性初始化，即在运行时第一次使用前才初始化</p><h3 id="Dart命名规则"><a href="#Dart命名规则" class="headerlink" title="Dart命名规则"></a>Dart命名规则</h3><ol><li>变量名称必须由数字、字母、下划线和$符组成</li><li>注意：标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名字是区分大小写的：如age和Age是不同的变量。在实际的运用中，也建议不要用一个</li><li>标识符(变量名称)一定要见名思意：变量名称建议用名词，方法名称建议用动词</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><ul><li>Number(数值)<ul><li>int</li><li>double</li></ul></li><li>Strings(字符串)<ul><li>String</li></ul></li><li>Booleans(布尔)<ul><li>bool</li></ul></li><li>List(数组)<ul><li>在Dart中，数组是列表对象，所以大多数人只是称它们为列表</li></ul></li><li>Maps(字典)<ul><li>通常来说，Map是一个键值对相关的对象。键和值可以是任何类型的对象。每个键只出现一次，而一个值则可以出现多次。映射是动态集合。换句话说，Maps可以在运行时增长和缩小。dart:core库中的Map类提供了相同的支持。</li></ul></li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1、字符串定义的几种方式</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;this is str&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> str2 = <span class="string">&quot;this is str2&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(str);</span><br><span class="line">  <span class="built_in">print</span>(str2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> str3 = <span class="string">&#x27;this is str3&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> str4 = <span class="string">&#x27;this is str4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(str3);</span><br><span class="line">  <span class="built_in">print</span>(str4);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> str5 = <span class="string">&#x27;&#x27;&#x27;this is str5&#x27;&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(str5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> str6 = <span class="string">&#x27;&#x27;&#x27;this is str6</span></span><br><span class="line"><span class="string">  this is str6</span></span><br><span class="line"><span class="string">  this is str6</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(str6);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> str7 = <span class="string">&quot;&quot;&quot;this is str7</span></span><br><span class="line"><span class="string">  this is str7</span></span><br><span class="line"><span class="string">  this is str7</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">print</span>(str7);</span><br><span class="line">  <span class="comment">// 2、字符串的拼接</span></span><br><span class="line">  <span class="built_in">String</span> str8 = <span class="string">&#x27;this is&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> str9 = <span class="string">&#x27;str9&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(str8 + <span class="string">&quot; &quot;</span> + str9);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$str8</span> <span class="subst">$str9</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1.int 必须是整型</span></span><br><span class="line">  <span class="built_in">int</span> a = <span class="number">123</span>;</span><br><span class="line">  <span class="comment">// a = 45.5; 不可以赋浮点型</span></span><br><span class="line">  a = <span class="number">12</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">  <span class="comment">// 2.double 既可以是整型 也可是浮点型</span></span><br><span class="line">  <span class="built_in">double</span> b = <span class="number">23.5</span>;</span><br><span class="line">  b = <span class="number">24</span>;</span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line">  <span class="comment">// 3.运算符</span></span><br><span class="line">  <span class="comment">// + - * / %</span></span><br><span class="line">  <span class="keyword">var</span> c = a + b;</span><br><span class="line">  <span class="built_in">print</span>(c); <span class="comment">// 12 + 24.0 = 36.0</span></span><br><span class="line">  <span class="built_in">int</span> d = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> e = a + d;</span><br><span class="line">  <span class="built_in">print</span>(e); <span class="comment">// 12 + 12 = 24</span></span><br><span class="line">  <span class="comment">// e = 12.5; // 错误 e现前计算时为整型不可再次赋值浮点型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool 值true/false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1.bool</span></span><br><span class="line">  <span class="built_in">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">print</span>(flag);</span><br><span class="line">  <span class="built_in">bool</span> flag2 = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">print</span>(flag2);</span><br><span class="line">  <span class="comment">// bool flag3 = 123; // 不能赋非布尔的值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.条件判断语句</span></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;真&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;假&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">456</span>;</span><br><span class="line">  <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a==b&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a!=b&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a!=b</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (a == c) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a==c&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a!=c&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a!=c</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">if</span> (a == d) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a==d&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a!=d&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a==d</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> e = <span class="number">123.0</span>;</span><br><span class="line">  <span class="keyword">if</span> (a == e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a==e&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a!=e&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a==e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组-集合类型"><a href="#数组-集合类型" class="headerlink" title="数组/集合类型"></a>数组/集合类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1.第一种定义List的方式</span></span><br><span class="line">  <span class="keyword">var</span> list = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>];</span><br><span class="line">  <span class="built_in">print</span>(list);</span><br><span class="line">  <span class="built_in">print</span>(list.length);</span><br><span class="line">  <span class="built_in">print</span>(list[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.第二种定义List的方式</span></span><br><span class="line">  <span class="keyword">var</span> list2 = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  list2.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  list2.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  list2.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(list2);</span><br><span class="line">  <span class="built_in">print</span>(list2.length);</span><br><span class="line">  <span class="built_in">print</span>(list2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.定义List指定类型</span></span><br><span class="line">   <span class="keyword">var</span> list3 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  list3.add(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">  <span class="comment">// list3.add(123); // 不能添加非字符串类型</span></span><br><span class="line">  <span class="built_in">print</span>(list3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">//第一种定义 Maps的方式</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">&quot;works&quot;</span>: [<span class="string">&quot;程序猿&quot;</span>, <span class="string">&quot;测试员&quot;</span>],</span><br><span class="line">    <span class="string">&quot;married&quot;</span>: <span class="keyword">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">print</span>(person);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;age&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;works&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person[<span class="string">&quot;married&quot;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//第二种定义 Maps的方式</span></span><br><span class="line">  <span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  person2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">  person2[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span>;</span><br><span class="line">  person2[<span class="string">&quot;works&quot;</span>] = [<span class="string">&quot;UI设计&quot;</span>, <span class="string">&quot;测试员&quot;</span>];</span><br><span class="line">  person2[<span class="string">&quot;married&quot;</span>] = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">print</span>(person2);</span><br><span class="line">  <span class="built_in">print</span>(person2[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person2[<span class="string">&quot;age&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person2[<span class="string">&quot;works&quot;</span>]);</span><br><span class="line">  <span class="built_in">print</span>(person2[<span class="string">&quot;married&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不常用数据类型"><a href="#不常用数据类型" class="headerlink" title="不常用数据类型"></a>不常用数据类型</h3><ul><li>Runes<ul><li>Runes是指UTF-32编码的字符串。它可以通过文字转换成符号表情或者代表特定的文字。</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> clapping = <span class="string">&#x27;\u&#123;1f44f&#125;&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(clapping);</span><br><span class="line">  <span class="built_in">print</span>(clapping.codeUnits);</span><br><span class="line">  <span class="built_in">print</span>(clapping.runes.toList());</span><br><span class="line"></span><br><span class="line">  Runes input = <span class="keyword">new</span> Runes(</span><br><span class="line">      <span class="string">&#x27;\u2665  \u&#123;1f605&#125;  \u&#123;1f60e&#125;  \u&#123;1f47b&#125;  \u&#123;1f596&#125;  \u&#123;1f44d&#125;&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">new</span> <span class="built_in">String</span>.fromCharCodes(input));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Symbols<ul><li>Symbols对象表示在Dart程序中声明运算符或标识符。您可能永远不需要使用符号，但它们对于按名称引用标识符的API非常有用，因为缩小会更改标识符名称而不会更改标识符符号。要获取标识符的符号，请使用符号文字，它只是＃后跟标识符。</li></ul></li></ul><blockquote><p>在 Dart 中符号用 # 开头来表示，入门阶段不需要了解这东西，可能永远也用不上。</p></blockquote><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  is 关键词来判断类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (str <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$str</span> 是字符串类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str <span class="keyword">is</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$str</span> 是数字类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$str</span> 是其他类型&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$number</span> 是字符串类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number <span class="keyword">is</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$number</span> 是数字类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$number</span> 是其他类型&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> doubleNum = <span class="number">123.5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (doubleNum <span class="keyword">is</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$doubleNum</span> 是字符串类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doubleNum <span class="keyword">is</span> <span class="built_in">int</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$doubleNum</span> 是整数类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doubleNum <span class="keyword">is</span> <span class="built_in">double</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$doubleNum</span> 是浮点数类型&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$doubleNum</span> 是其他类型&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// +    -    *    /     ~/ (取整)     %（取余）</span></span><br><span class="line">  <span class="built_in">int</span> a=<span class="number">13</span>;</span><br><span class="line">  <span class="built_in">int</span> b=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(a+b);   <span class="comment">//加</span></span><br><span class="line">  <span class="built_in">print</span>(a-b);   <span class="comment">//减</span></span><br><span class="line">  <span class="built_in">print</span>(a*b);   <span class="comment">//乘</span></span><br><span class="line">  <span class="built_in">print</span>(a/b);   <span class="comment">//除</span></span><br><span class="line">  <span class="built_in">print</span>(a%b);   <span class="comment">//其余</span></span><br><span class="line">  <span class="built_in">print</span>(a~/b);  <span class="comment">//取整</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c=a*b;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;--------&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(c);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">//  ==    !=   &gt;    &lt;    &gt;=    &lt;=</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> a=<span class="number">5</span>;</span><br><span class="line">  <span class="built_in">int</span> b=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(a==b);   <span class="comment">//判断是否相等</span></span><br><span class="line">  <span class="built_in">print</span>(a!=b);   <span class="comment">//判断是否不等</span></span><br><span class="line">  <span class="built_in">print</span>(a&gt;b);   <span class="comment">//判断是否大于</span></span><br><span class="line">  <span class="built_in">print</span>(a&lt;b);   <span class="comment">//判断是否小于</span></span><br><span class="line">  <span class="built_in">print</span>(a&gt;=b);   <span class="comment">//判断是否大于等于</span></span><br><span class="line">  <span class="built_in">print</span>(a&lt;=b);   <span class="comment">//判断是否小于等于</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a大于b&#x27;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a小于b&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">/* ! 取反 */</span> </span><br><span class="line">  <span class="built_in">bool</span> flag=<span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">print</span>(!flag);   <span class="comment">//取反</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* &amp;&amp;并且:全部为true的话值为true 否则值为false */</span> </span><br><span class="line">  <span class="built_in">bool</span> a = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">bool</span> b = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">print</span>(a &amp;&amp; b);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* ||或者：全为false的话值为false 否则值为true */</span> </span><br><span class="line">  <span class="built_in">bool</span> c = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">bool</span> d = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">print</span>(c || d);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果一个人的年龄是20 并且 sex是女的话我们打印这个人</span></span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">String</span> sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (age == <span class="number">20</span> &amp;&amp; sex == <span class="string">&quot;女&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$age</span> --- <span class="subst">$sex</span>&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不打印&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> age2 = <span class="number">30</span>;</span><br><span class="line">  <span class="built_in">String</span> sex2 = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (age2 == <span class="number">20</span> &amp;&amp; sex2 == <span class="string">&quot;女&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$age2</span> --- <span class="subst">$sex2</span>&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不打印&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果一个人的年龄是20 或者 sex是女的话我们打印这个人</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> age3 = <span class="number">30</span>;</span><br><span class="line">  <span class="built_in">String</span> sex3 = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (age3 == <span class="number">20</span> || sex3 == <span class="string">&quot;女&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$age3</span> --- <span class="subst">$sex3</span>&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不打印&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">//  1、基础赋值运算符   =   ??=</span></span><br><span class="line">  <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">int</span> b = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">  <span class="built_in">int</span> c = a + b; <span class="comment">//从右向左</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// b ??= 23;  表示如果b为空的话把 23赋值给b</span></span><br><span class="line">  <span class="built_in">int</span> d = <span class="number">10</span>;</span><br><span class="line">  d ??= <span class="number">23</span>;</span><br><span class="line">  <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> e;</span><br><span class="line">  e ??= <span class="number">23</span>;</span><br><span class="line">  <span class="built_in">print</span>(e);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、复合赋值运算符   +=  -=  *=   /=   %=  ~/=</span></span><br><span class="line">  <span class="keyword">var</span> f = <span class="number">12</span>;</span><br><span class="line">  f = f + <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(f);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">13</span>;</span><br><span class="line">  g += <span class="number">10</span>; <span class="comment">//g=g+10</span></span><br><span class="line">  <span class="built_in">print</span>(g);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> h = <span class="number">4</span>;</span><br><span class="line">  h *= <span class="number">3</span>; <span class="comment">//h=h*3;</span></span><br><span class="line">  <span class="built_in">print</span>(h);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">7</span>;</span><br><span class="line">  i %= <span class="number">3</span>; <span class="comment">//i=i%3;</span></span><br><span class="line">  <span class="built_in">print</span>(i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">7</span>;</span><br><span class="line">  j ~/= <span class="number">3</span>; <span class="comment">//j=(j~/3);</span></span><br><span class="line">  <span class="built_in">print</span>(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自增自减运算"><a href="#自增自减运算" class="headerlink" title="自增自减运算"></a>自增自减运算</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ++  --   表示自增 自减 1</span></span><br><span class="line"><span class="comment">    在赋值运算里面 如果++ -- 写在前面 这时候先运算 再赋值，如果++ --写在后面 先赋值后运行运算</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  a++; <span class="comment">//a=a+1;</span></span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">  b--; <span class="comment">//b=b-1;</span></span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> d = a++;</span><br><span class="line">  <span class="built_in">print</span>(c); <span class="comment">//11</span></span><br><span class="line">  <span class="built_in">print</span>(d); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> f = ++a;</span><br><span class="line">  <span class="built_in">print</span>(e); <span class="comment">//11</span></span><br><span class="line">  <span class="built_in">print</span>(f); <span class="comment">//11</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> h = --a;</span><br><span class="line">  <span class="built_in">print</span>(g); <span class="comment">//9</span></span><br><span class="line">  <span class="built_in">print</span>(h); <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> j = a--;</span><br><span class="line">  <span class="built_in">print</span>(i); <span class="comment">//9</span></span><br><span class="line">  <span class="built_in">print</span>(j); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">10</span>;</span><br><span class="line">  ++k;</span><br><span class="line">  <span class="built_in">print</span>(k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1、if  else   switch case</span></span><br><span class="line">  <span class="built_in">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断一个人的成绩 如果大于60 显示及格   如果大于 70显示良好  如果大于90显示优秀</span></span><br><span class="line">  <span class="keyword">var</span> score = <span class="number">41</span>;</span><br><span class="line">  <span class="keyword">if</span> (score &gt; <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;及格&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不及格&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (sex) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;男&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;性别是男&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;女&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;性别是女&#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;性别是女2&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;传入参数错误&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、三目运算符</span></span><br><span class="line">  <span class="keyword">var</span> falg = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="keyword">if</span> (falg) &#123;</span><br><span class="line">    a = <span class="string">&#x27;我是true&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a = <span class="string">&quot;我是false&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> flag2 = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String</span> b = flag2 ? <span class="string">&#x27;我是true&#x27;</span> : <span class="string">&#x27;我是false&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3  ??运算符</span></span><br><span class="line">  <span class="keyword">var</span> c;</span><br><span class="line">  <span class="keyword">var</span> d = c ?? <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(d); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> e = <span class="number">22</span>;</span><br><span class="line">  <span class="keyword">var</span> f = e ?? <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(f); <span class="comment">// 22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart类型转换"><a href="#Dart类型转换" class="headerlink" title="Dart类型转换"></a>Dart类型转换</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1、Number与String类型之间的转换</span></span><br><span class="line">  <span class="comment">// Number类型转换成String类型 toString()</span></span><br><span class="line">  <span class="comment">// String类型转成Number类型  int.parse()</span></span><br><span class="line">  <span class="built_in">String</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> myNum = <span class="built_in">int</span>.parse(str);</span><br><span class="line">  <span class="built_in">print</span>(myNum <span class="keyword">is</span> <span class="built_in">int</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">String</span> str2 = <span class="string">&#x27;123.1&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> myNum2 = <span class="built_in">double</span>.parse(str2);</span><br><span class="line">  <span class="built_in">print</span>(myNum2 <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 价格从字符串转数字时推荐使用浮点型避免报错</span></span><br><span class="line">  <span class="built_in">String</span> price = <span class="string">&#x27;12&#x27;</span>; <span class="comment">// String price = &#x27;12.5&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> myNum3 = <span class="built_in">double</span>.parse(price);</span><br><span class="line">  <span class="built_in">print</span>(myNum3);</span><br><span class="line">  <span class="built_in">print</span>(myNum3 <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  <span class="built_in">String</span> price2 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> myNum4 = <span class="built_in">double</span>.parse(price2);</span><br><span class="line">  <span class="built_in">print</span>(myNum4);</span><br><span class="line">  <span class="built_in">print</span>(myNum4 <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// try  ... catch</span></span><br><span class="line">  <span class="built_in">String</span> price3 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> myNum = <span class="built_in">double</span>.parse(price3);</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 空值预处理</span></span><br><span class="line">  <span class="built_in">String</span> price4 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  price4 = (price4 == <span class="string">&#x27;&#x27;</span>) ? <span class="string">&#x27;0&#x27;</span> : price4;</span><br><span class="line">  <span class="keyword">var</span> myNum5 = <span class="built_in">double</span>.parse(price4);</span><br><span class="line">  <span class="built_in">print</span>(myNum5);</span><br><span class="line">  <span class="built_in">print</span>(myNum5 <span class="keyword">is</span> <span class="built_in">double</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myNum5 = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> str3 = myNum5.toString();</span><br><span class="line">  <span class="built_in">print</span>(str3 <span class="keyword">is</span> <span class="built_in">String</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、其他类型转换成Booleans类型</span></span><br><span class="line">  <span class="comment">// isEmpty:判断字符串是否为空</span></span><br><span class="line">  <span class="keyword">var</span> str4 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (str4.isEmpty) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;str4空&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;str4不为空&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myNum6 = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">if</span> (myNum6 == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非0&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myNum7;</span><br><span class="line">  <span class="keyword">if</span> (myNum7 == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非0&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myNum8;</span><br><span class="line">  <span class="keyword">if</span> (myNum8 == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;空&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;非空&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myNum9 = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">print</span>(myNum9);</span><br><span class="line">  <span class="keyword">if</span> (myNum9.isNaN) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myNum9是NaN&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    // for基本语法</span></span><br><span class="line"><span class="comment">    for (int i = 1; i&lt;=100; i++) &#123;   </span></span><br><span class="line"><span class="comment">      print(i);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //第一步，声明变量int i = 1;</span></span><br><span class="line"><span class="comment">    //第二步，判断i &lt;=100</span></span><br><span class="line"><span class="comment">    //第三步，print(i);</span></span><br><span class="line"><span class="comment">    //第四步，i++</span></span><br><span class="line"><span class="comment">    //第五步 从第二步再来，直到判断为false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、打印0-50所有的偶数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">print</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、求 1+2+3+4 +...100的和</span></span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(sum);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、计算5的阶乘   (1*2*3*4*5    n的阶乘1*2……*n)</span></span><br><span class="line">  <span class="keyword">var</span> sum2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    sum2 *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(sum2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、打印List  [&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;] 里面的内容</span></span><br><span class="line">  <span class="built_in">List</span> list = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line">  <span class="built_in">print</span>(list[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、打印List中item的title</span></span><br><span class="line">  <span class="built_in">List</span> list2 = [</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;新闻111&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;新闻222&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;新闻333&quot;</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">print</span>(list2[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(list[i][<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6、定义一个二维数组 打印里面的内容</span></span><br><span class="line">  <span class="built_in">List</span> list3 = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;cate&quot;</span>: <span class="string">&#x27;国内&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;news&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国内新闻1&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国内新闻2&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国内新闻3&quot;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;cate&quot;</span>: <span class="string">&#x27;国际&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;news&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国际新闻1&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国际新闻2&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;国际新闻3&quot;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    国内</span></span><br><span class="line"><span class="comment">    -------------</span></span><br><span class="line"><span class="comment">    国内新闻1</span></span><br><span class="line"><span class="comment">    国内新闻2</span></span><br><span class="line"><span class="comment">    国内新闻3</span></span><br><span class="line"><span class="comment">    国际</span></span><br><span class="line"><span class="comment">    -------------</span></span><br><span class="line"><span class="comment">    国际新闻1</span></span><br><span class="line"><span class="comment">    国际新闻2</span></span><br><span class="line"><span class="comment">    国际新闻3</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list3.length; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(list3[i][<span class="string">&quot;cate&quot;</span>]);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; list3[i][<span class="string">&quot;news&quot;</span>].length; j++) &#123;</span><br><span class="line">      <span class="built_in">print</span>(list3[i][<span class="string">&quot;news&quot;</span>][j][<span class="string">&quot;title&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-do…while循环语句"><a href="#while-do…while循环语句" class="headerlink" title="while do…while循环语句"></a>while do…while循环语句</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法格式:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  while(表达式/循环条件)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  do&#123;</span></span><br><span class="line"><span class="comment">    语句/循环体</span></span><br><span class="line"><span class="comment">  &#125;while(表达式/循环条件);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  注意： 1、最后的分号不要忘记</span></span><br><span class="line"><span class="comment">        2、循环条件中使用的变量需要经过初始化</span></span><br><span class="line"><span class="comment">        3、循环体中，应有结束循环的条件，否则会造成死循环。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  int i=1;</span></span><br><span class="line"><span class="comment">  while(i&lt;=10)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      print(i);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  //死循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、求1+2+3+4 ...+100的和</span></span><br><span class="line">  <span class="built_in">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (j &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">    sum += j;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(sum);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> k = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> sum2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    sum += k;</span><br><span class="line">    k++;</span><br><span class="line">  &#125; <span class="keyword">while</span> (k &lt;= <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">print</span>(sum2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  while 和 do while的区别   第一次循环条件不成立的情况下</span></span><br><span class="line">  <span class="built_in">int</span> l = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">while</span> (l &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行代码&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行代码&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">while</span> (m &lt; <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break和continue关键词"><a href="#break和continue关键词" class="headerlink" title="break和continue关键词"></a>break和continue关键词</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1、如果i等于4的话跳过</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>; <span class="comment">/*跳过当前循环体 然后循环还会继续执行*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、如果 i等于4的话跳出循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">/*跳出循环体*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、break语句只能向外跳出一层</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;外层---<span class="subst">$i</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;里层<span class="subst">$j</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、while循环 break跳出循环</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">  <span class="keyword">switch</span> (sex) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;男&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;女&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote><p>List里面常用的属性和方法：</p></blockquote><ul><li>常用属性：<ul><li>length          长度</li><li>reversed        翻转</li><li>isEmpty         是否为空</li><li>isNotEmpty      是否不为空</li></ul></li><li>常用方法：  <ul><li>add         增加</li><li>addAll      拼接数组</li><li>contains    查找  传入具体值  返回true/false</li><li>indexOf     查找  传入具体值</li><li>remove      删除  传入具体值</li><li>removeAt    删除  传入索引值</li><li>fillRange(start,end,value)   修改</li><li>insert(index,value);            指定位置插入</li><li>insertAll(index,list)           指定位置插入List</li><li>toList()    其他类型转换成List  </li><li>join()      List转换成字符串</li><li>split()     字符串转化成List</li><li>forEach</li><li>asMap       获取数组每一项的索引值</li><li>map</li><li>where</li><li>any</li><li>every</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 声明List的两种方式</span></span><br><span class="line">  <span class="built_in">List</span> myList = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  <span class="built_in">print</span>(myList[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  list.add(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">  list.add(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// List里面的属性：</span></span><br><span class="line">  <span class="built_in">List</span> myList2 = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  <span class="built_in">print</span>(myList2); <span class="comment">//List</span></span><br><span class="line">  <span class="built_in">print</span>(myList2.length); <span class="comment">//长度</span></span><br><span class="line">  <span class="built_in">print</span>(myList2.isEmpty); <span class="comment">// 判断为空</span></span><br><span class="line">  <span class="built_in">print</span>(myList2.isNotEmpty); <span class="comment">// 判断非空</span></span><br><span class="line">  <span class="built_in">print</span>(myList2.reversed); <span class="comment">// 对列表倒序排序 输出对象是元组 (&#x27;西瓜&#x27;, &#x27;苹果&#x27;, &#x27;香蕉&#x27;)</span></span><br><span class="line">  <span class="keyword">var</span> newMyList = myList2.reversed.toList();</span><br><span class="line">  <span class="built_in">print</span>(newMyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// List里面的方法：</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加</span></span><br><span class="line">  <span class="built_in">List</span> myList3 = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  myList3.add(<span class="string">&#x27;桃子&#x27;</span>); <span class="comment">//增加数据  增加一个</span></span><br><span class="line">  <span class="built_in">print</span>(myList3);</span><br><span class="line">  <span class="comment">// 拼接</span></span><br><span class="line">  myList3.addAll([<span class="string">&#x27;李子&#x27;</span>, <span class="string">&#x27;葡萄&#x27;</span>]); <span class="comment">//拼接数组</span></span><br><span class="line">  <span class="built_in">print</span>(myList3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找</span></span><br><span class="line">  <span class="built_in">print</span>(myList3.indexOf(<span class="string">&#x27;苹果&#x27;</span>)); <span class="comment">//indexOf查找数据 查找不到返回-1  查找到返回索引值</span></span><br><span class="line">  <span class="built_in">print</span>(myList3.indexOf(<span class="string">&#x27;苹x果&#x27;</span>)); <span class="comment">//indexOf查找数据 查找不到返回-1  查找到返回索引值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除某个值</span></span><br><span class="line">  myList3.remove(<span class="string">&#x27;西瓜&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(myList3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除某个索引值</span></span><br><span class="line">  myList3.removeAt(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">print</span>(myList3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改 插入</span></span><br><span class="line">  <span class="built_in">List</span> myList4 = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  myList4.fillRange(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;aaa&#x27;</span>); <span class="comment">// 修改</span></span><br><span class="line">  myList4.fillRange(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  myList4.insert(<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>); <span class="comment">//插入  一个</span></span><br><span class="line">  myList4.insertAll(<span class="number">1</span>, [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]); <span class="comment">//插入 多个</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组转换成字符串</span></span><br><span class="line">  <span class="built_in">List</span> myList5 = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> str = myList5.join(<span class="string">&#x27;-&#x27;</span>); <span class="comment">//list转换成字符串</span></span><br><span class="line">  <span class="built_in">print</span>(str);</span><br><span class="line">  <span class="built_in">print</span>(str <span class="keyword">is</span> <span class="built_in">String</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 字符串按-切割成数组</span></span><br><span class="line">  <span class="keyword">var</span> str2 = <span class="string">&#x27;香蕉-苹果-西瓜&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> myList6 = str2.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(myList6);</span><br><span class="line">  <span class="built_in">print</span>(myList6 <span class="keyword">is</span> <span class="built_in">List</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">//用它最主要的功能就是去除数组重复内容</span></span><br><span class="line">  <span class="comment">//Set是没有顺序且不能重复的集合，所以不能通过索引去获取值</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  s.add(<span class="string">&#x27;香蕉&#x27;</span>);</span><br><span class="line">  s.add(<span class="string">&#x27;苹果&#x27;</span>);</span><br><span class="line">  s.add(<span class="string">&#x27;苹果&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(s); <span class="comment">// &#123;香蕉, 苹果&#125;</span></span><br><span class="line">  <span class="built_in">print</span>(s.toList()); <span class="comment">// [香蕉, 苹果]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数组去重</span></span><br><span class="line">  <span class="built_in">List</span> myList = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>];</span><br><span class="line">  <span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  s1.addAll(myList);</span><br><span class="line">  <span class="built_in">print</span>(s1); <span class="comment">// &#123;香蕉, 苹果, 西瓜&#125;</span></span><br><span class="line">  <span class="built_in">print</span>(s1.toList()); <span class="comment">// [香蕉, 苹果, 西瓜]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>映射(Maps)是无序的键值对：</p></blockquote><ul><li>常用属性：<ul><li>keys            获取所有的key值</li><li>values          获取所有的value值</li><li>isEmpty         是否为空</li><li>isNotEmpty      是否不为空</li></ul></li><li>常用方法:<ul><li>remove(key)     删除指定key的数据</li><li>addAll({…})   合并映射  给映射内增加属性</li><li>containsValue   查看映射内的值  返回true/false</li><li>forEach</li><li>map</li><li>where</li><li>any</li><li>every</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">Map</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">  <span class="built_in">print</span>(person);</span><br><span class="line">  <span class="built_in">print</span>(m);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//常用属性：</span></span><br><span class="line">  <span class="built_in">Map</span> person2 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line">  <span class="built_in">print</span>(person2.keys.toList());</span><br><span class="line">  <span class="built_in">print</span>(person2.values.toList());</span><br><span class="line">  <span class="built_in">print</span>(person2.isEmpty);</span><br><span class="line">  <span class="built_in">print</span>(person2.isNotEmpty);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//常用方法：</span></span><br><span class="line">  <span class="built_in">Map</span> person3 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line">  person3.addAll(&#123;</span><br><span class="line">    <span class="string">&quot;work&quot;</span>: [<span class="string">&#x27;敲代码&#x27;</span>, <span class="string">&#x27;送外卖&#x27;</span>],</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">160</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(person3);</span><br><span class="line">  person3.remove(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(person3);</span><br><span class="line">  <span class="built_in">print</span>(person3.containsValue(<span class="string">&#x27;张三&#x27;</span>)); <span class="comment">// 查看映射内的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><blockquote><p>forEach map where any every</p></blockquote><h4 id="List中使用"><a href="#List中使用" class="headerlink" title="List中使用"></a>List中使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 循环输出myList</span></span><br><span class="line">  <span class="built_in">List</span> myList = [<span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">    <span class="built_in">print</span>(myList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> myList) &#123;</span><br><span class="line">    <span class="built_in">print</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  myList.forEach((value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改myList2每一项</span></span><br><span class="line">  <span class="built_in">List</span> myList2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">  <span class="comment">// List newList = [];</span></span><br><span class="line">  <span class="built_in">List</span> newList = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myList2.length; i++) &#123;</span><br><span class="line">    newList.add(myList2[i] * <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(newList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newList2 = myList.map((value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(newList2.toList());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找符合条件的值</span></span><br><span class="line">  <span class="built_in">List</span> myList3 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">var</span> newList3 = myList3.where((value) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">5</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(newList3.toList());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否存在符合条件的值 true/false</span></span><br><span class="line">  <span class="built_in">List</span> myList4 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">var</span> f = myList4.any((value) &#123;</span><br><span class="line">    <span class="comment">//只要集合里面有满足条件的就返回true</span></span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">5</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(f);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否存都是符合条件的值 true/false</span></span><br><span class="line">  <span class="built_in">List</span> myList5 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">var</span> f2 = myList5.every((value) &#123;</span><br><span class="line">    <span class="comment">//每一个都满足条件返回true  否则返回false</span></span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">5</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(f2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set中使用"><a href="#Set中使用" class="headerlink" title="Set中使用"></a>Set中使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 循环输出Set的值</span></span><br><span class="line">  <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  s.addAll([<span class="number">1</span>, <span class="number">222</span>, <span class="number">333</span>]);</span><br><span class="line">  s.forEach((value) =&gt; <span class="built_in">print</span>(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map中使用"><a href="#Map中使用" class="headerlink" title="Map中使用"></a>Map中使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">Map</span> person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;;</span><br><span class="line">  person.forEach((key, value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$key</span>---<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>内置方法/函数：<ul><li>print();</li></ul></li><li>自定义方法：<ul><li>自定义方法的基本格式：</li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回类型 方法名称（参数1，参数2,...）&#123;</span><br><span class="line">  方法体</span><br><span class="line">  return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的定义、变量及作用域"><a href="#函数的定义、变量及作用域" class="headerlink" title="函数的定义、变量及作用域"></a>函数的定义、变量及作用域</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;我是一个自定义方法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> getNum() &#123;</span><br><span class="line">  <span class="keyword">var</span> myNum = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">return</span> myNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> printUserInfo() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;this is str&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> getList() &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;2222&#x27;</span>, <span class="string">&#x27;333&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;调用系统内置的方法&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  printInfo();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> n = getNum();</span><br><span class="line">  <span class="built_in">print</span>(n);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(printUserInfo());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(getList());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// print(getList());</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//演示方法的作用域</span></span><br><span class="line">  <span class="keyword">void</span> xxx() &#123;</span><br><span class="line">    aaa() &#123;</span><br><span class="line">      <span class="built_in">print</span>(getList());</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    aaa();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// aaa();  // 错误写法</span></span><br><span class="line">  xxx(); <span class="comment">// 调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的传参、默认参数及可选参数"><a href="#函数的传参、默认参数及可选参数" class="headerlink" title="函数的传参、默认参数及可选参数"></a>函数的传参、默认参数及可选参数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1、定义一个方法 求1到这个数的所有数的和 60 1+2+3+。。。+60</span></span><br><span class="line">  <span class="built_in">int</span> sumNum(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> n1 = sumNum(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">print</span>(n1);</span><br><span class="line">  <span class="keyword">var</span> n2 = sumNum(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">print</span>(n2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、定义一个方法然后打印用户信息</span></span><br><span class="line">  <span class="built_in">String</span> printUserInfo(<span class="built_in">String</span> username, <span class="built_in">int</span> age) &#123; <span class="comment">// 形参</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---年龄:<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>)); <span class="comment">// 实参</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、定义一个带可选参数的方法</span></span><br><span class="line">  <span class="built_in">String</span> printUserInfo2(<span class="built_in">String</span> username, [<span class="built_in">int</span> age]) &#123;</span><br><span class="line">    <span class="comment">//行参</span></span><br><span class="line">    <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---年龄:<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---年龄保密&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo2(<span class="string">&#x27;张三&#x27;</span>, <span class="number">21</span>)); <span class="comment">//实参</span></span><br><span class="line">  <span class="built_in">print</span>(printUserInfo2(<span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、定义一个带默认参数的方法</span></span><br><span class="line">  <span class="built_in">String</span> printUserInfo3(<span class="built_in">String</span> username, [<span class="built_in">String</span> sex = <span class="string">&#x27;男&#x27;</span>, <span class="built_in">int</span> age]) &#123;</span><br><span class="line">    <span class="comment">//行参</span></span><br><span class="line">    <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄:<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄保密&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo3(<span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo3(<span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;女&#x27;</span>));</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo3(<span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、定义一个命名参数的方法</span></span><br><span class="line">  <span class="built_in">String</span> printUserInfo4(<span class="built_in">String</span> username, &#123;<span class="built_in">int</span> age, <span class="built_in">String</span> sex = <span class="string">&#x27;男&#x27;</span>&#125;) &#123;</span><br><span class="line">    <span class="comment">//行参</span></span><br><span class="line">    <span class="keyword">if</span> (age != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄:<span class="subst">$age</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名:<span class="subst">$username</span>---性别:<span class="subst">$sex</span>--年龄保密&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 命名参数同时也是可选参数</span></span><br><span class="line">  <span class="built_in">print</span>(printUserInfo4(<span class="string">&#x27;小李&#x27;</span>, sex: <span class="string">&#x27;未知&#x27;</span>));</span><br><span class="line">  <span class="built_in">print</span>(printUserInfo4(<span class="string">&#x27;张三&#x27;</span>, age: <span class="number">20</span>, sex: <span class="string">&#x27;未知&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6、实现一个 把方法当做参数的方法</span></span><br><span class="line">  <span class="keyword">var</span> fn = () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是一个匿名方法&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  fn();</span><br><span class="line">  <span class="comment">// 方法1</span></span><br><span class="line">  fn1() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fn1&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 方法2</span></span><br><span class="line">  fn2(fn) &#123;</span><br><span class="line">    fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用fn2这个方法 把fn1这个方法当做参数传入</span></span><br><span class="line">  fn2(fn1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 1. 需求：使用forEach打印下面List里面的数据</span></span><br><span class="line">  <span class="built_in">List</span> list = [<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;香蕉&#x27;</span>, <span class="string">&#x27;西瓜&#x27;</span>];</span><br><span class="line">  list.forEach((value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value);</span><br><span class="line">  &#125;);</span><br><span class="line">  list.forEach((value) =&gt; <span class="built_in">print</span>(value));</span><br><span class="line">  list.forEach((value) =&gt; &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 需求：修改下面List里面的数据，让数组中大于2的值乘以2</span></span><br><span class="line">  <span class="built_in">List</span> list2 = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> newList = list2.map((value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(newList.toList());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newList2 = list.map((value) =&gt; value &gt; <span class="number">2</span> ? value * <span class="number">2</span> : value);</span><br><span class="line">  <span class="built_in">print</span>(newList2.toList());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  需求： 1、定义一个方法isEvenNumber来判断一个数是否是偶数  </span></span><br><span class="line"><span class="comment">        2、定义一个方法打印1-n以内的所有偶数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个方法isEvenNumber来判断一个数是否是偶数</span></span><br><span class="line">  <span class="built_in">bool</span> isEvenNumber(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个方法打印1-n以内的所有偶数</span></span><br><span class="line">  printNum(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isEvenNumber(i)) &#123;</span><br><span class="line">        <span class="built_in">print</span>(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  printNum(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> getNum(<span class="built_in">int</span> n) &#123;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(getNum(<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 匿名函数</span></span><br><span class="line">  <span class="keyword">var</span> printNum = () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  printNum();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> printNum2 = (<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">print</span>(n + <span class="number">2</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  printNum2(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  (() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是自执行方法&#x27;</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传参</span></span><br><span class="line">  ((<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">print</span>(n);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是自执行方法&#x27;</span>);</span><br><span class="line">  &#125;)(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的递归"><a href="#方法的递归" class="headerlink" title="方法的递归"></a>方法的递归</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">1</span>;</span><br><span class="line">  fn(n) &#123;</span><br><span class="line">    sum *= n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">print</span>(sum);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过方法的递归 求1-100的和</span></span><br><span class="line">  <span class="keyword">var</span> sum1 = <span class="number">0</span>;</span><br><span class="line">  fn1(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    sum1 += n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fn1(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">print</span>(sum1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>变量的特点</p><ol><li>全局变量特点: 全局变量常驻内存、全局变量污染全局</li><li>局部变量的特点: 不常驻内存会被垃圾机制回收、不会污染全局  </li></ol><p>想实现的功能：</p><ol><li>常驻内存</li><li>不污染全局</li></ol><blockquote><p>产生了闭包,闭包可以解决这个问题…..<br>闭包: 函数嵌套函数, 内部函数会调用外部函数的变量或参数, 变量或参数不会被系统回收(不会释放内存)<br>闭包的写法: 函数嵌套函数，并<code>return</code>里面的函数，这样就形成了闭包。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*全局变量*/</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(a);  <span class="comment">// 123</span></span><br><span class="line">  fn() &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();  <span class="comment">// 124</span></span><br><span class="line">  fn();  <span class="comment">// 125</span></span><br><span class="line">  fn();  <span class="comment">// 126</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 局部变量</span></span><br><span class="line">  printInfo() &#123;</span><br><span class="line">    <span class="keyword">var</span> myNum = <span class="number">123</span>;</span><br><span class="line">    myNum++;</span><br><span class="line">    <span class="built_in">print</span>(myNum);</span><br><span class="line">  &#125;</span><br><span class="line">  printInfo();  <span class="comment">// 124</span></span><br><span class="line">  printInfo();  <span class="comment">// 124</span></span><br><span class="line">  printInfo();  <span class="comment">// 124</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 闭包</span></span><br><span class="line">  fn2() &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">/*不会污染全局 常驻内存*/</span></span><br><span class="line">    <span class="keyword">return</span> () &#123;</span><br><span class="line">      a++;</span><br><span class="line">      <span class="built_in">print</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> b = fn2();</span><br><span class="line">  b();  <span class="comment">// 124</span></span><br><span class="line">  b();  <span class="comment">// 125</span></span><br><span class="line">  b();  <span class="comment">// 126</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象-类"><a href="#对象-类" class="headerlink" title="对象-类"></a>对象-类</h2><h3 id="面向对象概念"><a href="#面向对象概念" class="headerlink" title="面向对象概念"></a>面向对象概念</h3><p>面向对象编程(OOP)的三个基本特征是：封装、继承、多态</p><ul><li>封装：封装是对象和类概念的主要特性。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象调用, 而一部分属性和方法则隐藏。</li><li>继承：面向对象编程 (OOP) 语言的一个主要功能就是“继承”。继承是指这样一种能力：它可以使用现有类的功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。</li><li>多态：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果 。</li></ul><p>Dart所有的东西都是对象，所有的对象都继承自Object类。</p><p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是Object的子类</p><p>一个类通常由属性和方法组成。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dart内置的类</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// List</span></span><br><span class="line">  <span class="built_in">List</span> list=<span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  list.isEmpty;</span><br><span class="line">  list.add(<span class="string">&#x27;香蕉&#x27;</span>);</span><br><span class="line">  list.add(<span class="string">&#x27;香蕉1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Map</span></span><br><span class="line">  <span class="built_in">Map</span> m=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  m[<span class="string">&quot;username&quot;</span>]=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  m.addAll(&#123;<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;);</span><br><span class="line">  m.isEmpty;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Object</span></span><br><span class="line">  <span class="built_in">Object</span> a=<span class="number">123</span>;</span><br><span class="line">  <span class="built_in">Object</span> v=<span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);</span><br><span class="line">  <span class="built_in">print</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><blockquote><p>Dart是一门使用类和单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是Object的子类</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">23</span>;</span><br><span class="line">  <span class="keyword">void</span> getInfo() &#123;</span><br><span class="line">    <span class="comment">// print(&quot;$name----$age&quot;);</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> setInfo(<span class="built_in">int</span> age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 实例化</span></span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="built_in">print</span>(p1.name);</span><br><span class="line">  p1.getInfo();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例化类的类型</span></span><br><span class="line">  Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="built_in">print</span>(p2.name);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用类里的方法</span></span><br><span class="line">  p2.setInfo(<span class="number">28</span>);</span><br><span class="line">  p2.getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><blockquote><p>构造函数的写法</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 默认构造函数</span></span><br><span class="line">  Person() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是构造函数里面的内容 这个方法在实例化的时候触发&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用构造函数初始化类的属性</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">//默认构造函数</span></span><br><span class="line">  Person(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p1.printInfo();</span><br><span class="line">  </span><br><span class="line">  Person p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">  p2.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认构造函数的简写</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p1.printInfo();</span><br><span class="line">  </span><br><span class="line">  Person p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">  p2.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h3><p>dart里面命名构造函数可以写多个</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  Person.now() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是命名构造函数&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.setInfo(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">DateTime</span>.now(); <span class="comment">// 实例化DateTime调用它的命名构造函数</span></span><br><span class="line">  <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>); <span class="comment">// 默认实例化类的时候调用的是 默认构造函数</span></span><br><span class="line">  p1.printInfo();</span><br><span class="line"></span><br><span class="line">  Person p2 = <span class="keyword">new</span> Person.now(); <span class="comment">// 调用命名构造函数</span></span><br><span class="line"></span><br><span class="line">  Person p3 = <span class="keyword">new</span> Person.setInfo(<span class="string">&#x27;李四&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">  p3.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将类抽离成一个模块"><a href="#将类抽离成一个模块" class="headerlink" title="将类抽离成一个模块"></a>将类抽离成一个模块</h3><p><code>index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/Person.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p1=<span class="keyword">new</span> Person.setInfo(<span class="string">&#x27;李四1&#x27;</span>,<span class="number">30</span>);</span><br><span class="line">  p1.printInfo(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/Person.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age; </span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);</span><br><span class="line">  </span><br><span class="line">  Person.now()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是命名构造函数&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.setInfo(<span class="built_in">String</span> name,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的私有属性和方法"><a href="#类的私有属性和方法" class="headerlink" title="类的私有属性和方法"></a>类的私有属性和方法</h3><p>Dart和其他面向对象语言不一样，Data中没有<code>public</code> <code>private</code> <code>protected</code>这些访问修饰符合</p><p>但是我们可以使用<code>_</code>把一个属性或者方法定义成私有(类必须在单独的文件中，才能将属性或方法私有)。</p><p><code>index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/Animal.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Animal a = <span class="keyword">new</span> Animal(<span class="string">&#x27;小狗&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">print</span>(a.age); <span class="comment">// 间接的获取私有属性</span></span><br><span class="line">  <span class="built_in">print</span>(a.getName()); <span class="comment">// 间接的获取私有属性</span></span><br><span class="line">  a.execRun(); <span class="comment">// 间接的调用私有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/Animal.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _name; <span class="comment">// 私有属性</span></span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">// 默认构造函数的简写</span></span><br><span class="line">  Animal(<span class="keyword">this</span>._name, <span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是一个私有方法&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execRun() &#123;</span><br><span class="line">    <span class="keyword">this</span>._run(); <span class="comment">// 类里面方法的相互调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的getter和setter"><a href="#类的getter和setter" class="headerlink" title="类的getter和setter"></a>类的getter和setter</h3><p>获取矩形的面积</p><ul><li>使用方法获取</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line"></span><br><span class="line">  Rect(<span class="keyword">this</span>.height, <span class="keyword">this</span>.width);</span><br><span class="line">  area() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Rect r = <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积:<span class="subst">$&#123;r.area()&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用get获取(计算属性)</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  Rect(<span class="keyword">this</span>.height, <span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Rect r = <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积:<span class="subst">$&#123;r.area&#125;</span>&quot;</span>); <span class="comment">// 注意调用直接通过访问属性的方式访问area</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用set存储</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line"></span><br><span class="line">  Rect(<span class="keyword">this</span>.height, <span class="keyword">this</span>.width);</span><br><span class="line">  <span class="keyword">get</span> area &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> areaHeight(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Rect r = <span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">  r.areaHeight = <span class="number">6</span>;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积:<span class="subst">$&#123;r.area&#125;</span>&quot;</span>); <span class="comment">// 注意调用直接通过访问属性的方式访问area</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的初始化列表"><a href="#类的初始化列表" class="headerlink" title="类的初始化列表"></a>类的初始化列表</h3><p>Dart中我们也可以在构造函数体运行之前初始化实例变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>&#123;</span><br><span class="line">  <span class="built_in">int</span> height;</span><br><span class="line">  <span class="built_in">int</span> width;</span><br><span class="line">  Rect():height=<span class="number">2</span>,width=<span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.height&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.width&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  getArea()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.height*<span class="keyword">this</span>.width;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Rect r=<span class="keyword">new</span> Rect();</span><br><span class="line">  <span class="built_in">print</span>(r.getArea()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ol><li>使用static 关键字来实现类级别的变量和函数</li><li>静态方法不能访问非静态成员，非静态方法可以访问静态成员</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(Person.name);</span><br><span class="line">  Person.<span class="keyword">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非静态方法访问静态成员和非静态成员"><a href="#非静态方法访问静态成员和非静态成员" class="headerlink" title="非静态方法访问静态成员和非静态成员"></a>非静态方法访问静态成员和非静态成员</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="comment">/*非静态方法可以访问静态成员以及非静态成员*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(name); <span class="comment">// 访问静态属性</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">this</span>.age); <span class="comment">// 访问非静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">show</span>(); <span class="comment">// 调用静态方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p = <span class="keyword">new</span> Person();</span><br><span class="line">  p.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法只能访问静态成员"><a href="#静态方法只能访问静态成员" class="headerlink" title="静态方法只能访问静态成员"></a>静态方法只能访问静态成员</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">show</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> printUserInfo() &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="built_in">print</span>(name); <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">show</span>(); <span class="comment">// 静态方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// print(age); // 静态方法没法访问非静态的属性</span></span><br><span class="line">    <span class="comment">// print(this.age); // 静态方法没法访问非静态的属性</span></span><br><span class="line">    <span class="comment">// this.printInfo(); // 静态方法没法访问非静态的方法</span></span><br><span class="line">    <span class="comment">// printInfo(); // 静态方法没法访问非静态的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person.printUserInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><ul><li>?     条件运算符 （了解）</li><li>as    类型转换</li><li>is    类型判断</li><li>..    级联操作 （连缀）  (记住)</li></ul><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p;</span><br><span class="line">  p?.printInfo();</span><br><span class="line"></span><br><span class="line">  Person p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p2?.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作符-类型判断"><a href="#操作符-类型判断" class="headerlink" title="操作符-类型判断"></a>操作符-类型判断</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (p <span class="keyword">is</span> Person) &#123;</span><br><span class="line">    p.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  p.printInfo(); <span class="comment">// 李四---20</span></span><br><span class="line">  <span class="built_in">print</span>(p <span class="keyword">is</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> p1;</span><br><span class="line">  p1 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三1&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  p1.printInfo(); <span class="comment">// 老版本报错 不知道p1是字符串还是Person类</span></span><br><span class="line">  (p1 <span class="keyword">as</span> Person).printInfo(); <span class="comment">// 强制转换为Person类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">  p1.printInfo(); <span class="comment">// 张三---20</span></span><br><span class="line"></span><br><span class="line">  p1.name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">  p1.age = <span class="number">40</span>;</span><br><span class="line">  p1.printInfo(); <span class="comment">// 李四---40</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用连缀简化为</span></span><br><span class="line">  p1..name = <span class="string">&#x27;王五&#x27;</span></span><br><span class="line">    ..age = <span class="number">60</span></span><br><span class="line">    ..printInfo(); <span class="comment">// 王五---60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><h4 id="简单继承"><a href="#简单继承" class="headerlink" title="简单继承"></a>简单继承</h4><ol><li>子类使用extends关键词来继承父类</li><li>子类会继承父类里面可见的属性和方法 但是不会继承构造函数</li><li>子类能复写父类的方法 getter和setter</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="built_in">num</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  Web w = <span class="keyword">new</span> Web();</span><br><span class="line">  <span class="built_in">print</span>(w.name);</span><br><span class="line">  w.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super关键词的使用"><a href="#super关键词的使用" class="headerlink" title="super关键词的使用"></a>super关键词的使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p.printInfo();</span><br><span class="line"></span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p1.printInfo();</span><br><span class="line"></span><br><span class="line">  Web w = <span class="keyword">new</span> Web(<span class="string">&#x27;王五&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">  w.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>继承类的属性扩展</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age, <span class="built_in">String</span> sex) : <span class="keyword">super</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>--<span class="subst">$&#123;<span class="keyword">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Person p = <span class="keyword">new</span> Person(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p.printInfo();</span><br><span class="line"></span><br><span class="line">  Person p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  p1.printInfo();</span><br><span class="line"></span><br><span class="line">  Web w = <span class="keyword">new</span> Web(<span class="string">&#x27;王五&#x27;</span>, <span class="number">12</span>);</span><br><span class="line">  w.printInfo();</span><br><span class="line">  w.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>super给命名构造函数传参</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person.setInfo(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> sex;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age, <span class="keyword">this</span>.sex) : <span class="keyword">super</span>.setInfo(name, age) &#123;&#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>--<span class="subst">$&#123;<span class="keyword">this</span>.sex&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  Web w = <span class="keyword">new</span> Web(<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">  w.printInfo();</span><br><span class="line">  w.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复写父类的方法"><a href="#复写父类的方法" class="headerlink" title="复写父类的方法"></a>复写父类的方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age);</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 覆写父类的方法</span></span><br><span class="line">  <span class="meta">@override</span> <span class="comment">//可以写也可以不写 建议在覆写父类方法的时候加上 @override</span></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;姓名：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---年龄：<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>的工作是写代码&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Web w = <span class="keyword">new</span> Web(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  w.printInfo();</span><br><span class="line">  w.work();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类调用父类的方法"><a href="#子类调用父类的方法" class="headerlink" title="子类调用父类的方法"></a>子类调用父类的方法</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  work() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  Web(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age);</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">    <span class="keyword">super</span>.work(); <span class="comment">//自类调用父类的方法</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//覆写父类的方法</span></span><br><span class="line">  <span class="meta">@override</span> <span class="comment">//可以写也可以不写  建议在覆写父类方法的时候加上 @override</span></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;姓名：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>---年龄：<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  Web w = <span class="keyword">new</span> Web(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  w.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="创建抽象类"><a href="#创建抽象类" class="headerlink" title="创建抽象类"></a>创建抽象类</h3><p>Dart抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。</p><ol><li>抽象类通过abstract 关键字来定义</li><li>Dart中的抽象方法不能用abstract声明，Dart中没有方法体的方法我们称为抽象方法。</li><li>如果子类继承抽象类必须得实现里面的抽象方法</li><li>如果把抽象类当做接口实现的话必须得实现抽象类里面定义的所有属性和方法。</li><li>抽象类不能被实例化，只有继承它的子类可以</li></ol><p>extends抽象类 和 implements的区别：</p><ol><li>如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话我们就用extends继承抽象类</li><li>如果只是把抽象类当做标准的话我们就用implements实现抽象类</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例：定义一个Animal 类要求它的子类必须包含eat方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  eat(); <span class="comment">//抽象方法</span></span><br><span class="line">  run(); <span class="comment">//抽象方法</span></span><br><span class="line">  </span><br><span class="line">  printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是一个抽象类里面的普通方法&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小狗在吃骨头&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement run</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小狗在跑&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement eat</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小猫在吃老鼠&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement run</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小猫在走&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">  d.eat();</span><br><span class="line">  d.printInfo();</span><br><span class="line"></span><br><span class="line">  Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">  c.eat();</span><br><span class="line">  c.printInfo();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Animal a = new Animal(); //抽象类没法直接被实例化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态：允许将子类类型的指针赋值给父类类型的指针, 同一个函数调用会有不同的执行效果。</p><p>子类的实例赋值给父类的引用。</p><p>多态就是父类定义一个方法不去实现，让继承他的子类去实现，每个子类有不同的表现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  eat();   <span class="comment">//抽象方法 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;小狗在吃骨头&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  eat() &#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小猫在吃老鼠&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="comment">// 类型定义为父类 可以访问run方法</span></span><br><span class="line">  Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">  d.eat();</span><br><span class="line">  d.run();</span><br><span class="line"></span><br><span class="line">  Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">  c.eat();</span><br><span class="line">  c.run();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类型定义为父类 不可以访问run方法</span></span><br><span class="line">  Animal d1 = <span class="keyword">new</span> Dog();</span><br><span class="line">  d1.eat();</span><br><span class="line"></span><br><span class="line">  Animal c1 = <span class="keyword">new</span> Cat();</span><br><span class="line">  c1.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><code>dart</code>和<code>Java</code>一样，<code>dart</code>也有接口，但是和<code>Java</code>还是有区别的。<br>首先，<code>dart</code>的接口没有<code>interface</code>关键字定义接口，而是普通类或抽象类都可以作为接口被实现。<br>同样使用<code>implements</code>关键字进行实现。</p><p>但是<code>dart</code>的接口有点奇怪，如果实现的类是普通类，会将普通类和抽象中的属性的方法全部需要覆写一遍。<br>而因为抽象类可以定义抽象方法，普通类不可以，所以一般如果要实现像Java接口那样的方式，一般会使用抽象类。<br>建议使用抽象类定义接口。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义一个DB库 支持 mysql  mssql  mongodb</span></span><br><span class="line"><span class="comment">  mysql  mssql  mongodb三个类里面都有同样的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span> </span>&#123;</span><br><span class="line">  <span class="comment">//当做接口   接口：就是约定 、规范</span></span><br><span class="line">  <span class="built_in">String</span> uri; <span class="comment">//数据库的链接地址</span></span><br><span class="line">  add(<span class="built_in">String</span> data);</span><br><span class="line">  save();</span><br><span class="line">  delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Db</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> uri;</span><br><span class="line"></span><br><span class="line">  Mysql(<span class="keyword">this</span>.uri);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(data) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement add</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是mysql的add方法&#x27;</span> + data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement delete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement save</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsSql</span> <span class="keyword">implements</span> <span class="title">Db</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> uri;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(<span class="built_in">String</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是mssql的add方法&#x27;</span> + data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement delete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement save</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Mysql mysql = <span class="keyword">new</span> Mysql(<span class="string">&#x27;xxxxxx&#x27;</span>);</span><br><span class="line">  mysql.add(<span class="string">&#x27;1243214&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口文件分离"><a href="#接口文件分离" class="headerlink" title="接口文件分离"></a>接口文件分离</h3><p><code>lib/Db.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;   <span class="comment">//当做接口   接口：就是约定 、规范</span></span><br><span class="line">    <span class="built_in">String</span> uri;      <span class="comment">//数据库的链接地址</span></span><br><span class="line">    add(<span class="built_in">String</span> data);</span><br><span class="line">    save();</span><br><span class="line">    delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/MySql.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Db.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> uri;</span><br><span class="line"></span><br><span class="line">  Mysql(<span class="keyword">this</span>.uri);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(data) &#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是mysql的add方法&#x27;</span>+data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/MsSql.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;Db.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsSql</span> <span class="keyword">implements</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> uri;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  add(<span class="built_in">String</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是mssql的add方法&#x27;</span>+data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  delete() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/MsSql.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/MySql.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  Mysql mysql = <span class="keyword">new</span> Mysql(<span class="string">&#x27;xxxxxx&#x27;</span>);</span><br><span class="line">  mysql.add(<span class="string">&#x27;1243214&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  MsSql mssql = <span class="keyword">new</span> MsSql();</span><br><span class="line">  mssql.uri = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">  mssql.add(<span class="string">&#x27;增加的数据&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个类实现多个接口"><a href="#一个类实现多个接口" class="headerlink" title="一个类实现多个接口"></a>一个类实现多个接口</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  printA();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  printB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printA() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;printA&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  printB() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement printB</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  C c = <span class="keyword">new</span> C();</span><br><span class="line">  c.printA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的混入"><a href="#类的混入" class="headerlink" title="类的混入"></a>类的混入</h2><p><code>mixins</code>的中文意思是混入，就是在类中混入其他功能。在<code>Dart</code>中可以使用<code>mixins</code>实现类似多继承的功能。</p><p>因为<code>mixins</code>使用的条件，随着<code>Dart</code>版本一直在变，这里讲的是<code>Dart2.x</code>中使用<code>mixins</code>的条件：</p><ol><li>作为mixins的类只能继承自Object，不能继承其他类</li><li>作为mixins的类不能有构造函数</li><li>一个类可以mixins多个mixins类</li><li>mixins绝不是继承，也不是接口，而是一种全新的特性</li></ol><h3 id="类仅混入"><a href="#类仅混入" class="headerlink" title="类仅混入"></a>类仅混入</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> info = <span class="string">&quot;this is A&quot;</span>;</span><br><span class="line">  <span class="keyword">void</span> printA() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printB() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">with</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line">  c.printA();</span><br><span class="line">  c.printB();</span><br><span class="line">  <span class="built_in">print</span>(c.info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类继承的同时混入"><a href="#类继承的同时混入" class="headerlink" title="类继承的同时混入"></a>类继承的同时混入</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">num</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Person Run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> info = <span class="string">&quot;this is A&quot;</span>;</span><br><span class="line">  <span class="keyword">void</span> printA() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A Run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printB() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B Run&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">with</span> <span class="title">B</span>, <span class="title">A</span> </span>&#123;</span><br><span class="line">  C(<span class="built_in">String</span> name, <span class="built_in">num</span> age) : <span class="keyword">super</span>(name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">new</span> C(<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  c.printInfo();    <span class="comment">// 张三----20</span></span><br><span class="line">  c.printB();       <span class="comment">// B</span></span><br><span class="line">  <span class="built_in">print</span>(c.info);    <span class="comment">// this is A</span></span><br><span class="line">  c.run();          <span class="comment">// A Run</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当混入的类存在相同的方法的时候，后混入的类会覆盖前混入的类。当继承和混入存在相同方法的时候，混入会覆盖继承的方法。</p></blockquote><h3 id="类混入的实例类型"><a href="#类混入的实例类型" class="headerlink" title="类混入的实例类型"></a>类混入的实例类型</h3><p>很简单，<code>mixins</code>混入的类型就是其超类的子类型。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> info = <span class="string">&quot;this is A&quot;</span>;</span><br><span class="line">  <span class="keyword">void</span> printA() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> printB() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">with</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">new</span> C();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(c <span class="keyword">is</span> C); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">print</span>(c <span class="keyword">is</span> A); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">print</span>(c <span class="keyword">is</span> B); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line">  <span class="built_in">print</span>(a <span class="keyword">is</span> <span class="built_in">Object</span>); <span class="comment">//true a也是Object的子类型，因为所有的类都继承于Object类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>通俗理解：泛型就是解决 类 接口 方法的复用性、以及对不特定数据类型的支持(类型校验)</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><blockquote><p>期望方法传入什么类型返回什么类型</p></blockquote><ul><li>传入string返回string</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能返回string类型的数据</span></span><br><span class="line"><span class="built_in">String</span> getData(<span class="built_in">String</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义多个方法，A传入string返回string，B传入int返回int</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时支持返回 string类型 和int类型  （代码冗余）</span></span><br><span class="line"><span class="built_in">String</span> getData1(<span class="built_in">String</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> getData2(<span class="built_in">int</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不指定类型</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时返回 string类型 和number类型 不指定类型可以解决这个问题 但放弃了类型校验</span></span><br><span class="line">getData3(value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>泛型使用</li></ul><p>不指定类型放弃了类型检查。我们现在想实现的是传入什么 返回什么。<br>比如:传入<code>number</code>类型必须返回<code>number</code>类型，传入<code>string</code>类型必须返回<code>string</code>类型。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">T getData4&lt;T&gt;(T value) &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">print</span>(getData4(<span class="number">21</span>));</span><br><span class="line">  <span class="built_in">print</span>(getData4(<span class="string">&#x27;xxx&#x27;</span>));</span><br><span class="line">  <span class="built_in">print</span>(getData4&lt;<span class="built_in">String</span>&gt;(<span class="string">&#x27;你好&#x27;</span>)); <span class="comment">// 指定类型</span></span><br><span class="line">  <span class="built_in">print</span>(getData4&lt;<span class="built_in">int</span>&gt;(<span class="number">123</span>));      <span class="comment">// 指定类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 不指定类的类型</span></span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  list.add(<span class="number">12</span>);</span><br><span class="line">  list.add(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定类的类型为String</span></span><br><span class="line">  <span class="built_in">List</span> list2 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  <span class="comment">// list2.add(12); //错误的写法</span></span><br><span class="line">  list2.add(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">  list2.add(<span class="string">&#x27;你好1&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(list2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定类的类型为int</span></span><br><span class="line">  <span class="built_in">List</span> list3 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  <span class="comment">// list3.add(&quot;你好&quot;); //错误写法</span></span><br><span class="line">  list3.add(<span class="number">12</span>);</span><br><span class="line">  <span class="built_in">print</span>(list3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：把下面类转换成泛型类，要求List里面可以增加int类型的数据，也可以增加String类型的数据。但是每次调用增加的类型要统一</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintClass</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  <span class="keyword">void</span> add(<span class="built_in">int</span> value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.add(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="keyword">this</span>.list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  PrintClass p = <span class="keyword">new</span> PrintClass();</span><br><span class="line">  p.add(<span class="number">1</span>);</span><br><span class="line">  p.add(<span class="number">12</span>);</span><br><span class="line">  p.add(<span class="number">5</span>);</span><br><span class="line">  p.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改泛型类后</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;T&gt;();</span><br><span class="line">  <span class="keyword">void</span> add(T value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.add(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="keyword">this</span>.list[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  PrintClass p = <span class="keyword">new</span> PrintClass();</span><br><span class="line">  p.add(<span class="number">11</span>);</span><br><span class="line">  p.add(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">  p.add(<span class="number">22</span>);</span><br><span class="line">  p.printInfo();</span><br><span class="line"></span><br><span class="line">  PrintClass p1 = <span class="keyword">new</span> PrintClass&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  p1.add(<span class="number">1</span>);</span><br><span class="line">  p1.add(<span class="number">2</span>);</span><br><span class="line">  p1.add(<span class="number">3</span>);</span><br><span class="line">  p1.printInfo();</span><br><span class="line"></span><br><span class="line">  PrintClass p2 = <span class="keyword">new</span> PrintClass&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  p2.add(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">  p2.add(<span class="string">&#x27;泛型&#x27;</span>);</span><br><span class="line">  p2.add(<span class="string">&#x27;类&#x27;</span>);</span><br><span class="line">  p2.printInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>官方示例：可将<code>ObjectCache</code>和<code>StringCache</code>通过泛型接口实现为<code>Cache</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectCache</span> </span>&#123;</span><br><span class="line">  getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, <span class="built_in">Object</span> value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCache</span> </span>&#123;</span><br><span class="line">  getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, <span class="built_in">String</span> value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现数据缓存的功能：有文件缓存、和内存缓存。内存缓存和文件缓存按照接口约束实现。</p><ol><li>定义一个泛型接口 约束实现它的子类必须有getByKey(key) 和 setByKey(key,value)</li><li>要求setByKey的时候的value的类型和实例化子类的时候指定的类型一致</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is FileCache key=<span class="subst">$&#123;key&#125;</span> value=<span class="subst">$&#123;value&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryCache</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  getByKey(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">throw</span> UnimplementedError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is MemoryCache key=<span class="subst">$&#123;key&#125;</span> value=<span class="subst">$&#123;value&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  MemoryCache m = <span class="keyword">new</span> MemoryCache&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  m.setByKey(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;首页数据&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  MemoryCache m1 = <span class="keyword">new</span> MemoryCache&lt;<span class="built_in">Map</span>&gt;();</span><br><span class="line">  m1.setByKey(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>前面介绍<code>Dart</code>基础知识的时候基本上都是在一个文件里面编写<code>Dart</code>代码的，但实际开发中不可能这么写，模块化很重要，所以这就需要使用到库的概念。</p><p>在<code>Dart</code>中，库的使用时通过<code>import</code>关键字引入的。</p><p><code>library</code>指令可以创建一个库，每个<code>Dart</code>文件都是一个库，即使没有使用<code>library</code>指令来指定。</p><p>Dart中的库主要有三种：</p><ul><li>我们自定义的库</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/xxx.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>系统内置库</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>Pub包管理系统中的库<br><code>https://pub.dev/packages</code><br><code>https://pub.flutter-io.cn/packages</code><br><code>https://pub.dartlang.org/flutter/</code><ul><li>需要在自己想项目根目录新建一个pubspec.yaml</li><li>在pubspec.yaml文件 然后配置名称 、描述、依赖等信息</li><li>然后运行 pub get 获取包下载到本地  </li><li>项目中引入库 import ‘package:http/http.dart’ as http; 看文档使用</li></ul></li></ul><h3 id="自定义库"><a href="#自定义库" class="headerlink" title="自定义库"></a>自定义库</h3><p><code>./index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/Animal.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> Animal(<span class="string">&#x27;小黑狗&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="built_in">print</span>(a.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/Animal.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _name; <span class="comment">//私有属性</span></span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Animal(<span class="keyword">this</span>._name, <span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$&#123;<span class="keyword">this</span>._name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _run() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是一个私有方法&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execRun() &#123;</span><br><span class="line">    <span class="keyword">this</span>._run(); <span class="comment">//类里面方法的相互调用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统内置库"><a href="#系统内置库" class="headerlink" title="系统内置库"></a>系统内置库</h3><h4 id="系统内置math库"><a href="#系统内置math库" class="headerlink" title="系统内置math库"></a>系统内置math库</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#x27;dart:io&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dart:math&quot;</span>;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(min(<span class="number">12</span>,<span class="number">23</span>));</span><br><span class="line">  <span class="built_in">print</span>(max(<span class="number">12</span>,<span class="number">25</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="系统内置io库"><a href="#系统内置io库" class="headerlink" title="系统内置io库"></a>系统内置io库</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:io&#x27;</span>;       <span class="comment">// 请求相关</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;  <span class="comment">// 转换编码格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//api接口： http://news-at.zhihu.com/api/3/stories/latest</span></span><br><span class="line">getDataFromZhihuAPI() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="comment">//1、创建HttpClient对象</span></span><br><span class="line">  <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();  </span><br><span class="line">  <span class="comment">//2、创建Uri对象</span></span><br><span class="line">  <span class="keyword">var</span> uri = <span class="keyword">new</span> <span class="built_in">Uri</span>.http(<span class="string">&#x27;news-at.zhihu.com&#x27;</span>,<span class="string">&#x27;/api/3/stories/latest&#x27;</span>);</span><br><span class="line">  <span class="comment">//3、发起请求，等待请求</span></span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">await</span> httpClient.getUrl(uri);</span><br><span class="line">  <span class="comment">//4、关闭请求，等待响应</span></span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> request.close();</span><br><span class="line">  <span class="comment">//5、解码响应的内容</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.transform(utf8.decoder).join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> getDataFromZhihuAPI();</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><p>这两个关键字的使用只需要记住两点：</p><ul><li>只有async方法才能使用await关键字调用方法</li><li>如果调用别的async方法必须使用await关键字</li></ul><blockquote><p>async是让方法变成异步。await是等待异步方法执行完成。</p></blockquote><p>原方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testAsync() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello async&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> result = testAsync();</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为异步</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testAsync() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello async&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> testAsync();</span><br><span class="line">  <span class="built_in">print</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入第三方模块"><a href="#引入第三方模块" class="headerlink" title="引入第三方模块"></a>引入第三方模块</h3><p>dart的三方库都是用pub包管理系统进行管理的。</p><p>1、<strong>从下面网址找到要用的库</strong></p><p>  <code>https://pub.dev/packages</code><br>  <code>https://pub.flutter-io.cn/packages</code><br>  <code>https://pub.dartlang.org/flutter/</code></p><p>2、<strong>创建一个pubspec.yaml文件，内容如下</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">new</span> <span class="string">flutter</span> <span class="string">module</span> <span class="string">project.</span></span><br><span class="line"><span class="attr">dependencies:</span>  </span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.12.0+2</span></span><br><span class="line">  <span class="attr">date_format:</span> <span class="string">^1.0.6</span></span><br></pre></td></tr></table></figure><p>3、<strong>配置dependencies</strong><br>4、<strong>运行pub get 获取远程库</strong><br>5、<strong>看文档引入库使用</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span> <span class="keyword">as</span> convert;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:date_format/date_format.dart&#x27;</span>;</span><br><span class="line">main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> url =</span><br><span class="line">      <span class="string">&quot;http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page=1&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Await the http get response, then decode the json-formatted responce.</span></span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(url);</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonResponse = convert.jsonDecode(response.body);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(jsonResponse);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Request failed with status: <span class="subst">$&#123;response.statusCode&#125;</span>.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(formatDate(<span class="built_in">DateTime</span>(<span class="number">1989</span>, <span class="number">2</span>, <span class="number">21</span>), [yyyy, <span class="string">&#x27;*&#x27;</span>, mm, <span class="string">&#x27;*&#x27;</span>, dd]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="库的重命名"><a href="#库的重命名" class="headerlink" title="库的重命名"></a>库的重命名</h3><p>冲突解决：当引入两个库中有相同名称标识符的时候，<br>如果是java通常我们通过写上完整的包名路径来指定使用的具体标识符，<br>甚至不用import都可以，但是Dart里面是必须import的。<br>当冲突的时候，可以使用as关键字来指定库的前缀。如下例子所示：</p><p><code>./index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/Person1.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib/Person2.dart&#x27;</span> <span class="keyword">as</span> lib2;</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person();           <span class="comment">// Uses Person from Person1.</span></span><br><span class="line">lib2.Person p2 = <span class="keyword">new</span> lib2.Person(); <span class="comment">// Uses Person from Person2.</span></span><br></pre></td></tr></table></figure><p><code>lib/Person1.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age; </span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);  </span><br><span class="line"></span><br><span class="line">  Person.setInfo(<span class="built_in">String</span> name,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Person1:<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/Person2.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age; </span><br><span class="line">  <span class="comment">//默认构造函数的简写</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age);  </span><br><span class="line"></span><br><span class="line">  Person.setInfo(<span class="built_in">String</span> name,<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printInfo()&#123;   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Person1:<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>----<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分导入"><a href="#部分导入" class="headerlink" title="部分导入"></a>部分导入</h3><p>如果只需要导入库的一部分，有两种模式：</p><ul><li><p>模式一：只导入需要的部分，使用show关键字，如下例子所示：<br><code>import &#39;package:lib1/lib1.dart&#39; show foo;</code></p></li><li><p>模式二：隐藏不需要的部分，使用hide关键字，如下例子所示：<br><code>import &#39;package:lib2/lib2.dart&#39; hide foo;</code></p></li></ul><h4 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h4><p><code>./index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/myMath.dart&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  getName();</span><br><span class="line">  getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/myMath.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getName()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getAge()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getSex()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="部分导入-1"><a href="#部分导入-1" class="headerlink" title="部分导入"></a>部分导入</h4><p><code>./index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/myMath.dart&#x27;</span> <span class="keyword">show</span> getName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/myMath.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getName()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getAge()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getSex()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐藏部分"><a href="#隐藏部分" class="headerlink" title="隐藏部分"></a>隐藏部分</h4><p><code>./index.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib/myMath.dart&#x27;</span> <span class="keyword">hide</span> getName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// getName(); // 报错</span></span><br><span class="line">  getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/myMath.dart</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> getName()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getAge()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> getSex()&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>也称为懒加载，可以在需要的时候再进行加载。<br>懒加载的最大好处是可以减少APP的启动时间。</p><p>懒加载使用deferred as关键字来指定，如下例子所示：</p><p><code>import &#39;package:deferred/hello.dart&#39; deferred as hello;</code></p><p>当需要使用的时候，需要使用loadLibrary()方法来加载：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:deferred/hello.dart&#x27;</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line">greet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary();</span><br><span class="line">  hello.printGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1S4411E7LY?from=search&amp;seid=18237173814777031437">B站-Dart Flutter教程_Dart Flutter入门实战视频教程-2020年新出-第14讲以后是Flutter教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/01/6iYQbt.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="dart" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/dart/"/>
    
    <category term="flutter" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/dart/flutter/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="flutter" scheme="https://www.gaotianyang.top/tags/flutter/"/>
    
    <category term="dart" scheme="https://www.gaotianyang.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>MV*模式</title>
    <link href="https://www.gaotianyang.top/archives/20210216de93538b/"/>
    <id>https://www.gaotianyang.top/archives/20210216de93538b/</id>
    <published>2021-02-16T01:47:20.000Z</published>
    <updated>2021-03-29T01:39:55.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/15/6BreZF.jpg" alt="首屏图"></p><a id="more"></a><h2 id="MV-模式"><a href="#MV-模式" class="headerlink" title="MV*模式"></a>MV*模式</h2><p>MV*模式主要解决的问题就是 View代码难以维护的问题。</p><p>MV*模式将View中的逻辑分离出去，形成一个弱逻辑的易于维护的视图。</p><p>MV<em>中的</em>是Model和View的桥梁，负责保持Model和View的同步。</p><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>Model，View，Controler，Controler负责视图逻辑，数据流向为 View -&gt; Controler，Controler -&gt; Model，Model -&gt; View，三种呈环形结构</p><p><img src="https://s3.ax1x.com/2021/03/15/6BDy59.png" alt="MVC"></p><h3 id="MVC缺陷"><a href="#MVC缺陷" class="headerlink" title="MVC缺陷"></a>MVC缺陷</h3><p><img src="https://s3.ax1x.com/2021/03/15/6BD4bD.png" alt="MVC缺陷"></p><h3 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h3><p>Model，View，Presenter，Presenter负责视图逻辑，数据流向为 View <-> Presentrer, Presenter <-> Model, Persenter成为View和Model的中介，不允许Model和View直接通信，MVP一定程度上解决了MVC的问题，但是Presenter将会非常复杂</p><p><img src="https://s3.ax1x.com/2021/03/15/6BDT5d.png" alt="MVP"></p><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>Model，View，ViewModel，ViewModel负责视图逻辑，数据流向 View <-> ViewModel, ViewModel <-> Model, 进化版的MVP模式，将Presenter改为ViewModel。<br>其中的Model为纯数据，不包括视图元素状态(显示/隐藏，高亮，禁用/启用等)。<br>而多数的MVVM框架，ViewModel包含Model，ViewModel是数据和业务逻辑的集合体，<br>View和ViewModel的同步是采用data-binding的形式。<br>实际上，形成如下演变模式， View <-> ViewModel，<br>说是VVM模式也许更贴切，目前这种方式被推崇为前端领域的最佳实践。</p><p><img src="https://s3.ax1x.com/2021/03/15/6BDjr8.png" alt="MVVM"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/mengff/p/5964902.html">MV*模式的个人理解</a></li><li><a href="https://www.jianshu.com/p/6250177941f2">深入了解MV*模式</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/15/6BreZF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端知识积累</title>
    <link href="https://www.gaotianyang.top/archives/2021021570ca98d5/"/>
    <id>https://www.gaotianyang.top/archives/2021021570ca98d5/</id>
    <published>2021-02-15T06:59:30.000Z</published>
    <updated>2021-03-29T01:39:55.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/03/15/6BwUgK.jpg" alt="首屏图"></p><a id="more"></a><h2 id="web前端面试题"><a href="#web前端面试题" class="headerlink" title="web前端面试题"></a>web前端面试题</h2><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><h4 id="原型链和继承"><a href="#原型链和继承" class="headerlink" title="原型链和继承"></a>原型链和继承</h4><p><img src="https://s3.ax1x.com/2021/03/06/6nomVK.png" alt="原型链"></p><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><p>js对象独有的<strong>proto</strong>属性，当访问一个对象的属性时，如果该对象内不存在这个属性，会去它的<strong>proto</strong>属性所指向的那个对象（父对象）里找，直到null</p><h5 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h5><p>对象都有私有属性<strong>proto</strong>（），从对象指向实例原型</p><h5 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h5><p>函数独有的属性，从一个函数指向一个对象，包含所有实例可共享的属性和方法，任何函数创建时，会默认创建该函数的prototype对象</p><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h5><p>实例的构造函数（constructor）属性，指向实例</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>所有函数和对象最终都是由Function构造函数得来，所以constructor属性的终点就是Function这个函数。</p><ol><li>prototype指向的原型对象又有一个属性constructor，这个属性也是一个指针，指回原构造函数，即这个方法。</li><li><strong>proto</strong>和constructor属性是对象所独有的，prototype属性是函数所独有的。</li><li>JS中函数也是一种对象，所以函数也拥有<strong>proto</strong>和constructor属性</li><li>为什么有prototype，如果没有，每次新建对象都会继承构造函数的所有属性，方法，浪费性能，用了prototype后，属性每个对象的值相同性不高，写在构造函数里，而方法通常是通用的，使用prototype可以让每个对象共享同一个方法，而不用每次都copy一个，而且能实时更新</li><li><a href="https://www.cnblogs.com/tylerdonet/p/9595436.html">JavaScript原型链和继承</a></li><li><a href="https://segmentfault.com/a/1190000000653327">为什么使用prototype</a></li></ol><h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><ul><li>基本数据类型：名字和值都存在栈中</li><li>引用数据类型：名字在栈中，值在堆中，栈内存会提供一个引用地址，指向堆内存中的值</li><li>浅拷贝：<ul><li>for只遍历第一层</li><li>assign</li><li><code>=</code>直接赋值</li></ul></li><li>深拷贝：<ul><li>递归遍历所有层级</li><li>利用JSON对象【JSON.stringfy() JSON.parse()】</li><li>通过jQuery的extend方法实现深拷贝</li><li>lodash函数库实现深拷贝</li><li>用slice实现对数组的深拷贝,slice() 方法可从已有的数组中返回选定的元素。</li><li>使用扩展运算符实现深拷贝</li><li>如对象的value是基本类型，可以用Object.assign来实现深拷贝，但是要把它赋值给一个空对象assign第一层是深拷贝，第二层以后是浅拷贝</li><li>Reflect法</li><li>用concat实现对数组的深拷贝</li><li>直接使用var newObj = Object.create(oldObj)，可以达到深拷贝的效果。</li><li>手动实现深拷贝</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON对象进行深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _obj = <span class="built_in">JSON</span>.stringify(obj),</span><br><span class="line">    objClone = <span class="built_in">JSON</span>.parse(_obj);</span><br><span class="line">  <span class="keyword">return</span> objClone;</span><br><span class="line">&#125; <span class="comment">// 无法实现对对象中 方法 的深拷贝，会显示为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery的extend方法进行深拷贝</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> newArray = $.extend(<span class="literal">true</span>,[],array); <span class="comment">// true为深拷贝，false为浅拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lodash方法进行深拷贝</span></span><br><span class="line"><span class="keyword">let</span> result = _.cloneDeep(test)</span><br></pre></td></tr></table></figure><h4 id="js中的堆和栈"><a href="#js中的堆和栈" class="headerlink" title="js中的堆和栈"></a>js中的堆和栈</h4><ul><li>栈（stack）：简单地数据段，存放在栈中，有固定大小的内存（自动分配），自动释放<ul><li>基本数据类型：number，string，boolean，undefined，null</li><li>栈存储了什么：变量名，基本数据类型值，地址</li><li>全局作用域，私有作用域，都属是栈内存，理论上，存储的越少，运行速度越快</li><li>先进后出</li><li>栈内存回收：作用域销毁（立即销毁，不销毁，不立即销毁）<ul><li>全局作用域销毁：一般情况不销毁，页面关闭，整个作用域销毁</li><li>私有作用域销毁 ：<ul><li>不销毁</li><li>销毁</li><li>不立即销毁</li></ul></li></ul></li></ul></li><li>堆（heap）：动态分配内存，大小不定也不会自动释放<ul><li>引用类型：栈中存放地址，指向堆中的对象，当我们要获取（函数，数组，对象等）的时候，先从栈中获取地址，然后从堆中获取数据</li><li>先进先出</li><li>堆存储了什么：引用数据类型的值</li><li>内存回收：GC垃圾回收机制<ul><li>chrome：标记法，每隔一段时间对所有的空间地址检测，如果没有被占用，立即回收</li><li>ie和火狐：计数法，空间地址被占用一次+1，空闲一次空间地址-1，如果为0 被回收</li></ul></li></ul></li></ul><p><a href="https://juejin.cn/post/6844903618999500808">10分钟了解JS堆、栈以及事件循环的概念</a></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul><li>闭包函数：声明在一个函数中的函数，叫做闭包函数。</li><li>闭包：内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</li><li>参数和变量不会被垃圾回收机制回收</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Shier&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a()</span><br><span class="line"><span class="built_in">console</span>.log(b())</span><br><span class="line"><span class="comment">// 通过返回函数中返回的内部变量，使函数外部能够使用和访问函数内部变量</span></span><br></pre></td></tr></table></figure><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><p>setTimeout有两个参数，第一个参数为一个函数，我们通过该函数定义将要执行的操作。第二个参数为一个时间毫秒数，表示延迟执行的时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;如果不清除我，我将会一秒之后出现。&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);  <span class="comment">// 清除之后，通过setTimeout定义的操作并不会执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上述结果返回总为6</span></span><br><span class="line"><span class="comment">// 循环被立即执行，定时器依次放入执行队列中，</span></span><br><span class="line"><span class="comment">// 并分别等待1、2、3、4、5s执行console，</span></span><br><span class="line"><span class="comment">// 在定时器输出的时候，i已经自增完毕，因此输出的均为6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123; </span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>( (<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 或者在这里使用闭包</span></span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;)(i), i*<span class="number">1000</span> );</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用闭包将值存住，输出为123456</span></span><br></pre></td></tr></table></figure><p>console的返回值中，会有两行，一行是一个唯一的id，其他的是输出的内容<br>每个setTimeout在执行时，会返回一个唯一ID。在使用时，常常会使用一个变量将这个唯一ID保存起来，用以传入clearTimeout，清除定时器。</p><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><ul><li>DOM事件流：事件捕获，目标阶段，事件冒泡<br>addEventListener（‘click’，function(event){触发事件}, false）默认在事件冒泡阶段触发，默认值false</li><li>事件委托：<br>事件委托利用了事件冒泡和event.target，当有一系列子元素都需要绑定事件时，只需要将事件绑定在父元素即可<ul><li>event.currentTarget:事件绑定的元素（绑定在父级元素）</li><li>event.target:触发事件的源头（所点击的子元素）</li><li>target：事件目标</li></ul></li></ul><h4 id="this指向，call-apply-bind，回调函数"><a href="#this指向，call-apply-bind，回调函数" class="headerlink" title="this指向，call/apply/bind，回调函数"></a>this指向，call/apply/bind，回调函数</h4><ol><li>一般函数,this指向全局对象window;</li><li>在严格模式下”use strict”,为undefined.</li><li>对象的方法里调用,this指向调用该方法的对象. 【this指的是，调用函数的那个对象】</li><li>构造函数里的this,指向创建出来的实例.</li></ol><ul><li>call，apply，bind，改变函数运行时的指向，当第一个参数为null或undefind时，指向window<ul><li>call：传入参数列表，改变函数指向并立即调用，第一个参数同apply，第二个参数必须是单个参数列表，不能是数组</li><li>apply：可以传入数组，第一个参数：要绑定给this的值 第二个参数：参数列表（可以是数组）</li><li>bind：改变this指向后，返回的是函数</li></ul></li></ul><p>例子1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Dot&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dot = printName.bind(obj)</span><br><span class="line"><span class="built_in">console</span>.log(dot) <span class="comment">// function () &#123; … &#125;</span></span><br><span class="line">dot()  <span class="comment">// Dot</span></span><br><span class="line"><span class="comment">//bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。</span></span><br><span class="line"><span class="comment">//而原函数 printName 中的 this 并没有被改变，依旧指向全局对象 window。</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">2</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.fn()   <span class="comment">//2    </span></span><br><span class="line"><span class="comment">//此时的this是指obj1这个对象，obj1.fn()</span></span><br><span class="line"><span class="comment">//实际上是obj1.fn.call(obj1)，事实上谁调用这个函数，this就是谁</span></span><br></pre></td></tr></table></figure><p>例子3：点击页面，依次输出：document和window对象<br>解析：点击页面监听click事件属于方法调用，this指向事件源DOM对象，即obj.fn.apply(obj)，setTimeout内的函数属于回调函数，可以这么理解f1.call(null,f2)，所以this指向window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="数组的常用操作"><a href="#数组的常用操作" class="headerlink" title="数组的常用操作"></a>数组的常用操作</h4><ul><li>concat()<ul><li>拼接数组：连接两个或更多的数组，并返回结果。</li></ul></li><li>join()<ul><li>按字符拼接字符串：把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</li></ul></li><li>splice()<ul><li>替换元素：删除元素，并向数组添加新元素。</li></ul></li><li>slice()<ul><li>截取数组：从某个已有的数组返回选定的元素</li></ul></li><li>pop()<ul><li>删除最后一个：删除并返回数组的最后一个元素(改变原数组)</li></ul></li><li>push()<ul><li>拼接元素：向数组的末尾添加一个或更多元素，并返回新的长度。</li></ul></li><li>shift()<ul><li>删除第一个：删除并返回数组的第一个元素</li></ul></li><li>unshift()<ul><li>压入元素：向数组的开头添加一个或更多元素，并返回新的长度。</li></ul></li><li>reverse()<ul><li>数组翻转：颠倒数组中元素的顺序。</li></ul></li><li>sort()<ul><li>数组排序：对数组的元素进行排序</li></ul></li><li>toString()<ul><li>数组转换字符串：把数组转换为字符串，并返回结果。</li></ul></li><li>valueOf()<ul><li>返回数组对象的原始值。</li></ul></li><li>toSource()<ul><li>返回该对象的源代码。</li></ul></li><li>toLocaleString()<ul><li>根据本地时间把Date对象转换为字符串。</li></ul></li></ul><h4 id="set和weakset，map和weakmap"><a href="#set和weakset，map和weakmap" class="headerlink" title="set和weakset，map和weakmap"></a>set和weakset，map和weakmap</h4><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><h4 id="typeof原理"><a href="#typeof原理" class="headerlink" title="typeof原理"></a>typeof原理</h4><h4 id="0-1-0-2-0-3吗，为什么"><a href="#0-1-0-2-0-3吗，为什么" class="headerlink" title="0.1+0.2 === 0.3吗，为什么"></a>0.1+0.2 === 0.3吗，为什么</h4><h4 id="前端安全-xss-和-csrf"><a href="#前端安全-xss-和-csrf" class="headerlink" title="前端安全 xss 和 csrf"></a>前端安全 xss 和 csrf</h4><h4 id="说明BFC及其使用"><a href="#说明BFC及其使用" class="headerlink" title="说明BFC及其使用"></a>说明BFC及其使用</h4><h4 id="js基本数据类型"><a href="#js基本数据类型" class="headerlink" title="js基本数据类型"></a>js基本数据类型</h4><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h4 id="Js数组都有哪些方法及其作用、用法、返回值？详细说了一下splice"><a href="#Js数组都有哪些方法及其作用、用法、返回值？详细说了一下splice" class="headerlink" title="Js数组都有哪些方法及其作用、用法、返回值？详细说了一下splice()"></a>Js数组都有哪些方法及其作用、用法、返回值？详细说了一下splice()</h4><h4 id="Js数组去重"><a href="#Js数组去重" class="headerlink" title="Js数组去重"></a>Js数组去重</h4><h4 id="说明冒泡排序、插入排序实现的思想、步骤、每趟的结果等"><a href="#说明冒泡排序、插入排序实现的思想、步骤、每趟的结果等" class="headerlink" title="说明冒泡排序、插入排序实现的思想、步骤、每趟的结果等"></a>说明冒泡排序、插入排序实现的思想、步骤、每趟的结果等</h4><h4 id="什么是二分查找"><a href="#什么是二分查找" class="headerlink" title="什么是二分查找"></a>什么是二分查找</h4><h4 id="HTTP协议相关"><a href="#HTTP协议相关" class="headerlink" title="HTTP协议相关"></a>HTTP协议相关</h4><h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><h5 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h5><h5 id="状态码（5大类）"><a href="#状态码（5大类）" class="headerlink" title="状态码（5大类）"></a>状态码（5大类）</h5><h5 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h5><h5 id="一次http完整的过程"><a href="#一次http完整的过程" class="headerlink" title="一次http完整的过程"></a>一次http完整的过程</h5><h5 id="详细说一下Accept-Encoding的作用，和性能有关系？"><a href="#详细说一下Accept-Encoding的作用，和性能有关系？" class="headerlink" title="详细说一下Accept - Encoding的作用，和性能有关系？"></a>详细说一下Accept - Encoding的作用，和性能有关系？</h5><h5 id="http有哪些请求方式？"><a href="#http有哪些请求方式？" class="headerlink" title="http有哪些请求方式？"></a>http有哪些请求方式？</h5><h5 id="Get和post的区别？"><a href="#Get和post的区别？" class="headerlink" title="Get和post的区别？"></a>Get和post的区别？</h5><h4 id="Ajax相关"><a href="#Ajax相关" class="headerlink" title="Ajax相关"></a>Ajax相关</h4><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><h5 id="用jQuery实现一个ajax"><a href="#用jQuery实现一个ajax" class="headerlink" title="用jQuery实现一个ajax"></a>用jQuery实现一个ajax</h5><h5 id="有没有看过jQuery内部是如何实现的？"><a href="#有没有看过jQuery内部是如何实现的？" class="headerlink" title="有没有看过jQuery内部是如何实现的？"></a>有没有看过jQuery内部是如何实现的？</h5><h5 id="说说链式调用"><a href="#说说链式调用" class="headerlink" title="说说链式调用"></a>说说链式调用</h5><h4 id="Application相关"><a href="#Application相关" class="headerlink" title="Application相关"></a>Application相关</h4><h5 id="什么是Cookie和Session？"><a href="#什么是Cookie和Session？" class="headerlink" title="什么是Cookie和Session？"></a>什么是Cookie和Session？</h5><h5 id="Cookie和Session他们的区别？"><a href="#Cookie和Session他们的区别？" class="headerlink" title="Cookie和Session他们的区别？"></a>Cookie和Session他们的区别？</h5><h5 id="Js实现cookie和session两者有联系吗？"><a href="#Js实现cookie和session两者有联系吗？" class="headerlink" title="Js实现cookie和session两者有联系吗？"></a>Js实现cookie和session两者有联系吗？</h5><h5 id="localStorage、sessionStorage、cookie是什么？"><a href="#localStorage、sessionStorage、cookie是什么？" class="headerlink" title="localStorage、sessionStorage、cookie是什么？"></a>localStorage、sessionStorage、cookie是什么？</h5><h4 id="垂直居中布局-4中"><a href="#垂直居中布局-4中" class="headerlink" title="垂直居中布局 4中"></a>垂直居中布局 4中</h4><h4 id="浮动引起的问题，如何清除浮动【4种"><a href="#浮动引起的问题，如何清除浮动【4种" class="headerlink" title="浮动引起的问题，如何清除浮动【4种"></a>浮动引起的问题，如何清除浮动【4种</h4><h4 id="postion和z-index的关系？"><a href="#postion和z-index的关系？" class="headerlink" title="postion和z-index的关系？"></a>postion和z-index的关系？</h4><h4 id="DOM操作：获取、增、删、查、改等操作"><a href="#DOM操作：获取、增、删、查、改等操作" class="headerlink" title="DOM操作：获取、增、删、查、改等操作"></a>DOM操作：获取、增、删、查、改等操作</h4><h4 id="JS交换两个节点如何实现？"><a href="#JS交换两个节点如何实现？" class="headerlink" title="JS交换两个节点如何实现？"></a>JS交换两个节点如何实现？</h4><h4 id="tcp三次握手四次挥手"><a href="#tcp三次握手四次挥手" class="headerlink" title="tcp三次握手四次挥手"></a>tcp三次握手四次挥手</h4><h4 id="ES6有哪些新特性"><a href="#ES6有哪些新特性" class="headerlink" title="ES6有哪些新特性"></a>ES6有哪些新特性</h4><ul><li>let，const</li><li>箭头函数</li><li>解构赋值</li><li>set、weakSet、map、weakMap</li><li>proxy</li><li>generator</li><li>reflect</li><li>async、await</li><li>class</li><li>promise</li></ul><h4 id="如何设置一个元素不可见-4中"><a href="#如何设置一个元素不可见-4中" class="headerlink" title="如何设置一个元素不可见 4中"></a>如何设置一个元素不可见 4中</h4><h4 id="什么是跨域问题，有哪些跨域方式"><a href="#什么是跨域问题，有哪些跨域方式" class="headerlink" title="什么是跨域问题，有哪些跨域方式"></a>什么是跨域问题，有哪些跨域方式</h4><h4 id="JS-异步解决方案的发展历程以及优缺点"><a href="#JS-异步解决方案的发展历程以及优缺点" class="headerlink" title="JS 异步解决方案的发展历程以及优缺点"></a>JS 异步解决方案的发展历程以及优缺点</h4><h4 id="行内元素和块元素区别，image-标签属于哪种"><a href="#行内元素和块元素区别，image-标签属于哪种" class="headerlink" title="行内元素和块元素区别，image 标签属于哪种"></a>行内元素和块元素区别，image 标签属于哪种</h4><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><h4 id="reduce-求和"><a href="#reduce-求和" class="headerlink" title="reduce 求和"></a>reduce 求和</h4><h4 id="普通函数和构造函数"><a href="#普通函数和构造函数" class="headerlink" title="普通函数和构造函数"></a>普通函数和构造函数</h4><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h4><p>性能更高，因为他就是一个函数<br>由于是无状态组件，所以，无论props会否变更，都会重新刷新这个组件</p><p><a href="https://segmentfault.com/a/1190000016774551">简述React中无状态组件和有状态组件的区别</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> head = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#123;props.name&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mmutable-js"><a href="#mmutable-js" class="headerlink" title="mmutable.js"></a>mmutable.js</h4><p><a href="https://www.jianshu.com/p/825b7b4c401d">为什么 react要使用immutable.js</a></p><h4 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h4><p>可查看<a href="/archives/202103112a3f29d/">React生命周期函数</a></p><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><p><a href="https://segmentfault.com/a/1190000019834626">更快助你弄懂React-高阶组件</a><br><a href="https://www.jianshu.com/p/0aae7d4d9bc1">深入理解 React 高阶组件</a></p><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><p>在this.setState({})之后打印信息，会出现延迟，想要同步需要在this.setState({},()=&gt;{回调函数})，在回调函数中打印数据，可以同步</p><h4 id="pureCompoent-和-compoent"><a href="#pureCompoent-和-compoent" class="headerlink" title="pureCompoent 和 compoent"></a>pureCompoent 和 compoent</h4><p><a href="https://www.jianshu.com/p/c41bbbc20e65">React 的 PureComponent Vs Component</a></p><h4 id="hook和class对比"><a href="#hook和class对比" class="headerlink" title="hook和class对比"></a>hook和class对比</h4><p><a href="https://www.jianshu.com/p/b666ac2407b0">React Hook 与Class的一些对比</a></p><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html">Redux 入门教程（一）：基本用法</a></p><h5 id="什么是redux？"><a href="#什么是redux？" class="headerlink" title="什么是redux？"></a>什么是redux？</h5><p>redux的基本思想是整个应用的state保持在一个单一的store中。<br>store就是一个简单的JavaScript对象，而改变应用的state的唯一方式就是在应用用触发action，<br>然后为这些action编写reducers来修改state。<br>整个state的转化都是在reducers中完成的，并且不会有任何副作用</p><ol><li>store通过reducer创建了初始状态；</li><li>view通过store.getState()将store中保存的state挂载在了自己的状态上；</li><li>用户产生了操作，调用了actions 的方法；</li><li>actions的方法被调用，创建了带有标示性信息的action；</li><li>actions将action通过调用store.dispatch方法发送到了reducer中；</li><li>reducer接收到action并根据标识信息判断之后返回了新的state；</li><li>store的state被reducer更改为新state的时候，store.subscribe方法里的回调函数会执行，此时就可以通知view去重新获取state；</li></ol><h5 id="在redux中，什么是store？"><a href="#在redux中，什么是store？" class="headerlink" title="在redux中，什么是store？"></a>在redux中，什么是store？</h5><ul><li>store是一个JavaScript对象，它保存了整个应用的state，于此同时，store也承担了以下的职责：<ol><li>允许通过getState（）访问state</li><li>通过dispatch（action）改变state</li><li>通过subscribe（listener）注册listeners</li><li>通过subscribe（listener）返回函数处理listener的注册</li></ol></li></ul><h5 id="在redux中，什么是action？"><a href="#在redux中，什么是action？" class="headerlink" title="在redux中，什么是action？"></a>在redux中，什么是action？</h5><p>action是一个纯JavaScript对象，他们必须有一个type属性表明正在执行action的类型。<br>实质上action是将数据从应用程序发送到store的有效载荷</p><h5 id="在redux中，什么是reducer？"><a href="#在redux中，什么是reducer？" class="headerlink" title="在redux中，什么是reducer？"></a>在redux中，什么是reducer？</h5><p>一个reducer是一个纯函数，该函数以先前的state和一个action作为参数，并返回下一个state</p><h4 id="什么是纯函数"><a href="#什么是纯函数" class="headerlink" title="什么是纯函数"></a>什么是纯函数</h4><p>一个纯函数是一个不依懒于且不改变其作用域之外的变量状态的函数，<br>这也意味着一个纯函数对于同样的参数总是返回同样的结果</p><h4 id="Vue和React的差别"><a href="#Vue和React的差别" class="headerlink" title="Vue和React的差别"></a>Vue和React的差别</h4><ol><li>react是严格上针对mvc的view层，vue则是mvvm模式</li><li>操作dom的方式不同，vue是通过指令操作dom，而react通过js 进行操作</li><li>数据绑定不同，vue实现的是双向绑定，而react是单向数据流</li><li>react的state内容不可以直接修改，需要通过setState去修改，vue的state不是必须的，数据主要有data属性在vue对象中管理的</li><li>React是通过JSX渲染模板。而Vue是通过一种拓展的HTML语法进行渲染；</li><li>Vue本质是MVVM框架，由MVC发展而来；React是前端组件化框架，由后端组件化发展而来；</li></ol><h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><h4 id="npm和npx"><a href="#npm和npx" class="headerlink" title="npm和npx"></a>npm和npx</h4><p><a href="https://www.nowcoder.com/ta/front-end">https://www.nowcoder.com/ta/front-end</a></p><h4 id="重绘和重排"><a href="#重绘和重排" class="headerlink" title="重绘和重排"></a>重绘和重排</h4><p><a href="https://www.cnblogs.com/soyxiaobi/p/9963019.html">https://www.cnblogs.com/soyxiaobi/p/9963019.html</a></p><h4 id="dirname-路径名-filename-文件名"><a href="#dirname-路径名-filename-文件名" class="headerlink" title="__dirname 路径名 __filename 文件名"></a><code>__dirname</code> 路径名 <code>__filename</code> 文件名</h4><p>如果没有传入 path 片段，则 path.resolve() 会返回当前工作目录的绝对路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"><span class="comment">// 打印: /Users/mjr/example.js</span></span><br><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="comment">// 打印: /Users/mjr### 其他</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/weixin_42003850/article/details/108651427">2021前端必问面试题及答案</a></li><li><a href="https://blog.csdn.net/xieanna123/article/details/105545758">2021前端面试经常被问到的题(附答案)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/15/6BwUgK.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>递归基础知识</title>
    <link href="https://www.gaotianyang.top/archives/202102129ea2dc77/"/>
    <id>https://www.gaotianyang.top/archives/202102129ea2dc77/</id>
    <published>2021-02-12T10:06:54.000Z</published>
    <updated>2021-03-13T06:12:04.877Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/02/22/y7Le4x.jpg" alt="首屏图"></p><a id="more"></a><h2 id="递归基础知识"><a href="#递归基础知识" class="headerlink" title="递归基础知识"></a>递归基础知识</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>在JavaScript程序中，函数直接或间接调用自己。通过某个条件判断跳出结构，有了跳出才有结果。</p><p><img src="https://s3.ax1x.com/2021/03/12/6UUi2d.png" alt="递归"></p><h3 id="递归的步骤-技巧"><a href="#递归的步骤-技巧" class="headerlink" title="递归的步骤(技巧)"></a>递归的步骤(技巧)</h3><ol><li>假设递归函数已经写好</li><li>寻找递推关系</li><li>将递推关系的结构转换为递归体</li><li>将临界条件加入到递归体中（一定要加临界条件，某则陷入死循环，内存泄漏）</li></ol><h2 id="简单递归示例"><a href="#简单递归示例" class="headerlink" title="简单递归示例"></a>简单递归示例</h2><p>通过简单的示例先来了解熟悉一下递归，看看如何使用递归？</p><h3 id="求1-100的和"><a href="#求1-100的和" class="headerlink" title="求1-100的和"></a>求1-100的和</h3><p>假设让你来，你是否会这样写？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure><p>JavaScript用递归如何计算求1-100的和了？</p><blockquote><p>分析:</p></blockquote><p>1.假设递归函数已经写好，既sum(100)，就是求1-100的和。寻找递推关系: 就是 n 与 n-1 ,或 n-2 之间的关系：</p><blockquote><p>sum(n) == sum(n-1) + n</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resulst = sum(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> resulst = sum(<span class="number">99</span>) + <span class="number">100</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>2.这时候我们差一个重要的步骤，也就是临界值，来阻止程序死循环</p><p>将临界条件加入到递归中<br>求100 转换为 求99<br>求99 转换为 求98<br>求98 转换为 求97<br>…<br>求2 转换为 求1<br>求1 转换为 求1<br>即 sum(1) = 1</p><p>3.递归函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum(n<span class="number">-1</span>) + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> amount = sum(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(amount); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure><h3 id="求-2-4-6-8-10…-第n项与前n项之和"><a href="#求-2-4-6-8-10…-第n项与前n项之和" class="headerlink" title="求 2,4,6,8,10… 第n项与前n项之和"></a>求 2,4,6,8,10… 第n项与前n项之和</h3><blockquote><p>分析</p></blockquote><p>假设已知函数 fn(n)为第n项,sum(n)为前n项之和</p><p>递归关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn(n) = fn(n<span class="number">-1</span>) + <span class="number">2</span></span><br><span class="line">sum(n) = fn(n) + sum(n<span class="number">-1</span>)</span><br><span class="line">递归体</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(n) = (n<span class="number">-1</span>) + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(n) = fn(n) + sum(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们同样差一个重要的步骤，也就是临界值，来阻止程序死循环</p><p>1、临界条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">0</span>) = <span class="number">2</span></span><br><span class="line">sum(<span class="number">0</span>) = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>2、递归函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> fn(n<span class="number">-1</span>) + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> fn(n) + sum(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> amount = sum(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(amount); <span class="comment">// 10302</span></span><br></pre></td></tr></table></figure><h2 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h2><p>实际项目中用到递归的有哪些地方？</p><p><img src="https://s3.ax1x.com/2021/03/12/6UUErt.jpg" alt="树形结构"></p><h3 id="遍历树形结构的数据"><a href="#遍历树形结构的数据" class="headerlink" title="遍历树形结构的数据"></a>遍历树形结构的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">  name: <span class="string">&#x27;第一代&#x27;</span>,</span><br><span class="line">  child: [&#123;</span><br><span class="line">    name: <span class="string">&#x27;第二代&#x27;</span>,</span><br><span class="line">    child: [&#123;</span><br><span class="line">      name: <span class="string">&#x27;第三代&#x27;</span>,</span><br><span class="line">      child: [&#123;</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name: <span class="string">&#x27;第三代&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    name: <span class="string">&#x27;第二代&#x27;</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    name: <span class="string">&#x27;第二代&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这样的数据结构，你就需要一个递归函数来解决问题了，因为你不知道有多少个child，有多少层级在里面，可能是100，也可能是1亿，所以就递归直到没有child后来终止程序。</p><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p>根据上一个接口返回数据条数n，调用n次，虽然很不科学，但是小编实际遇到过这样的需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(...).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// data是数组</span></span><br><span class="line">  <span class="keyword">let</span> fun = <span class="function">(<span class="params">index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> params = data[index];</span><br><span class="line">    $.ajax(...params).then(...)</span><br><span class="line">    <span class="comment">// 如果index小于data.length就继续执行fun函数</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;data.length) fun(index+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 这时候index&lt;data.length就是临界值，来阻止程序死循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  data &amp;&amp; data.length &amp;&amp; fun(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>递归在很多语言中都很常见，它能解决很多你不知道深度</p><p>同时本文重申三遍的问题，大家一定要记住。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/weixin_32549035/article/details/112729055">树形结构递归_JavaScript中如何使用递归？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/y7Le4x.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Yilia主题如何添加左侧SubNav图标</title>
    <link href="https://www.gaotianyang.top/archives/20210205e928c2fc/"/>
    <id>https://www.gaotianyang.top/archives/20210205e928c2fc/</id>
    <published>2021-02-05T09:51:50.000Z</published>
    <updated>2021-03-02T13:16:32.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/02/08/yU8KoT.jpg" alt="首屏图"></p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>博客左下角的SubNav发现和我的诉求不太一致，希望扩展一下更多的图标库。</p><p><img src="https://s3.ax1x.com/2021/02/08/yU8y6A.png" alt="原有SubNav"></p><p>比如这些：</p><p><img src="https://s3.ax1x.com/2021/02/08/yU8T6s.png" alt="现有SubNav"></p><p>那么我是如何将图标库添加的呢？</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>首先，我们看到<code>./themes/yilia/source/fonts</code>中有四个格式不同但是命名相同的字体文件。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUGPn1.png" alt="iconfont编辑后文件"></p><p>我们的目的就是把我们需要的图标加进去，之后重新生成这四个文件。<br>但是，不能直接更改这四个文件，因为这四个文件是编译Yilia时自动生成的，每次重新编译Yilia之后都会被替换掉。<br>我们修改一个程序肯定不会直接对着程序本体修改，而是取得他的源代码然后更改源代码。那么，在Yilia源代码中：</p><p>真正需要修改的是<code>./themes/yilia/source-src/css/fonts</code>文件夹里面的四个字体文件。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUGIUK.png" alt="iconfont源文件"></p><p>生成字体文件的方法有好几种,分别是：</p><ol><li>使用在线icon-font生成器+自制CSS</li><li>矢量图形编辑软件（Adobe Illustrator）+Glyphs/Glyphs Mini/FontLab + FontSquirrel WebFont Generator+ 自制CSS文件</li><li>上一条中出现的软件的开源版，InkScape + FontForge + FontSquirrel WebFont Generator</li><li>矢量图形编辑软件（Adobe Illustrator）+FontCustom命令行</li></ol><p>生成字体文件的详细内容可以参考这篇<a href="https://www.jianshu.com/p/095eb298ed18">文章</a></p><p>今天我选择直接使用百度的<a href="https://www.gaotianyang.top/fonteditor/">字体编辑器</a>，<br>后面我会很简单的讲一下如何使用如果我没讲明白，你可以看一下<a href="https://ecomfe.github.io/blog/use-fonteditor-to-build-webfont/">百度字体编辑器教程</a>。</p><h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><p><img src="https://s3.ax1x.com/2021/02/08/yUYneI.jpg" alt="百度字体编辑器教程步骤"></p><h3 id="下载新图标"><a href="#下载新图标" class="headerlink" title="下载新图标"></a>下载新图标</h3><h4 id="下载Font-Awesome最新图标"><a href="#下载Font-Awesome最新图标" class="headerlink" title="下载Font Awesome最新图标"></a>下载Font Awesome最新图标</h4><p>去<a href="https://fontawesome.com/how-to-use/on-the-web/setup/hosting-font-awesome-yourself">Font Awesome</a>下载最新版的图标。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUYNmn.png" alt="下载免费版"></p><h4 id="下载iconfont图标"><a href="#下载iconfont图标" class="headerlink" title="下载iconfont图标"></a>下载iconfont图标</h4><p>打开<a href="https://www.iconfont.cn/home/index">iconfont</a></p><p>将喜欢的图标添加至自己的项目，然后导出项目。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUtS1g.png" alt="下载iconfont图标"></p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>导入两个项目，一个项目是主题的旧字体，一个是从网上下载的待添加字体。</p><ol><li>打开.woff文件</li><li>保存项目</li></ol><p>按照图中的步骤一，步骤二操作，每次切换项目都要点击“保存项目”。</p><h3 id="在项目间迁移图标"><a href="#在项目间迁移图标" class="headerlink" title="在项目间迁移图标"></a>在项目间迁移图标</h3><p>通过“复制”、“粘贴”功能将喜欢的图标添加到旧字体，添加完所有的图标后，<br>最好截一张图，这样后面修改的时候会方便很多，最后下载zip格式并解压。</p><p>下面这张图是我添加的图标</p><p><img src="https://s3.ax1x.com/2021/02/08/yUYrpF.png" alt="复制图标"></p><h3 id="导出项目"><a href="#导出项目" class="headerlink" title="导出项目"></a>导出项目</h3><p>将迁移好的新项目下载至本地。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUaxVs.png" alt="下载新图标项目"></p><h3 id="图标重命名"><a href="#图标重命名" class="headerlink" title="图标重命名"></a>图标重命名</h3><p>有些时候，不同的图标在复制粘贴过程中，会出现名称或unicode码重复的情况，此时需要修改字形信息。</p><p>选中问题字形，点击字形信息，修改并保存。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUts4f.png" alt="重命名图标"></p><h2 id="修改CSS"><a href="#修改CSS" class="headerlink" title="修改CSS"></a>修改CSS</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>如果你之前没有修改过Yilia，请先使用以下命令安装依赖。</p><p>进入主题根目录<code>./themes/yilia</code>，安装依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/yilia</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>修改<code>./themes/yilia/source-src/css</code>中的<code>fonts.scss</code>和<code>social.scss</code>，可以修改自己喜欢的图标和颜色。content中的内容要和上面截图中的unicode码一致。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUa7PP.png" alt="修改scss文件"><br><img src="https://s3.ax1x.com/2021/02/08/yUa6C6.png" alt="unicode码对照"></p><p>然后，将新生成的字体文件拷贝到<code>./themes/yilia/source-src/css/fonts</code>。<br>切换目录至<code>./themes/yilia</code>，运行<code>npm run dev</code>。<br>此时会用webpack打包，把文件编译到source文件里，但文件不会经过压缩。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>最终定稿后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run dist</span><br></pre></td></tr></table></figure><p>获得最终确定版本，此时的编译会经过压缩。</p><h2 id="重新生成网站"><a href="#重新生成网站" class="headerlink" title="重新生成网站"></a>重新生成网站</h2><p>配置主题的<code>./themes/yilia/_config.yml</code>文件。</p><p><img src="https://s3.ax1x.com/2021/02/08/yUdeaR.png" alt="修改config"></p><p>执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>FontEditor无法正常上传woff文件，显示<code>e.inflate is not a function</code>错误</p><p>可以打开<a href="https://kekee000.github.io/fonteditor/index.html">kekee000部署版本正常上传</a></p><p><a href="/archives/20200717e10c0cde/#SubNav图标拓展">返回yilia主题进阶设置</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.zscself.com/posts/70677220/">修改Yilia左下角SubNav的社交图标</a></li><li><a href="https://fontawesome.com/how-to-use/on-the-web/setup/hosting-font-awesome-yourself">fontawesome下载页</a></li><li><a href="https://ecomfe.github.io/blog/use-fonteditor-to-build-webfont/">使用FontEditor创建web字体图标</a></li><li><a href="https://github.com/ecomfe/fonteditor/issues/33">FontEditor线上版本出问题了</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/08/yU8KoT.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="hexo" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/hexo/"/>
    
    <category term="yilia" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/hexo/yilia/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="hexo" scheme="https://www.gaotianyang.top/tags/hexo/"/>
    
    <category term="yilia" scheme="https://www.gaotianyang.top/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>icestark的最佳实践</title>
    <link href="https://www.gaotianyang.top/archives/202101115b56e29a/"/>
    <id>https://www.gaotianyang.top/archives/202101115b56e29a/</id>
    <published>2021-01-11T09:44:43.000Z</published>
    <updated>2021-03-02T13:16:32.311Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/12/sG4eTP.jpg" alt="首屏图"></p><a id="more"></a><p>本文演示如何快速创建微前端的应用及改造已有应用接入微前端，基座创建使用的是 icejs，微应用是使用的 icejs、create-react-app分别创建。</p><blockquote><p><a href="https://github.com/mitudegaoyang/icestark-demo">项目demo仓库地址</a><br><a href="https://www.gaotianyang.top/icestark-demo">项目demo预览地址</a></p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>创建项目，并拉取到本地。在根目录分别创建package.json、和packages文件夹。</p><p>初始化package.json将项目对应名称填写完整</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;icestark-demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;workspaces&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;packages/icestark-layout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-icejs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-react&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-vue&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入项目目录<code>packages</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd packages/</span><br></pre></td></tr></table></figure><h2 id="初始化主应用"><a href="#初始化主应用" class="headerlink" title="初始化主应用"></a>初始化主应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基于 React 的主应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init ice icestark-layout @icedesign/stark-layout-scaffold</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者基于 Vue 的主应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init ice icestark-layout @vue-materials/icestark-layout-app</span></span><br></pre></td></tr></table></figure><blockquote><p>注意需要将主应用中<code>package.json</code>的name改为<code>icestark-layout</code></p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>回到根目录执行yarn命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预览主应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspaces icestark-layout start</span></span><br></pre></td></tr></table></figure><p>即可通过浏览器预览整个应用：</p><p><img src="https://s3.ax1x.com/2021/01/28/ypQBDK.gif" alt="主应用预览"></p><p>打开主应用 <code>src/app.tsx</code> 即可看到默认注册的几个微应用。</p><p><img src="https://s3.ax1x.com/2021/01/28/yp1rfH.png" alt="默认注册微应用"></p><h2 id="初始化微应用"><a href="#初始化微应用" class="headerlink" title="初始化微应用"></a>初始化微应用</h2><h3 id="基于icejs初始化微应用"><a href="#基于icejs初始化微应用" class="headerlink" title="基于icejs初始化微应用"></a>基于icejs初始化微应用</h3><p>进入项目目录<code>packages</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基于 React 的微应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init ice icestark-child-icejs @icedesign/stark-child-scaffold</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基于 Vue 的微应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm init ice icestark-child-icejs @vue-materials/icestark-child-app</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到根目录安装icejs微应用依赖 ./icestark-demo/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预览微应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspaces icestark-child-icejs start</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这里也需要将微应用中<code>package.json</code>的name改为<code>icestark-child-icejs</code></p></blockquote><p>可以在主应用的 <code>src/app.tsx</code> 中增加对应的微应用配置。</p><p>如果不需要改造现有项目，可直接跳过基于create-react-app改造微应用和基于vue cli改造微应用。<br>直接查看<a href="/archives/202101115b56e29a/#微应用本地调试">微应用本地调试</a>。</p><h3 id="基于create-react-app改造微应用"><a href="#基于create-react-app改造微应用" class="headerlink" title="基于create-react-app改造微应用"></a>基于create-react-app改造微应用</h3><h4 id="create-react-app创建react应用"><a href="#create-react-app创建react应用" class="headerlink" title="create-react-app创建react应用"></a>create-react-app创建react应用</h4><p>进入项目目录<code>packages</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用npm初始化app</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm create-react-app icestark-child-react --template typescript</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># 或者使用yarn初始化</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn create react-app icestark-child-react --template typescript</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在icestark-child-react引入ice/stark-app</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./icestark-demo/icestark-child-react/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add @ice/stark-app</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回到根目录安装react微应用依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./icestark-demo/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预览微应用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspaces icestark-child-react start</span></span><br></pre></td></tr></table></figure><blockquote><p>更改微应用name为<code>icestark-child-react</code></p></blockquote><p>此时会出现缺少babel-loader的报错提示</p><p><img src="https://s3.ax1x.com/2021/01/28/y9Ya4K.png" alt="缺少babel-loader@8.1.0"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在icestark-child-react引入babel-loader</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./icestark-demo/icestark-child-react/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add babel-loader@8.1.0</span></span><br></pre></td></tr></table></figure><p>再次启动提示eslint版本不正确</p><p><img src="https://s3.ax1x.com/2021/01/28/y9N4mj.png" alt="缺少eslint^7.11.0"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在icestark-child-react引入eslint</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ./icestark-demo/icestark-child-react/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add eslint --dev</span></span><br></pre></td></tr></table></figure><p>由于workspaces的依赖判断问题，导致运行icestark-child-react时，没有使用子项目中的eslint版本，此时需要将高版本的eslint存储到外层的公共node_modules中。</p><p>修改根目录的package.json后再次执行yarn</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;icestark-demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;workspaces&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;packages/icestark-layout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-icejs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-react&quot;</span>,</span><br><span class="line">        <span class="string">&quot;packages/icestark-child-vue&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^7.11.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用入口适配"><a href="#应用入口适配" class="headerlink" title="应用入口适配"></a>应用入口适配</h4><p>将 React 应用改造为微应用，仅仅只需要导出对应的生命周期即可：</p><p>修改微应用 <code>src/index.tsx</code> 的微应用入口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isInIcestark &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container, customProps &#125; = props;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> &#123;<span class="attr">...customProps</span>&#125; /&gt;</span></span>, container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  ReactDOM.unmountComponentAtNode(container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isInIcestark()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;app is running in framework app&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ice-container&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于vue-cli改造微应用"><a href="#基于vue-cli改造微应用" class="headerlink" title="基于vue cli改造微应用"></a>基于vue cli改造微应用</h3><h2 id="微应用本地调试"><a href="#微应用本地调试" class="headerlink" title="微应用本地调试"></a>微应用本地调试</h2><h3 id="本地调试icejs微应用"><a href="#本地调试icejs微应用" class="headerlink" title="本地调试icejs微应用"></a>本地调试icejs微应用</h3><p>单独微应用开发时只能看到自身的内容，无法关注到在主应用下的表现，这时候本地如果需要再启动一个主应用，<br>开发起来就很繁琐。针对这种情况，我们推荐通过主应用的日常/线上环境调试本地微应用。</p><p>查看微应用的js、css资源路径。</p><p><img src="https://s3.ax1x.com/2021/01/11/s8dUlF.png" alt="查看微应用js路径"><br><img src="https://s3.ax1x.com/2021/01/11/s8dhmd.png" alt="查看微应用css路径"></p><p>在主应用的 <code>src/app.tsx</code> 中覆盖对应的微应用配置的路径</p><p><img src="https://s3.ax1x.com/2021/01/11/s8djmj.png" alt="覆盖微应用路径"></p><p>此时打开主应用的对应微应用模块，会发现微应用没有正常显示，原因是微应用没有获取正确的basename。</p><p><img src="https://s3.ax1x.com/2021/01/11/s8Ba6S.png" alt="微应用不显示"></p><p>参考<a href="https://ice.work/docs/guide/basic/router#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE">运行时配置</a></p><p>在微应用 <code>src/app.ts</code> 中，我们可以配置路由的类型和基础路径等信息，具体配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; runApp, IAppConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;ice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appConfig: IAppConfig = &#123;</span><br><span class="line">  router: &#123;</span><br><span class="line">    type: <span class="string">&#x27;browser&#x27;</span>,</span><br><span class="line">    basename: <span class="string">&#x27;/seller&#x27;</span>,</span><br><span class="line">    fallback: <span class="string">`&lt;div&gt;loading...&lt;/div&gt;`</span>,</span><br><span class="line">    modifyRoutes: <span class="function">(<span class="params">routes</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> routes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  icestark: &#123;</span><br><span class="line">    type: <span class="string">&#x27;child&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">runApp(appConfig);</span><br></pre></td></tr></table></figure><h3 id="本地调试react微应用"><a href="#本地调试react微应用" class="headerlink" title="本地调试react微应用"></a>本地调试react微应用</h3><h4 id="定义基准路由"><a href="#定义基准路由" class="headerlink" title="定义基准路由"></a>定义基准路由</h4><p>正常情况下，注册微应用时会为每个微应用分配一个基准路由比如 <code>/waiter</code>，<br>当前微应用的所有路由需要定义在基准路由之下，社区常见的路由库都可以通过参数非常简单的实现该功能。<br>微应用可以通过 getBasename() API 获取自身的基准路由。</p><p>React 项目中使用 react-router-dom：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 引入react-router-dom</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add react-router-dom</span></span><br></pre></td></tr></table></figure><p>修改icestark-child-react/src/App.tsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getBasename, renderNotFound &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./routes/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./routes/List&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;./routes/Detail&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #原有代码</span></span><br><span class="line"><span class="comment">// function App() &#123;</span></span><br><span class="line"><span class="comment">//   return (</span></span><br><span class="line"><span class="comment">//     &lt;div className=&quot;App&quot;&gt;</span></span><br><span class="line"><span class="comment">//       &lt;header className=&quot;App-header&quot;&gt;</span></span><br><span class="line"><span class="comment">//         &lt;img src=&#123;logo&#125; className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;</span></span><br><span class="line"><span class="comment">//         &lt;p&gt;</span></span><br><span class="line"><span class="comment">//           Edit &lt;code&gt;src/App.tsx&lt;/code&gt; and save to reload.</span></span><br><span class="line"><span class="comment">//         &lt;/p&gt;</span></span><br><span class="line"><span class="comment">//         &lt;a</span></span><br><span class="line"><span class="comment">//           className=&quot;App-link&quot;</span></span><br><span class="line"><span class="comment">//           href=&quot;https://reactjs.org&quot;</span></span><br><span class="line"><span class="comment">//           target=&quot;_blank&quot;</span></span><br><span class="line"><span class="comment">//           rel=&quot;noopener noreferrer&quot;</span></span><br><span class="line"><span class="comment">//         &gt;</span></span><br><span class="line"><span class="comment">//           Learn React</span></span><br><span class="line"><span class="comment">//         &lt;/a&gt;</span></span><br><span class="line"><span class="comment">//       &lt;/header&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/div&gt;</span></span><br><span class="line"><span class="comment">//   );</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #因tslint规定&lt;Route&gt;的component必须是JSX而添加的改动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notFound</span>(<span class="params">props: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;renderNotFound()&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router basename=&#123;getBasename()&#125;&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">&quot;/list&quot;</span> component=&#123;List&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;Route exact path=<span class="string">&quot;/list/detail/:contractId&quot;</span> component=&#123;Detail&#125; /&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">          component=&#123;notFound&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>查看微应用的端口地址</p><p><img src="https://s3.ax1x.com/2021/02/01/yZvbk9.png" alt="查看微应用端口地址"></p><p>在主应用的 src/app.tsx 中覆盖对应的微应用配置的路径</p><p><img src="https://s3.ax1x.com/2021/02/01/yZx3pq.png" alt="覆盖微应用路径"></p><blockquote><p>这里无法使用src获取到react微应用，需要使用entry来自动匹配微应用资源。</p></blockquote><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="微应用内跳转"><a href="#微应用内跳转" class="headerlink" title="微应用内跳转"></a>微应用内跳转</h3><h4 id="使用Link组件"><a href="#使用Link组件" class="headerlink" title="使用Link组件"></a>使用Link组件</h4><p>通过 <code>&lt;Link /&gt;</code> 标签组件可实现路由跳转，使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">&#x27;ice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Link to=<span class="string">&#x27;/courses?sort=name&#x27;</span> /&gt;</span><br><span class="line"></span><br><span class="line">      &#123;<span class="comment">/* 可以携带额外的数据 `state` 到路由中。 */</span>&#125;</span><br><span class="line">      &lt;Link</span><br><span class="line">        to=&#123;&#123;</span><br><span class="line">          pathname: <span class="string">&#x27;/courses&#x27;</span>,</span><br><span class="line">          search: <span class="string">&#x27;?sort=name&#x27;</span>,</span><br><span class="line">          hash: <span class="string">&#x27;#the-hash&#x27;</span>,</span><br><span class="line">          state: &#123; <span class="attr">fromDashboard</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在示例项目中使用如下</p></blockquote><h5 id="修改详情页路由"><a href="#修改详情页路由" class="headerlink" title="修改详情页路由"></a>修改详情页路由</h5><p>修改微应用 <code>src/routes.tsx</code> 的详情页路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderNotFound, isInIcestark &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> BasicLayout <span class="keyword">from</span> <span class="string">&#x27;@/layouts/BasicLayout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">&#x27;@/pages/Detail&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;@/pages/List&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;@/components/NotFound&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerConfig = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: BasicLayout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        component: Home,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        component: List,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;/list/detail/:contractId&#x27;</span>,</span><br><span class="line">        component: Detail,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 微应用独立运行 404 路由渲染 NotFound 组件</span></span><br><span class="line">        component: isInIcestark() ? <span class="function">() =&gt;</span> renderNotFound() : NotFound,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routerConfig;</span><br></pre></td></tr></table></figure><h5 id="修改Link组件传参"><a href="#修改Link组件传参" class="headerlink" title="修改Link组件传参"></a>修改Link组件传参</h5><p>修改微应用 <code>src/list/index.tsx</code> 的列表页Link组件，添加传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;Table.Column</span><br><span class="line">  title=<span class="string">&quot;操作&quot;</span></span><br><span class="line">  dataIndex=<span class="string">&quot;detail&quot;</span></span><br><span class="line">  key=<span class="string">&quot;detail&quot;</span></span><br><span class="line">  width=&#123;<span class="number">200</span>&#125;</span><br><span class="line">  cell=&#123;<span class="function">(<span class="params">value, index, record</span>) =&gt;</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;a className=&#123;styles.link&#125; onClick=&#123;<span class="function">() =&gt;</span> Message.success(<span class="string">&#x27;暂不支持修改合同&#x27;</span>)&#125;&gt;</span><br><span class="line">        修改</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">      &lt;span className=&#123;styles.separator&#125; /&gt;</span><br><span class="line">      &lt;Link className=&#123;styles.link&#125; to=&#123;<span class="string">`/list/detail/<span class="subst">$&#123;data[index].id&#125;</span>`</span>&#125;&gt;</span><br><span class="line">        查看</span><br><span class="line">      &lt;/Link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h5 id="详情页接收参数"><a href="#详情页接收参数" class="headerlink" title="详情页接收参数"></a>详情页接收参数</h5><p>引入<code>useRouteMatch</code>并获取<code>contractId</code></p><p><img src="https://s3.ax1x.com/2021/01/12/sGzbE8.png" alt="详情页接收参数"></p><h4 id="使用-useHistory-API"><a href="#使用-useHistory-API" class="headerlink" title="使用 useHistory API"></a>使用 useHistory API</h4><p>useHistory hook 用于获取 history 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;ice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomeButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> history = useHistory();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    history.push(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button type=<span class="string">&#x27;button&#x27;</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Go home</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在示例项目中使用如下</p></blockquote><h5 id="详情页添加返回按钮"><a href="#详情页添加返回按钮" class="headerlink" title="详情页添加返回按钮"></a>详情页添加返回按钮</h5><p>在微应用的<code>src/detail/index.tsx</code>引入<code>useHistory</code>方法，声明返回方法并调用<code>useHistory</code>，将返回按钮传入<code>PageTitle</code>组件。</p><p><img src="https://s3.ax1x.com/2021/01/12/sJyR8s.png" alt="详情页添加返回按钮"></p><p>改造微应用的<code>/src/components/PageTitle/index.tsx</code>文件，扩展<code>PageTitle</code>组件接收subTitle参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原组件</span></span><br><span class="line"><span class="comment">// export default (&#123; title, subTitle &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     &lt;h5 className=&#123;styles.title&#125;&gt;</span></span><br><span class="line"><span class="comment">//         &lt;span&gt;&#123;title&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//         &lt;span&gt;&#123;subTitle&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//     &lt;/h5&gt;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface PageTitleProps &#123;</span><br><span class="line">    title?: any;</span><br><span class="line">    subTitle?: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">PageTitle</span>(<span class="params">props: PageTitleProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; title, subTitle &#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;h5 className=&#123;styles.title&#125;&gt;</span><br><span class="line">            &lt;span&gt;&#123;title&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span className=&#123;styles.subTitle&#125;&gt;&#123;subTitle&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/h5&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-history-API"><a href="#使用-history-API" class="headerlink" title="使用 history API"></a>使用 history API</h4><p>在微应用的<code>src/detail/index.tsx</code>引入<code>history</code>方法，声明返回方法并调用<code>history</code>，将返回按钮传入<code>PageTitle</code>组件。</p><p><img src="https://s3.ax1x.com/2021/01/12/sYCU0I.png" alt="详情页使用history跳转"></p><h3 id="微应用间跳转"><a href="#微应用间跳转" class="headerlink" title="微应用间跳转"></a>微应用间跳转</h3><h4 id="使用-appHistory"><a href="#使用-appHistory" class="headerlink" title="使用 appHistory"></a>使用 appHistory</h4><p>在 A 微应用里需要跳转到 B 微应用时，如果使用 react-router/vue-router 提供的 Link 组件，<br>一般会强行在 path 上追加 basename，因此推荐使用 appHistory/AppLink 来跳转：</p><p>注意：AppLink 仅支持在基于 React 的微应用中使用，appHistory 不限制微应用的框架类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appHistory, AppLink &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">FrameworkLayout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          appHistory.push(<span class="string">&#x27;/seller/list&#x27;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        seller</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;AppLink to=<span class="string">&quot;/waiter/list&quot;</span>&gt;waiter&lt;/AppLink&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在示例项目中使用如下</p></blockquote><p><img src="https://s3.ax1x.com/2021/02/01/yeA8IK.png" alt="微应用间跳转"></p><p><img src="https://s3.ax1x.com/2021/02/01/yeEpFK.gif" alt="微应用间跳转"></p><h4 id="使用-AppLink"><a href="#使用-AppLink" class="headerlink" title="使用 AppLink"></a>使用 AppLink</h4><blockquote><p><del>直接使用ice中的AppLink会报错，需要自己封装个AppLink来跳转。</del></p></blockquote><p>示例在上个章节已介绍。</p><h5 id="封装-AppLink"><a href="#封装-AppLink" class="headerlink" title="封装 AppLink"></a>封装 AppLink</h5><p>在<code>src/utils/AppLink.tsx</code>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type AppLinkProps = &#123;</span><br><span class="line">    to: string;</span><br><span class="line">    message?: string;</span><br><span class="line">    children?: React.ReactNode;</span><br><span class="line">&#125; &amp; React.AnchorHTMLAttributes&lt;any&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tslint:disable-next-line:variable-name</span></span><br><span class="line"><span class="keyword">const</span> AppLink: React.SFC&lt;AppLinkProps&gt; = <span class="function">(<span class="params">props: AppLinkProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; to, message, children, ...rest &#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;a</span><br><span class="line">            &#123;...rest&#125;</span><br><span class="line">            href=&#123;to&#125;</span><br><span class="line">            onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">                <span class="keyword">if</span> (message &amp;&amp; <span class="built_in">window</span>.confirm(message) === <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">window</span>.history.pushState(</span><br><span class="line">                    &#123;</span><br><span class="line">                        forceRender: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    to</span><br><span class="line">                );</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">            &#123;children&#125;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AppLink;</span><br></pre></td></tr></table></figure><p>在<code>src/utils/index.tsx</code>声明<code>AppLink</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> AppLink &#125; <span class="keyword">from</span> <span class="string">&quot;./AppLink&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="调用-AppLink"><a href="#调用-AppLink" class="headerlink" title="调用 AppLink"></a>调用 AppLink</h5><p><img src="https://s3.ax1x.com/2021/01/12/sYF6je.png" alt="详情页使用AppLink跳转"></p><h2 id="微应用打包部署"><a href="#微应用打包部署" class="headerlink" title="微应用打包部署"></a>微应用打包部署</h2><p>项目结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">icestark-demo</span><br><span class="line">├─node_modules                 # 公共依赖文件</span><br><span class="line">├─docs                         # 项目部署后静态资源地址</span><br><span class="line">|    ├─subapp                  # 子项目静态资源包</span><br><span class="line">|    |   ├icestark-child-icejs # icejs子项目静态资源包</span><br><span class="line">|    |   ├icestark-child-react # creat-react-app子项目静态资源包</span><br><span class="line">|    |   ├icestark-child-vue   # vue cli子项目静态资源包</span><br><span class="line">|    ├─index.html              # 基座打包后入口文件</span><br><span class="line">├─.gitignore                   # 忽略文件</span><br><span class="line">├─README.md                    # 项目介绍</span><br><span class="line">├─package.json                 # 项目依赖</span><br><span class="line">├─packages                     # 项目文件</span><br><span class="line">|    ├─icestark-layout         # 基座</span><br><span class="line">|    |    ├─node_modules       # 子项目依赖文件</span><br><span class="line">|    ├─icestark-child-icejs    # icejs创建子项目</span><br><span class="line">|    ├─icestark-child-react    # creat-react-app创建子项目</span><br><span class="line">|    ├─icestark-child-vue      # vue cli创建子项目</span><br></pre></td></tr></table></figure><h3 id="微应用打包"><a href="#微应用打包" class="headerlink" title="微应用打包"></a>微应用打包</h3><h4 id="icejs微应用打包"><a href="#icejs微应用打包" class="headerlink" title="icejs微应用打包"></a>icejs微应用打包</h4><p>在项目根目录执行build命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行打包命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspace icestark-child-icejs build</span></span><br></pre></td></tr></table></figure><p>执行完毕后，微应用目录下生成build文件夹。</p><p>将其拷贝至根目录docs/subapp/icestark-child-icejs文件下</p><h4 id="react微应用打包"><a href="#react微应用打包" class="headerlink" title="react微应用打包"></a>react微应用打包</h4><p>在项目根目录执行build命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行打包命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspace icestark-child-react build</span></span><br></pre></td></tr></table></figure><p>执行完毕后，微应用目录下生成build文件夹。</p><p>将其拷贝至根目录docs/subapp/icestark-child-react文件下</p><h3 id="主应用连接部署后的微应用"><a href="#主应用连接部署后的微应用" class="headerlink" title="主应用连接部署后的微应用"></a>主应用连接部署后的微应用</h3><p>将项目推送至远端</p><p>此时还无法获取到微应用资源，需将github仓库进行github page修改</p><p>如下图所示</p><p><img src="https://s3.ax1x.com/2021/02/02/ymf3ZV.gif" alt="微应用部署"></p><p>修改后<code>http://www.gaotianyang.top/icestark-demo/</code>地址就指向了项目根目录的docs文件夹</p><p>修改主应用的 src/app.tsx 中覆盖对应的微应用配置的路径</p><p><img src="https://s3.ax1x.com/2021/02/02/ymhOhD.png" alt="微应用路径配置"></p><h2 id="主应用打包部署"><a href="#主应用打包部署" class="headerlink" title="主应用打包部署"></a>主应用打包部署</h2><p>在项目根目录执行build命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行打包命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn workspace icestark-layout build</span></span><br></pre></td></tr></table></figure><p>将build文件复制到项目docs根目录</p><p>可访问<a href="https://www.gaotianyang.top/icestark-demo/">https://www.gaotianyang.top/icestark-demo/</a>进行查看</p><blockquote><p>注意这里打包需要解决资源获取路径为相对路径的问题。修改主应用的build.json的publicPath，将资源路径改为相对路径即可。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;publicPath&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;build-plugin-icestark&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;uniqueName&quot;</span>: <span class="string">&quot;frameworkJsonp&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;build-plugin-fusion&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;themePackage&quot;</span>: <span class="string">&quot;@alifd/theme-design-pro&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;themeConfig&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;nextPrefix&quot;</span>: <span class="string">&quot;next-icestark-&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;build-plugin-moment-locales&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;locales&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;zh-cn&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主应用配置二级路由"><a href="#主应用配置二级路由" class="headerlink" title="主应用配置二级路由"></a>主应用配置二级路由</h3><p>因为项目部署在github page中，项目地址为二级域名<code>https://www.gaotianyang.top/icestark-demo</code><br>因此项目中的路由配置及跳转信息需要额外配置<code>icestark-demo</code>方可正常显示。</p><p>解决方案如下</p><h4 id="获取应用状态并存储二级路由"><a href="#获取应用状态并存储二级路由" class="headerlink" title="获取应用状态并存储二级路由"></a>获取应用状态并存储二级路由</h4><p>在主应用获取当前应用是处于预览还是打包，并将路由存储在localStorage中。</p><p>在<code>icestark-demo/packages/icestark-layout/src/app.tsx</code>修改微应用path</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;baseUrl&quot;</span>, process.env.NODE_ENV === <span class="string">&quot;development&quot;</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;/icestark-demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="built_in">localStorage</span>.baseUrl</span><br></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/02/02/ynLxhR.png" alt="微应用path配置二级路由"></p><h4 id="修改主应用路由"><a href="#修改主应用路由" class="headerlink" title="修改主应用路由"></a>修改主应用路由</h4><p>在<code>icestark-demo/packages/icestark-layout/src/routes.ts</code>修改主应用路由</p><p><img src="https://s3.ax1x.com/2021/02/02/ynOLxP.png" alt="主应用路由配置二级路由"></p><h4 id="修改主应用菜单"><a href="#修改主应用菜单" class="headerlink" title="修改主应用菜单"></a>修改主应用菜单</h4><p>在<code>icestark-demo/packages/icestark-layout/src/layouts/BasicLayout/menuConfig.ts</code>修改主应用菜单</p><p><img src="https://s3.ax1x.com/2021/02/02/ynOLxP.png" alt="主应用菜单配置二级路由"></p><h4 id="修改微应用跳转"><a href="#修改微应用跳转" class="headerlink" title="修改微应用跳转"></a>修改微应用跳转</h4><p><img src="https://s3.ax1x.com/2021/02/02/ynXRij.png" alt="微应用跳转路径"></p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="GitHub-page-刷新找不到二级域名下的路由地址"><a href="#GitHub-page-刷新找不到二级域名下的路由地址" class="headerlink" title="GitHub-page 刷新找不到二级域名下的路由地址"></a>GitHub-page 刷新找不到二级域名下的路由地址</h3><p>因为GitHub-page只能存放静态资源。并且不支持.htaccess，<br>所以用webpack构建出来的单页应用，<br>直接将dist文件推送到GitHub-page分支，<br>在切换路由之后，手动刷新是会出现404的。</p><p><img src="https://s3.ax1x.com/2021/02/05/yGrZZR.png" alt="找不到项目"></p><p>处理方法</p><ul><li>给站点根目录添加404.html</li></ul><p>一般也就是dist目录下（GitHub-page找不到的路径会自动访问这个404.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      sessionStorage.redirect = location.href;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;URL=&#x27;/icestark-demo/&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里使用的知识点是<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;URL=&#39;/icestark-demo/&#39;&quot;&gt;</code></p></blockquote><p>常见的几种使用场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个表示当前页面每5秒钟刷一下，刷一下~ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这个表示当前页面2秒后跳到首页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2; url=&#x27;/&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面直接跳转到腾讯网 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0; url=&#x27;http://www.qq.com/&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>给index.html添加重定向逻辑</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 这段代码要放在其他js的前面</span></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> redirect = sessionStorage.redirect;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">delete</span> sessionStorage.redirect;</span></span><br><span class="line">    if (redirect &amp;&amp; redirect != location.href) &#123;</span><br><span class="line"><span class="javascript">      history.replaceState(<span class="literal">null</span>, <span class="literal">null</span>, redirect);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ice-stark-2-0-0版本问题"><a href="#ice-stark-2-0-0版本问题" class="headerlink" title="@ice/stark^2.0.0版本问题"></a>@ice/stark^2.0.0版本问题</h3><p>当项目安装的@ice/stark是2.1.0时，会出现entry的地址获取js、css路径不正确。<br>此时需将版本降至2.0.2即可修复。可通过复制并整体替换处理。</p><p>处理方法</p><ul><li>先正常yarn项目</li><li>打开根目录的node_modules/@ice/stark</li><li>将2.0.2版本的ice-stark整体替换至改目录下即可</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ice.work/docs/icestark/start">icestark快速上手</a></li><li><a href="https://ice.work/docs/guide/basic/router#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE">路由运行时配置</a></li><li><a href="https://ice.work/docs/guide/basic/api#Link">Link</a></li><li><a href="https://ice.work/docs/guide/basic/api#useHistory">useHistory</a></li><li><a href="https://ice.work/docs/guide/basic/api#history">history</a></li><li><a href="https://ice.work/docs/icestark/guide/child-app#%E5%BE%AE%E5%BA%94%E7%94%A8%E9%97%B4%E8%B7%B3%E8%BD%AC">微应用间跳转</a></li><li><a href="https://ice.work/docs/guide/basic/build#publicPath">主应用打包后资源改为相对路径</a></li><li><a href="https://ice.work/docs/guide/basic/api#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">框架API-环境变量</a></li><li><a href="https://segmentfault.com/a/1190000012951274">单页应用在gh-pages动态路由刷新后404解决方案</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/">使用meta实现页面的定时刷新或跳转</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/12/sG4eTP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>icestark的使用</title>
    <link href="https://www.gaotianyang.top/archives/20210105b721b7cb/"/>
    <id>https://www.gaotianyang.top/archives/20210105b721b7cb/</id>
    <published>2021-01-05T03:16:53.000Z</published>
    <updated>2021-03-02T13:16:32.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/12/sG4nFf.jpg" alt="首屏图"></p><a id="more"></a><h2 id="关于icestark"><a href="#关于icestark" class="headerlink" title="关于icestark"></a>关于icestark</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://github.com/ice-lab/icestark">icestark</a> 是一个面向大型系统的微前端解决方案，适用于以下业务场景：</p><ul><li>后台比较分散，体验差别大，因为要频繁跳转导致操作效率低，希望能统一收口的一个系统内</li><li>单页面应用非常庞大，多人协作成本高，开发/构建时间长，依赖升级回归成本高</li><li>系统有二方/三方接入的需求</li></ul><p>icestark 在保证一个系统的操作体验基础上，实现各个子应用的独立开发和发版，主应用通过 icestark 管理微应用的注册和渲染，将整个系统彻底解耦。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>主应用和微应用皆支持 React/Vue/Angular… 等不同框架</li><li>主应用只需依赖 npm 包 <code>@ice/stark</code>，不耦合任何工程体系</li><li>微应用独立开发、不耦合任何框架以及工程体系，已有应用迁移成本极低</li><li>整个系统用户体验好，跟 SPA 应用基本一致</li><li>微应用只需发布前端资源 bundle 即可，主应用通过 bundle 渲染微应用</li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p><img src="https://s3.ax1x.com/2021/01/06/sEIxV1.png" alt="icestark架构设计"></p><ul><li>按照 UI 结构进行主应用、微应用的拆分</li><li>主应用：负责微应用的注册与渲染，公共内容展示（Common Header、Common Sidebar、Common Footer等）</li><li>微应用：负责自身业务相关的内容展示</li></ul><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="阿里创作者平台"><a href="#阿里创作者平台" class="headerlink" title="阿里创作者平台"></a>阿里创作者平台</h4><p><img src="https://s3.ax1x.com/2021/01/06/sE7ngS.png" alt="阿里创作者平台"></p><h4 id="阿里健康-熙牛医疗云医院信息系统"><a href="#阿里健康-熙牛医疗云医院信息系统" class="headerlink" title="阿里健康-熙牛医疗云医院信息系统"></a>阿里健康-熙牛医疗云医院信息系统</h4><p><img src="https://s3.ax1x.com/2021/01/06/sE7H8f.png" alt="阿里健康"></p><h4 id="淘系小二工作台"><a href="#淘系小二工作台" class="headerlink" title="淘系小二工作台"></a>淘系小二工作台</h4><p><img src="https://s3.ax1x.com/2021/01/06/sEH9P0.png" alt="淘系小二工作台"></p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p><a href="https://ice.work/docs/icestark/start">快速上手</a></p><p><a href="/archives/202101115b56e29a/">icestark最佳实践</a></p><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><h3 id="1-x-gt-2-x"><a href="#1-x-gt-2-x" class="headerlink" title="1.x -&gt; 2.x"></a>1.x -&gt; 2.x</h3><blockquote><p><a href="mailto:icestark@2.0.0">icestark@2.0.0</a> 于 2020 年 12 月发布，Changelog</p></blockquote><ul><li>支持以 API 的方式初始化主应用，主应用不再限制 React/Vue/Angular 等不同框架</li><li>支持加载 UMD 格式的子应用产物</li></ul><p>注意：<code>@ice/stark</code> 2.0.0 完全兼容 1.0.0 版本的 API，因此主应用可以非常低成本的升级 2.0.0 版本。</p><h4 id="主应用升级"><a href="#主应用升级" class="headerlink" title="主应用升级"></a>主应用升级</h4><p>存量 1.x 的应用将 <code>@ice/stark</code> 升级到 2.x 最新版本即可，AppRouter 注册方式同 1.x 完全兼容。</p><h4 id="不同版本混用"><a href="#不同版本混用" class="headerlink" title="不同版本混用"></a>不同版本混用</h4><p>微应用本身不依赖 <code>@ice/stark</code> 的版本变化，原先通过 <code>registerAppEnter</code> 和 <code>registerAppLeave</code> 方式注册生命周期的方式，均可以在 1.x 和 2.x 版本下运行。</p><p>增量的微应用推荐通过 UMD 的规范导出，如需渲染 UMD 格式的微应用，需要将主应用中 <code>@ice/stark</code> 升级到 2.0.0 (或者 1.6.0)，同时在应用列表中显示声明 umd：</p><p><code>AppRoute</code> API 渲染 UMD 规范的子应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;AppRoute</span><br><span class="line">+  umd=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">  path=<span class="string">&quot;/seller&quot;</span></span><br><span class="line">  title=<span class="string">&quot;标题&quot;</span></span><br><span class="line">  url=&#123;[]&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p><code>regsiterMicroApps</code> API 渲染 UMD 规范的子应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">regsiterMicroApps([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">    activePath: [<span class="string">&#x27;/seller&#x27;</span>],</span><br><span class="line">+    umd: <span class="literal">true</span></span><br><span class="line">    title: <span class="string">&#x27;通用页面&#x27;</span>,</span><br><span class="line">    url: [],</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="0-x-gt-1-x"><a href="#0-x-gt-1-x" class="headerlink" title="0.x -&gt; 1.x"></a>0.x -&gt; 1.x</h3><blockquote><p><a href="mailto:icestark@1.0.0">icestark@1.0.0</a> 于 2019 年 10 月发布，Changelog</p></blockquote><ul><li>将微应用相关 API 拆成独立的包 <code>@ice/stark-app</code>，保证兼容不同框架的微应用</li><li>支持 <code>onAppEnter/onAppLeave</code> 相关 API</li></ul><h4 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h4><h5 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h5><p>将 <code>@ice/stark</code> 从 0.x 升级到 1.x 即可，API 跟 0.x 兼容。</p><h5 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h5><ul><li>移除 <code>@ice/stark</code> 依赖：<code>npm rm @ice/stark --save</code></li><li>安装 <code>@ice/stark-app</code> 依赖：<code>npm i @ice/stark-app --save</code></li><li>批量替换代码中 <code>@ice/stark</code> 为 <code>@ice/stark-app</code></li></ul><h2 id="核心概念与原理"><a href="#核心概念与原理" class="headerlink" title="核心概念与原理"></a>核心概念与原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>icestark 内部维护了所有微应用的配置信息，包括路由规则、bundle 地址等，同时劫持了 <code>window.history</code> 相关的几个跳转事件，<br>当捕获到页面跳转事件时，icestark 会根据跳转的路由获取对应的微应用信息，然后跟之前的微应用信息进行对比，如果是同一个微应用，<br>则什么都不做，如果是不同的微应用，则将前一个微应用的 bundle 卸载，同时加载新的微应用 bundle 资源，加载完成后微应用 bundle 会执行自身的渲染逻辑。</p><h3 id="主应用含义"><a href="#主应用含义" class="headerlink" title="主应用含义"></a>主应用含义</h3><p>又称框架应用或基座应用，一个系统只有一个主应用，主应用负责系统整体的 Layout 以及微应用的管理与注册。</p><h3 id="微应用含义"><a href="#微应用含义" class="headerlink" title="微应用含义"></a>微应用含义</h3><p>又称子应用，微应用通常是一个单页面应用（SPA），可能包含一个或多个路由页面，一般情况下不存在多个微应用同时运行的场景。</p><h3 id="微模块含义"><a href="#微模块含义" class="headerlink" title="微模块含义"></a>微模块含义</h3><p>微应用的更小粒度，通常是一个模块或页面，跟页面路由无关，可以随处挂载，也会出现多个微模块同时渲染运行。</p><h2 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h2><p><a href="https://ice.work/docs/icestark/guide/principle">使用原则</a></p><h2 id="主应用开发与接入（React）"><a href="#主应用开发与接入（React）" class="headerlink" title="主应用开发与接入（React）"></a>主应用开发与接入（React）</h2><p>对于 React 主应用，推荐使用 AppRouter/AppRoute 这种 React Component 的方式使用。</p><h3 id="注册微应用"><a href="#注册微应用" class="headerlink" title="注册微应用"></a>注册微应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/App.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRouter, AppRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;@/components/NotFound&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PageLoading <span class="keyword">from</span> <span class="string">&#x27;@/components/PageLoading&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> BasicLayout <span class="keyword">from</span> <span class="string">&#x27;@/layouts/BasicLayout&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    pathname: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleRouteChange = <span class="function">(<span class="params">pathname</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;route change&#x27;</span>, pathname);</span><br><span class="line">    <span class="comment">// 如有需求，可根据 pathname 切换 layout 的形态</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      pathname,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = <span class="built_in">this</span>.state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BasicLayout pathname=&#123;pathname&#125;&gt;</span><br><span class="line">        &lt;AppRouter</span><br><span class="line">          NotFoundComponent=&#123;NotFound&#125;</span><br><span class="line">          LoadingComponent=&#123;PageLoading&#125;</span><br><span class="line">          onRouteChange=&#123;<span class="built_in">this</span>.handleRouteChange&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;AppRoute</span><br><span class="line">            </span><br><span class="line">            title=<span class="string">&quot;商家平台&quot;</span></span><br><span class="line">            url=&#123;[</span><br><span class="line">              <span class="string">&#x27;//unpkg.com/icestark-child-seller/build/js/index.js&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;//unpkg.com/icestark-child-seller/build/css/index.css&#x27;</span>,</span><br><span class="line">            ]&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;AppRoute</span><br><span class="line">            path=<span class="string">&quot;/user&quot;</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;AppRoute</span><br><span class="line">            path=<span class="string">&quot;*&quot;</span></span><br><span class="line">            render=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/AppRouter&gt;</span><br><span class="line">      &lt;/BasicLayout&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微应用配置"><a href="#微应用配置" class="headerlink" title="微应用配置"></a>微应用配置</h3><h4 id="基准路由-path"><a href="#基准路由-path" class="headerlink" title="基准路由 path"></a>基准路由 path</h4><p>类型为 <code>string|string[]</code>，大部分情况下都是 string，通过 path 约束每个微应用的路由定义，建立路由和微应用的映射关系。</p><h4 id="微应用入口-url-entry-entryContent"><a href="#微应用入口-url-entry-entryContent" class="headerlink" title="微应用入口 url/entry/entryContent"></a>微应用入口 url/entry/entryContent</h4><p>通过 AppRoute 注册微应用，微应用入口支持 url/entry/entryContent 方式，此部分与 API 注册使用一致，<br>可参考文档<a href="https://ice.work/docs/icestark/guide/framework-api#%E5%BE%AE%E5%BA%94%E7%94%A8%E5%85%A5%E5%8F%A3">微应用入口</a>使用。</p><p>在此基础上，AppRoute 还支持了更为灵活的 component 和 render 方式配置微应用入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;AppRoute</span><br><span class="line">  path=<span class="string">&quot;/foo&quot;</span></span><br><span class="line">  render=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  <span class="comment">// 或者直接传入 component</span></span><br><span class="line">  <span class="comment">// component=&#123;CustomComponent&#125;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>通过这种方式，可以通过 AppRoute 渲染一个 iframe 或者任意的 React 组件。</p><h3 id="微应用注册通过数据驱动"><a href="#微应用注册通过数据驱动" class="headerlink" title="微应用注册通过数据驱动"></a>微应用注册通过数据驱动</h3><p>在很多场景下，我们的微应用可能通过一些配置平台注册，这时候可以将所有微应用的信息通过全局变量输出到 html 中，然后前端通过该数据注册微应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/App.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRouter, AppRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;AppRouter&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          (<span class="built_in">window</span>.appConfig || []).map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;AppRoute</span><br><span class="line">                key=&#123;idx&#125;</span><br><span class="line">                path=&#123;item.path&#125;</span><br><span class="line">                title=&#123;item.title&#125;</span><br><span class="line">                url=&#123;item.url&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            );</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/AppRouter&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用级别权限校验"><a href="#应用级别权限校验" class="headerlink" title="应用级别权限校验"></a>应用级别权限校验</h3><p>icestark 支持对 <code>AppRoute</code> 再进行二次封装，统一处理容器定制/权限校验等场景：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/AuthAppRoute.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">AuthAppRoute</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [hasAuth, setHasAuth] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setHasAuth(<span class="literal">true</span>);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>wait for a moment<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>No access!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      <span class="comment">//  注意要将 ...others 透传给 AppRoute</span></span><br><span class="line">      &lt;AppRoute &#123;...props&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装完成后即可在 AppRouter 下使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/App.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRouter, AppRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;@/components/NotFound&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PageLoading <span class="keyword">from</span> <span class="string">&#x27;@/components/PageLoading&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> BasicLayout <span class="keyword">from</span> <span class="string">&#x27;@/layouts/BasicLayout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> AuthAppRoute <span class="keyword">from</span> <span class="string">&#x27;@/components/AuthAppRoute&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;BasicLayout&gt;</span><br><span class="line">        &lt;AppRouter</span><br><span class="line">          NotFoundComponent=&#123;NotFound&#125;</span><br><span class="line">          LoadingComponent=&#123;PageLoading&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;<span class="comment">/* 注意：path/url/entry 等配置信息配置在组件外层，AppRouter 的直接子元素上 */</span>&#125;</span><br><span class="line">          &lt;AuthAppRoute</span><br><span class="line">            path=&#123;[<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/message&#x27;</span>, <span class="string">&#x27;/about&#x27;</span>]&#125;</span><br><span class="line">            exact</span><br><span class="line">            title=<span class="string">&quot;主页&quot;</span></span><br><span class="line">            url=&#123;[</span><br><span class="line">              <span class="string">&#x27;//unpkg.com/icestark-child-common/build/js/index.js&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;//unpkg.com/icestark-child-common/build/css/index.css&#x27;</span>,</span><br><span class="line">            ]&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/AppRouter&gt;</span><br><span class="line">      &lt;/BasicLayout&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不同页面-Layout-不同"><a href="#不同页面-Layout-不同" class="headerlink" title="不同页面 Layout 不同"></a>不同页面 Layout 不同</h3><p>如上示例，通过 <code>onRouteChange</code> 可以捕获到所有的路由变化，此时可以根据不同路由对 Layout 做一些状态的变化，实现不同页面不同布局的能力。</p><h2 id="主应用开发与接入（非-React）"><a href="#主应用开发与接入（非-React）" class="headerlink" title="主应用开发与接入（非 React）"></a>主应用开发与接入（非 React）</h2><p><a href="https://ice.work/docs/icestark/guide/framework-api">主应用开发与接入（非 React）</a></p><h2 id="微应用开发与接入"><a href="#微应用开发与接入" class="headerlink" title="微应用开发与接入"></a>微应用开发与接入</h2><p><a href="https://ice.work/docs/icestark/guide/child-app">微应用开发与接入</a></p><h2 id="应用间通信"><a href="#应用间通信" class="headerlink" title="应用间通信"></a>应用间通信</h2><p><a href="https://ice.work/docs/icestark/guide/interaction">应用间通信</a></p><h2 id="样式和脚本隔离"><a href="#样式和脚本隔离" class="headerlink" title="样式和脚本隔离"></a>样式和脚本隔离</h2><p><a href="https://ice.work/docs/icestark/guide/sandbox">样式和脚本隔离</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a href="https://ice.work/docs/icestark/guide/faq">常见问题</a></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ice-stark"><a href="#ice-stark" class="headerlink" title="@ice/stark"></a>@ice/stark</h3><p>Vue版API<a href="https://ice.work/docs/icestark/reference/api">详见</a></p><h3 id="ice-stark-app"><a href="#ice-stark-app" class="headerlink" title="@ice/stark-app"></a>@ice/stark-app</h3><h4 id="isInIcestark"><a href="#isInIcestark" class="headerlink" title="isInIcestark"></a>isInIcestark</h4><p>判断当前运行环境，是否运行在 icestark 环境中，返回值类型：boolean</p><ul><li>类型：<code>function</code></li><li>示例代码详见 <code>registerAppLeave</code></li></ul><h4 id="getBasename"><a href="#getBasename" class="headerlink" title="getBasename"></a>getBasename</h4><p>配置微应用 <code>React Router</code> 中的 <code>basename</code> 参数的方法，根据 <code>AppRoute</code> 中的 <code>basename</code> 或者 <code>path</code> 配置生成最终结果</p><ul><li>类型：<code>function</code></li><li>默认值：<code>() =&gt; basename || (Array.isArray(path) ? path[0] : path)) || &quot;/&quot;</code></li></ul><h4 id="getMountNode"><a href="#getMountNode" class="headerlink" title="getMountNode"></a>getMountNode</h4><p>根据微应用运行环境，返回微应用渲染节点</p><ul><li>类型：<code>function</code></li><li>默认值：<code>&lt;div id=&quot;ice-container&quot;&gt;&lt;/div&gt;</code></li><li>使用规则：方法支持传参，传参代表默认渲染的 DOM 节点，默认节点只在微应用单独启动时生效。支持 <code>string | HTMLElement | function</code>， <code>string</code> 表示默认 DOM 节点的 <code>id</code>，<code>function</code> 支持函数返回值作为默认 DOM 节点</li></ul><h4 id="renderNotFound"><a href="#renderNotFound" class="headerlink" title="renderNotFound"></a>renderNotFound</h4><p>微应用触发渲染全局 404 的方法</p><ul><li>类型：<code>function</code></li></ul><h4 id="appHistory"><a href="#appHistory" class="headerlink" title="appHistory"></a>appHistory</h4><p>提供手动切换不同应用的方法。</p><h5 id="appHistory-push"><a href="#appHistory-push" class="headerlink" title="appHistory.push"></a>appHistory.push</h5><ul><li>类型：<code>function</code></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; appHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SelfLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;span</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          appHistory.push(<span class="string">&#x27;/home&#x27;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        selfLink</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="appHistory-replace"><a href="#appHistory-replace" class="headerlink" title="appHistory.replace"></a>appHistory.replace</h5><ul><li>类型：<code>function</code></li><li>代码示例参考 <code>appHistory.push</code></li></ul><h4 id="registerAppEnter"><a href="#registerAppEnter" class="headerlink" title="registerAppEnter"></a>registerAppEnter</h4><p>提供快速注册当前应用加载前的回调事件</p><ul><li>类型：<code>function</code></li><li>示例代码详见 <code>registerAppLeave</code></li></ul><h4 id="registerAppLeave"><a href="#registerAppLeave" class="headerlink" title="registerAppLeave"></a>registerAppLeave</h4><p>提供快速注册当前应用卸载前的回调事件</p><ul><li>类型：<code>function</code></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isInIcestark, getMountNode, registerAppEnter, registerAppLeave &#125; <span class="keyword">from</span> <span class="string">&#x27;@ice/stark-app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isInIcestark()) &#123;</span><br><span class="line">  <span class="keyword">const</span> mountNode = getMountNode();</span><br><span class="line">  registerAppEnter(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ReactDOM.render(router(), getMountNode());</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// make sure the unmount event is triggered</span></span><br><span class="line">  registerAppLeave(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ReactDOM.unmountComponentAtNode(getMountNode());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ReactDOM.render(router(), <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ice-container&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ice.work/docs/icestark/about">关于 icestark</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/12/sG4nFf.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>react-spring的使用</title>
    <link href="https://www.gaotianyang.top/archives/202101044fbd9ce8/"/>
    <id>https://www.gaotianyang.top/archives/202101044fbd9ce8/</id>
    <published>2021-01-04T08:49:41.000Z</published>
    <updated>2021-01-30T04:16:46.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/12/sG4KfS.jpg" alt="首屏图"></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整写法如下</span></span><br><span class="line"><span class="comment">// const fadeInProps = useSpring(&#123; to: &#123; opacity: 1 &#125;, from: &#123; opacity: 0 &#125; &#125;)</span></span><br><span class="line"><span class="keyword">const</span> fadeInProps = useSpring(&#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">from</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125; &#125;)</span><br><span class="line"><span class="comment">// 省略中间代码</span></span><br><span class="line">&lt;animated.div style=&#123;fadeInProps&#125;&gt;</span><br><span class="line">  &#123;preparElem&#125;</span><br><span class="line">&lt;/animated.div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>!useSpring不可加入数组 typeScript报错</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.cn/post/6844903988383449096">用react-spring以react hook组件的形式编写动画</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/12/sG4KfS.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://www.gaotianyang.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端微服务</title>
    <link href="https://www.gaotianyang.top/archives/20210104d0a9039b/"/>
    <id>https://www.gaotianyang.top/archives/20210104d0a9039b/</id>
    <published>2021-01-04T02:28:37.000Z</published>
    <updated>2021-03-02T13:16:32.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/12/sG4uY8.jpg" alt="首屏图"></p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>本质上前端微服务就是把一个大型的应用拆分为很多个独立的模块，每一个模块的可以单独的开发、调试并上线。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>每个模块都是一个独立的个体，如果有某个模块出现问题了，不会导致整个应用挂掉。</li><li>由于每个模块可以单独上线，因此上线会更快，有利于更新迭代。</li><li>由于有了服务注册的功能，因此页面都可以通过配置化的方式来动态加载，对于功能的新增、回滚特别方便。</li><li>框架无关(这可能取决于具体实现)，每个模块间可以使用不同的框架(但不推荐这样做)。</li></ul><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>首先，我们来思考一个问题。如果我们将一个大型应用拆分为多个模块的话，那主程序怎么知道有哪些模块，<br>以及各个模块对应的配置信息(js / css 等配置信息)呢。其实，查找配置的模块信息的过程，就叫做服务发现。</p><blockquote><p>那么我们怎么实现服务发现呢?</p></blockquote><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>有一种很简单粗暴的做法，就是我们将这些配置信息直接硬编码在主程序里面。AIOT、AIMS项目使用的是这个方式。<br>通过基座stack项目，进行登录鉴权管理，并开放对应权限的路由进行子应用跳转。</p><blockquote><p>注：子项目的加载使用的useSpring是用来编写react的动画的</p></blockquote><p>可查看<a href="/archives/202101044fbd9ce8/">react-spring的使用</a></p><p>项目选型为飞冰团队的<a href="https://ice.work/docs/icestark/about">icestark</a>，可查看<a href="/archives/20210105b721b7cb/">icestark的使用</a></p><p>可是这样造成的问题是什么呢？每一次你要新增、修改和删除模块的话，你都需要发布一次主程序。</p><blockquote><p>除了写死在主程序中，有没有其他更好的办法呢？</p></blockquote><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>这个时候比较聪明的同学可能就想到了，那我把配置信息通过接口的方式调用不就行了？我个人比较推荐的也是这种做法。<br>因此有时候我们需要根据用户的身份、权限来返回不同的模块配置信息，通过接口的话，我们就可以很方便的做到这一点。我给一个简单的模块配置信息模块：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    name: &#x27;home&#x27;,</span><br><span class="line">    path: &#x27;/home&#x27;,</span><br><span class="line">    js: &#x27;https://unpkg.com/react@16/umd/react.development.js&#x27;,</span><br><span class="line">    css: &#x27;https://unpkg.com/react@16/umd/react.css&#x27;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>复制代码配置信息主要分为四项，path 指的是该模块对应的路由地址，也就是说，当前端匹配到路由为 /home 的时候，就会加载对应的 js 文件和 css 文件，并执行对应的 js 文件，渲染模块内容。</p><h3 id="动态加载模块"><a href="#动态加载模块" class="headerlink" title="动态加载模块"></a>动态加载模块</h3><h4 id="new-Function"><a href="#new-Function" class="headerlink" title="new Function"></a>new Function</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><h5 id="F实现步骤"><a href="#F实现步骤" class="headerlink" title="F实现步骤"></a>F实现步骤</h5><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><h5 id="A实现步骤"><a href="#A实现步骤" class="headerlink" title="A实现步骤"></a>A实现步骤</h5><h4 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.yuque.com/ucf-web/book">ucf-web 微前端框架使用手册</a></li><li><a href="https://github.com/ice-lab/icestark">github icestark</a></li><li><a href="https://juejin.cn/post/6844904088757370887">前端微服务简单实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/88449415">面向大型工作台的微前端解决方案 icestark</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/12/sG4uY8.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="微服务" scheme="https://www.gaotianyang.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>天坛</title>
    <link href="https://www.gaotianyang.top/archives/202011304e94e89b/"/>
    <id>https://www.gaotianyang.top/archives/202011304e94e89b/</id>
    <published>2020-11-30T10:59:03.000Z</published>
    <updated>2021-01-30T04:16:46.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/13/sNBbLV.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>我的童年基本上是绕着天坛成长起来的，爷爷奶奶也时常带着我去天坛玩耍。北门的杨树林，七星岩，长廊都是玩耍的好去处。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sND5TO.jpg" alt="双环万寿亭"><br><img src="https://s3.ax1x.com/2021/01/13/sNDokD.jpg" alt="回音壁"><br><img src="https://s3.ax1x.com/2021/01/13/sNDTte.jpg" alt="我的初中"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/13/sNBbLV.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="天坛" scheme="https://www.gaotianyang.top/tags/%E5%A4%A9%E5%9D%9B/"/>
    
  </entry>
  
  <entry>
    <title>坡峰岭</title>
    <link href="https://www.gaotianyang.top/archives/202010251ed01ebb/"/>
    <id>https://www.gaotianyang.top/archives/202010251ed01ebb/</id>
    <published>2020-10-25T08:57:11.000Z</published>
    <updated>2021-01-30T04:16:46.667Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/13/sNBGx1.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>停车坐爱枫林晚——坡峰岭红叶节我来了。金秋即将来临，坡峰岭是观赏红叶、登山的最佳之选。漫山红叶、风景秀丽。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNDdO0.jpg" alt="你好拾月"><br><img src="https://s3.ax1x.com/2021/01/13/sNDDTU.jpg" alt="走没走过的路"><br><img src="https://s3.ax1x.com/2021/01/13/sND0mV.jpg" alt="看没看过的风景"><br><img src="https://s3.ax1x.com/2021/01/13/sNDskF.jpg" alt="小径通幽"><br><img src="https://s3.ax1x.com/2021/01/13/sNDayq.jpg" alt="云湖"><br><img src="https://s3.ax1x.com/2021/01/13/sNDyY4.jpg" alt="叶落知秋"><br><img src="https://s3.ax1x.com/2021/01/13/sND6fJ.jpg" alt="红叶"><br><img src="https://s3.ax1x.com/2021/01/13/sNDBwT.jpg" alt="夕阳西沉"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/13/sNBGx1.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="坡峰岭" scheme="https://www.gaotianyang.top/tags/%E5%9D%A1%E5%B3%B0%E5%B2%AD/"/>
    
  </entry>
  
  <entry>
    <title>丹宸永固-紫禁城建成六百年</title>
    <link href="https://www.gaotianyang.top/archives/20201011e4a158b5/"/>
    <id>https://www.gaotianyang.top/archives/20201011e4a158b5/</id>
    <published>2020-10-11T10:33:56.000Z</published>
    <updated>2021-01-30T04:16:46.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/13/sNPKDH.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>紫禁城建成<strong>六百年</strong><br>故宫博物院成立九十五周年</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNCzgU.jpg" alt="大殿一角"></p><blockquote><p>1406年 <strong>永乐营北京</strong><br>永乐皇帝于永乐四年（1406）下诏，“以明年五月建北京宫殿”<br>自此拉开了北京皇宫营建的序幕。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPkU1.jpg" alt="午门"></p><blockquote><p>1420年<strong>紫禁城</strong>建成<br>永乐十八年（1420）十一月，朱棣发布诏书，宣告北京宫殿竣工。由此开启了紫禁城自明至清的使用历史。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPegO.jpg" alt="正殿"></p><blockquote><p>1535年 <strong>钦安殿奉道</strong><br>嘉靖十四年（1535），因为朱厚熜（音“聪”）这位笃信道教的皇帝，包括钦安殿在内的紫禁城建筑布局发生了有明一代的较大改变。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNP9u4.jpg" alt="午门城楼"></p><blockquote><p>1655年 <strong>改建坤宁宫</strong><br>顺治十二年（1655），仿沈阳清宁宫重修坤宁宫。坤宁宫的改建是清初满汉文化碰撞、融合的典型体现。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPPb9.jpg" alt="门钉"></p><blockquote><p>1695年 <strong>重建太和殿</strong><br>康熙十八年（1679）十二月，太和殿遭雷击焚毁。经十余年备料，三十四年（1695）重修工程进入施工阶段，历时两年竣工，太和殿形成今日所见之形制。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPMbd.jpg" alt="太和殿"></p><blockquote><p>1723年 <strong>入主养心殿</strong><br>养心殿于雍正元年（1723）具备了“政寝合一”的特点，见证了此后波澜起伏的内政外交、权力易主，成为清朝中后期实际的政治心脏。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPZ8K.jpg" alt="午门角楼"></p><blockquote><p>1738年 <strong>改乾西五所</strong><br>乾隆皇帝对乾西五所的改建，将乾清宫东、西五所相对称的格局打破，乾西五所的建筑式样与功能也发生了根本性变化。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPA4x.jpg" alt="房檐"></p><blockquote><p>1776年 <strong>建成宁寿宫</strong><br>宁寿宫于乾隆四十一年（1776）落成，展现了乾隆帝对归政后闲适生活的企盼，同时也潜藏着他作为一个文人天子的精神寄托。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPSvF.jpg" alt="红墙"></p><blockquote><p>1859年 <strong>连通长春宫</strong><br>咸丰九年（1859），基于对理政空间的需要，长春宫一区开始被改造，从而改变了西六宫的建筑格局。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPCDJ.jpg" alt="东六宫"></p><blockquote><p>1902年 <strong>重建武英殿</strong><br>武英殿分别于同治八年（1869）、光绪二十八年（1902）经历两次火灾，在内忧外患的局势之下进行了两次艰难的重建，反映出当时清廷的拮据与无奈。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNudUS.jpg" alt="叶知秋"></p><blockquote><p>1909年 <strong>探秘灵沼轩</strong><br>灵沼轩建于宣统元年（1909年），体现了“中西合璧”的建筑风格，因辛亥革命爆发而被迫停工，至今未完工。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNuw4g.jpg" alt="灵沼轩"></p><blockquote><p>1914年 <strong>初开紫禁城</strong><br>1914年10月，古物陈列所正式开幕，紫禁城自此对公众开放。古物陈列所规模初具，成为民国初年北京观摩古物和精研画法的艺术殿堂。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPFER.jpg" alt="夕阳余光"></p><blockquote><p>1925年 <strong>肇建博物院</strong><br>1925年 10月10日，故宫博物院开院。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNuaE8.jpg" alt="长街"></p><blockquote><p>1933年 <strong>战时护古物</strong><br>1933年，故宫文物南迁，历时八余载，行程数万里，创造了典守国宝的奇迹。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNuNHf.jpg" alt="透风"></p><blockquote><p>1949年 <strong>重整修缮队</strong><br>1949年成立的故宫工程小组以“保护为主，抢救第一”为原则，逐步改善了建筑的保存状况。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNP1UI.jpg" alt="长街"></p><blockquote><p>1961年 <strong>首荐颁国保</strong><br>1961年，故宫入选第一批全国重点文物保护单位。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPlVA.jpg" alt="长街"></p><blockquote><p>1987年 <strong>瑰宝列世遗</strong><br>1987年，故宫被联合国教科文组织列入世界遗产名录。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNuD3j.jpg" alt="神兽"></p><blockquote><p>2002年 <strong>大修百年计</strong><br>2002年，以武英殿大修作为试点工程，故宫的“世纪大修”拉开了序幕。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/sNPGPP.jpg" alt="长街"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/13/sNPKDH.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="故宫" scheme="https://www.gaotianyang.top/tags/%E6%95%85%E5%AE%AB/"/>
    
  </entry>
  
  <entry>
    <title>蟒山行</title>
    <link href="https://www.gaotianyang.top/archives/20200913d313b7c4/"/>
    <id>https://www.gaotianyang.top/archives/20200913d313b7c4/</id>
    <published>2020-09-13T03:59:13.000Z</published>
    <updated>2021-01-30T04:16:46.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/13/stfRFx.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>上次爬蟒山已是多年前了，从地铁站一路北行，走了5公里才到达森林公园门口，还是太年轻了🤣🤣，忽略了自己的体力。<br>接下来就是艰难爬山之旅了。感觉这次爬山体力确实和之前不一样了，走几步就需要休息会。</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/st4odA.jpg" alt="蟒山全景"><br><img src="https://s3.ax1x.com/2021/01/13/st4rZ9.jpg" alt="仰望最高点"><br><img src="https://s3.ax1x.com/2021/01/13/st4cPx.jpg" alt="十三陵水库"><br><img src="https://s3.ax1x.com/2021/01/13/st42RK.jpg" alt="会当凌绝顶"><br><img src="https://s3.ax1x.com/2021/01/13/st4yI1.jpg" alt="一览众山小"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/13/stfRFx.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="蟒山森林公园" scheme="https://www.gaotianyang.top/tags/%E8%9F%92%E5%B1%B1%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="https://www.gaotianyang.top/archives/2020090913c31df7/"/>
    <id>https://www.gaotianyang.top/archives/2020090913c31df7/</id>
    <published>2020-09-09T11:12:42.000Z</published>
    <updated>2020-12-30T01:08:23.106Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/09/w3v1nH.jpg" alt="首屏图"></p><a id="more"></a><h2 id="LeetCode-题目总结-最长回文子串"><a href="#LeetCode-题目总结-最长回文子串" class="headerlink" title="LeetCode 题目总结 - 最长回文子串"></a>LeetCode 题目总结 - 最长回文子串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串<code>s</code>，找到<code>s</code>中最长的回文子串。你可以假设<code>s</code>的最大长度为 1000。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h4 id="解法一-暴力枚举法"><a href="#解法一-暴力枚举法" class="headerlink" title="解法一: 暴力枚举法"></a>解法一: 暴力枚举法</h4><ul><li>时间复杂度O(n<sup>3</sup>)</li><li>空间复杂度O(1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len  = str.length</span><br><span class="line">        <span class="keyword">var</span> middle = <span class="built_in">parseInt</span>(len/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;middle;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]!=str[len-i<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ans = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = s.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> r = i+<span class="number">1</span>;r&lt;=len;r++)&#123;</span><br><span class="line">            <span class="keyword">var</span> tmpStr = s.substring(i,r)</span><br><span class="line">            <span class="keyword">if</span>(isPalindrome(tmpStr) &amp;&amp; tmpStr.length &gt; max)&#123;</span><br><span class="line">                ans = s.substring(i,r)</span><br><span class="line">                max = tmpStr.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解法二-动态规划-A"><a href="#解法二-动态规划-A" class="headerlink" title="解法二: 动态规划 - A"></a>解法二: 动态规划 - A</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!s || s.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s_f = s.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);   <span class="comment">//字符串调转 split字符串转数组 reverse数组顺序调转 join数组拼接字符串</span></span><br><span class="line">    <span class="keyword">var</span> resultStr = s[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> maxLen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> tmpLen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> maxStrIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> len = s.length; <span class="comment">//有无实际含义</span></span><br><span class="line">    <span class="comment">//判断字符串是否回文</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPalinerome</span>(<span class="params">i,r</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len - i - <span class="number">1</span> == r -tmpLen + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化二维数组</span></span><br><span class="line">    <span class="keyword">var</span> len = s.length;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        arr[i] = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> r = <span class="number">0</span>;r&lt;len;r++)&#123;</span><br><span class="line">            arr[i][r] = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> r=<span class="number">0</span>;r&lt;len;r++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s_f[r])&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> || r==<span class="number">0</span>)&#123;</span><br><span class="line">                    arr[i][r] = <span class="number">1</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    arr[i][r] = arr[i<span class="number">-1</span>][r<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">                    tmpLen = arr[i][r]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmpLen &gt; maxLen &amp;&amp; isPalinerome(i,r))&#123;</span><br><span class="line">                    maxStrIndex = r;</span><br><span class="line">                    maxLen = tmpLen;</span><br><span class="line">                    resultStr =  s.substring(i-tmpLen+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="解法二-动态规划-B"><a href="#解法二-动态规划-B" class="headerlink" title="解法二: 动态规划 - B"></a>解法二: 动态规划 - B</h4><p><img src="https://s1.ax1x.com/2020/09/09/w8iiwD.png" alt="图1"><br><img src="https://s1.ax1x.com/2020/09/09/w8iFTe.png" alt="图2"><br><img src="https://s1.ax1x.com/2020/09/09/w8iPeO.png" alt="图3"><br><img src="https://s1.ax1x.com/2020/09/09/w8iAFH.png" alt="图4"><br><img src="https://s1.ax1x.com/2020/09/09/w8i9OK.png" alt="图5"><br><img src="https://s1.ax1x.com/2020/09/09/w8iEYd.png" alt="图6"><br><img src="https://s1.ax1x.com/2020/09/09/w8iVfA.png" alt="图7"></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>标签：<code>动态规划</code>：通过子问题答案来解决大问题答案；子问题都需要是离散且不依赖其他子问题（详可见 《算法图解》 第九章「动态规划」）；</li><li>回文字符串是正读和反读都一样，所以如果将回文字符串反转，那么字符串和反转字符串肯定完全一样。</li><li>如果字符串不是回文字符串，那么字符串和反转字符串如果有相同的部分，即公共子串，那么最长的公共子串是不是一定就是最长回文子串呢？关于如何得到最长公共子串，看下面<a href="如何获取最长公共子串">这里</a></li><li>我们发现，最长公共子串不一定就是最长回文子串，比如字符串 S 为 aacdecaa，反转字符串为 aacedcaa，最长公共子串有 aac 和 caa，都不是回文子串，更不是最长回文子串。所以需要进一步判断最长公共子串是否是回文子串。</li><li>时间复杂度O(n<sup>2</sup>)——两层遍历</li><li>空间复杂度O(n<sup>2</sup>)——二维数组</li></ul><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解法三-动态规划-C"><a href="#解法三-动态规划-C" class="headerlink" title="解法三: 动态规划 - C"></a>解法三: 动态规划 - C</h4><h4 id="解法四-中心扩展算法"><a href="#解法四-中心扩展算法" class="headerlink" title="解法四: 中心扩展算法"></a>解法四: 中心扩展算法</h4><h4 id="解法五-Manacher-算法"><a href="#解法五-Manacher-算法" class="headerlink" title="解法五: Manacher 算法"></a>解法五: Manacher 算法</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">最长回文子串</a></li><li><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/5-zui-chang-hui-wen-zi-chuan-by-alexer-660/">最长回文子串Alexer-660解题思路</a></li><li><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/hua-jie-suan-fa-5-zui-chang-hui-wen-zi-chuan-by-de/">画解 LeetCode：5. 最长回文子串</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/09/w3v1nH.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/LeetCode/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="LeetCode" scheme="https://www.gaotianyang.top/tags/LeetCode/"/>
    
    <category term="中等" scheme="https://www.gaotianyang.top/tags/%E4%B8%AD%E7%AD%89/"/>
    
    <category term="每日一练" scheme="https://www.gaotianyang.top/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
    <category term="最长回文子串" scheme="https://www.gaotianyang.top/tags/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>二刷鬼笑石</title>
    <link href="https://www.gaotianyang.top/archives/20200906dfbe8392/"/>
    <id>https://www.gaotianyang.top/archives/20200906dfbe8392/</id>
    <published>2020-09-06T10:35:14.000Z</published>
    <updated>2021-01-30T04:16:46.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/13/stRd7q.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>第二次夜爬，可以更从容的欣赏周围的景色</p></blockquote><p><img src="https://s3.ax1x.com/2021/01/13/stR6c4.jpg" alt="远眺"><br><img src="https://s3.ax1x.com/2021/01/13/stRcjJ.jpg" alt="头文字D既视感"><br><img src="https://s3.ax1x.com/2021/01/13/stRy3F.jpg" alt="街灯照亮城市的轮廓"><br><img src="https://s3.ax1x.com/2021/01/13/stRs9U.jpg" alt="众星朗朗不如孤月独明"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/13/stRd7q.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="西山国家森林公园" scheme="https://www.gaotianyang.top/tags/%E8%A5%BF%E5%B1%B1%E5%9B%BD%E5%AE%B6%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD/"/>
    
    <category term="鬼笑石" scheme="https://www.gaotianyang.top/tags/%E9%AC%BC%E7%AC%91%E7%9F%B3/"/>
    
  </entry>
  
</feed>
