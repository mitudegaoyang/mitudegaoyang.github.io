<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog-Hexo</title>
  
  
  <link href="https://www.gaotianyang.top/atom.xml" rel="self"/>
  
  <link href="https://www.gaotianyang.top/"/>
  <updated>2025-02-23T13:15:51.811Z</updated>
  <id>https://www.gaotianyang.top/</id>
  
  <author>
    <name>迷途的羔羊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python数据结构</title>
    <link href="https://www.gaotianyang.top/archives/2025030222c892e4/"/>
    <id>https://www.gaotianyang.top/archives/2025030222c892e4/</id>
    <published>2025-03-02T01:05:00.000Z</published>
    <updated>2025-02-23T13:15:51.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDl6S.jpg" alt="首屏图"></p><!--<https://s21.ax1x.com/2025/02/23/pElDQl8.jpg>--><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1. 列表"></a>1. 列表</h2><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="2-字典"><a href="#2-字典" class="headerlink" title="2. 字典"></a>2. 字典</h2><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="3-元组和集合"><a href="#3-元组和集合" class="headerlink" title="3. 元组和集合"></a>3. 元组和集合</h2><p><a href="/archives/202502214537ccef/#Day-7：数据结构">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个程序，统计一段文本中每个单词的出现次数。</li><li>编写一个程序，合并两个列表并去重。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDl6S.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;
&lt;!--
&lt;https://s21.ax1x.com/2025/02/23/pElDQl8.jpg&gt;
--&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="数据结构" scheme="https://www.gaotianyang.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="列表" scheme="https://www.gaotianyang.top/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="字典" scheme="https://www.gaotianyang.top/tags/%E5%AD%97%E5%85%B8/"/>
    
    <category term="元组和集合" scheme="https://www.gaotianyang.top/tags/%E5%85%83%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="https://www.gaotianyang.top/archives/20250228c8f562d1/"/>
    <id>https://www.gaotianyang.top/archives/20250228c8f562d1/</id>
    <published>2025-02-28T01:04:54.000Z</published>
    <updated>2025-02-23T01:17:47.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDMSf.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h2><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="2-函数参数与返回值"><a href="#2-函数参数与返回值" class="headerlink" title="2. 函数参数与返回值"></a>2. 函数参数与返回值</h2><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="3-局部变量与全局变量"><a href="#3-局部变量与全局变量" class="headerlink" title="3. 局部变量与全局变量"></a>3. 局部变量与全局变量</h2><p><a href="/archives/202502214537ccef/#Day-5-6：函数">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个函数，计算两个数的最大公约数（GCD）。</li><li>编写一个函数，判断一个字符串是否是回文。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDMSf.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="函数" scheme="https://www.gaotianyang.top/tags/%E5%87%BD%E6%95%B0/"/>
    
    <category term="定义函数" scheme="https://www.gaotianyang.top/tags/%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/"/>
    
    <category term="函数参数与返回值" scheme="https://www.gaotianyang.top/tags/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    
    <category term="局部变量与全局变量" scheme="https://www.gaotianyang.top/tags/%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%8E%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python控制流程</title>
    <link href="https://www.gaotianyang.top/archives/20250226d92cbff1/"/>
    <id>https://www.gaotianyang.top/archives/20250226d92cbff1/</id>
    <published>2025-02-26T00:58:25.000Z</published>
    <updated>2025-02-24T14:09:30.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDnYt.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1. 条件语句"></a>1. 条件语句</h2><h3 id="1-1-条件语句的解释"><a href="#1-1-条件语句的解释" class="headerlink" title="1.1. 条件语句的解释"></a>1.1. 条件语句的解释</h3><p>条件语句用于根据特定条件执行不同的代码块。其用途在于根据程序运行时的数据做出决策。常见使用场景包括：</p><ul><li>根据用户输入执行不同的操作。</li><li>根据数据的状态选择不同的处理逻辑。</li><li>在循环中根据条件提前退出或继续执行。</li></ul><h3 id="1-2-条件语句的代码示例"><a href="#1-2-条件语句的代码示例" class="headerlink" title="1.2. 条件语句的代码示例"></a>1.2. 条件语句的代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断一个数字是否为正数</span></span><br><span class="line">number = int(input(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> number &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;这是一个正数&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> number &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;这是一个负数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;这是零&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-初学者常见的错误或误解"><a href="#1-3-初学者常见的错误或误解" class="headerlink" title="1.3. 初学者常见的错误或误解"></a>1.3. 初学者常见的错误或误解</h3><h4 id="错误-1：忘记使用冒号（-）在条件语句的末尾"><a href="#错误-1：忘记使用冒号（-）在条件语句的末尾" class="headerlink" title="错误 1：忘记使用冒号（:）在条件语句的末尾"></a>错误 1：忘记使用冒号（:）在条件语句的末尾</h4><ul><li><strong>避免方法</strong>: 记住条件语句和循环语句的末尾需要加上冒号。</li></ul><h4 id="错误-2：不理解elif和else的区别"><a href="#错误-2：不理解elif和else的区别" class="headerlink" title="错误 2：不理解elif和else的区别"></a>错误 2：不理解<code>elif</code>和<code>else</code>的区别</h4><ul><li><strong>避免方法</strong>: <code>elif</code>用于检查多个条件，<code>else</code>用于处理所有条件都不满足的情况。</li></ul><h4 id="错误-3：误用逻辑运算符"><a href="#错误-3：误用逻辑运算符" class="headerlink" title="错误 3：误用逻辑运算符"></a>错误 3：误用逻辑运算符</h4><ul><li><strong>避免方法</strong>: 使用<code>and</code>、<code>or</code>和<code>not</code>来组合条件时，确保逻辑关系正确。</li></ul><h3 id="1-4-实际应用场景"><a href="#1-4-实际应用场景" class="headerlink" title="1.4. 实际应用场景"></a>1.4. 实际应用场景</h3><ul><li><strong>用户权限管理</strong>: 根据用户的角色或权限级别显示不同的页面或功能。</li><li><strong>游戏逻辑</strong>: 根据玩家的选择或游戏状态执行不同的操作。</li></ul><h3 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5. 练习题"></a>1.5. 练习题</h3><h4 id="题目-1：根据分数计算等级"><a href="#题目-1：根据分数计算等级" class="headerlink" title="题目 1：根据分数计算等级"></a>题目 1：根据分数计算等级</h4><ul><li>编写一个程序，根据用户输入的分数，输出相应的等级（例如，90 分以上为 A，80-89 分为 B，依此类推）。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1：根据分数计算等级">参考答案</a></p></blockquote><h4 id="题目-2：判断闰年"><a href="#题目-2：判断闰年" class="headerlink" title="题目 2：判断闰年"></a>题目 2：判断闰年</h4><ul><li>编写一个程序，判断一个年份是否为闰年。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2：判断闰年">参考答案</a></p></blockquote><h4 id="题目-3：计算月份天数"><a href="#题目-3：计算月份天数" class="headerlink" title="题目 3：计算月份天数"></a>题目 3：计算月份天数</h4><ul><li>编写一个程序，根据用户输入的月份，输出该月份的天数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h3 id="1-6-深入思考的问题"><a href="#1-6-深入思考的问题" class="headerlink" title="1.6. 深入思考的问题"></a>1.6. 深入思考的问题</h3><p>条件语句在程序设计中扮演着至关重要的角色。请思考一下，如何在复杂的业务逻辑中合理地使用条件语句，以提高代码的可读性和可维护性？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h2><h3 id="2-1-循环的解释"><a href="#2-1-循环的解释" class="headerlink" title="2.1. 循环的解释"></a>2.1. 循环的解释</h3><p>循环用于重复执行一段代码，直到满足特定条件为止。其用途在于简化重复性任务，提高代码的效率。常见使用场景包括：</p><ul><li>遍历列表、元组、字典等数据结构。</li><li>执行固定次数的操作。</li><li>在条件满足时不断执行某段代码，直到条件不再满足。</li></ul><h3 id="2-2-循环的代码示例"><a href="#2-2-循环的代码示例" class="headerlink" title="2.2. 循环的代码示例"></a>2.2. 循环的代码示例</h3><h4 id="for-循环示例"><a href="#for-循环示例" class="headerlink" title="for 循环示例"></a>for 循环示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到5的数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h4 id="while-循环示例"><a href="#while-循环示例" class="headerlink" title="while 循环示例"></a>while 循环示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到5的数字</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span>:</span><br><span class="line">    print(count)</span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-3-初学者常见的错误或误解"><a href="#2-3-初学者常见的错误或误解" class="headerlink" title="2.3. 初学者常见的错误或误解"></a>2.3. 初学者常见的错误或误解</h3><h4 id="错误-1-忘记更新循环变量"><a href="#错误-1-忘记更新循环变量" class="headerlink" title="错误 1: 忘记更新循环变量"></a>错误 1: 忘记更新循环变量</h4><ul><li><strong>避免方法</strong>: 在<code>while</code>循环中，确保循环变量在每次迭代中被更新，以避免无限循环。</li></ul><h4 id="错误-2-不理解range函数的参数"><a href="#错误-2-不理解range函数的参数" class="headerlink" title="错误 2: 不理解range函数的参数"></a>错误 2: 不理解<code>range</code>函数的参数</h4><ul><li><strong>避免方法</strong>: <code>range(start, stop, step)</code>中的<code>stop</code>是非包含的，<code>start</code>和<code>step</code>是可选参数，默认值分别为 0 和 1。</li></ul><h4 id="错误-3-在循环中使用不当的条件"><a href="#错误-3-在循环中使用不当的条件" class="headerlink" title="错误 3: 在循环中使用不当的条件"></a>错误 3: 在循环中使用不当的条件</h4><ul><li><strong>避免方法</strong>: 确保循环条件能够正确反映退出循环的逻辑，避免逻辑错误导致的无限循环或不必要的迭代。</li></ul><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><ul><li><strong>数据处理</strong>: 遍历数据集进行处理或分析。</li><li><strong>用户交互</strong>: 在用户输入不符合要求时，反复提示用户输入。</li></ul><h3 id="2-5-练习题"><a href="#2-5-练习题" class="headerlink" title="2.5. 练习题"></a>2.5. 练习题</h3><h4 id="题目-1-循环输出平方-初级"><a href="#题目-1-循环输出平方-初级" class="headerlink" title="题目 1: 循环输出平方(初级)"></a>题目 1: 循环输出平方(初级)</h4><ul><li>编写一个程序，使用<code>for</code>循环打印 1 到 10 的平方。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-循环输出平方-初级">参考答案</a></p></blockquote><h4 id="题目-2-计算累加值-中级"><a href="#题目-2-计算累加值-中级" class="headerlink" title="题目 2: 计算累加值(中级)"></a>题目 2: 计算累加值(中级)</h4><ul><li>编写一个程序，使用<code>while</code>循环计算 1 到 100 的和。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h4 id="题目-3-打印列表中的偶数-高级"><a href="#题目-3-打印列表中的偶数-高级" class="headerlink" title="题目 3: 打印列表中的偶数(高级)"></a>题目 3: 打印列表中的偶数(高级)</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，并打印出列表中所有偶数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：计算月份天数">参考答案</a></p></blockquote><h3 id="2-6-深入思考的问题"><a href="#2-6-深入思考的问题" class="headerlink" title="2.6. 深入思考的问题"></a>2.6. 深入思考的问题</h3><p>循环在程序设计中是非常强大的工具。请思考一下，如何在设计循环时避免常见的逻辑错误，并确保循环的效率和可读性？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="3-break-和-continue"><a href="#3-break-和-continue" class="headerlink" title="3. break 和 continue"></a>3. <code>break</code> 和 <code>continue</code></h2><h3 id="3-1-break-和-continue-的解释"><a href="#3-1-break-和-continue-的解释" class="headerlink" title="3.1. break 和 continue 的解释"></a>3.1. <code>break</code> 和 <code>continue</code> 的解释</h3><p><code>break</code> 和 <code>continue</code> 是用于控制循环流程的关键字。它们的用途在于根据特定条件提前退出循环或跳过当前迭代，继续下一次迭代。常见使用场景包括：</p><ul><li><strong><code>break</code></strong>: 在找到特定条件满足的元素后，立即退出循环，避免不必要的迭代。</li><li><strong><code>continue</code></strong>: 跳过当前迭代中剩余的代码，直接进入下一次迭代，适用于需要跳过某些特定条件的情况。</li></ul><h3 id="3-2-break-和-continue-的代码示例"><a href="#3-2-break-和-continue-的代码示例" class="headerlink" title="3.2. break 和 continue 的代码示例"></a>3.2. <code>break</code> 和 <code>continue</code> 的代码示例</h3><h4 id="break-示例"><a href="#break-示例" class="headerlink" title="break 示例"></a><code>break</code> 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到第一个大于5的数字并退出循环</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">5</span>:</span><br><span class="line">        print(<span class="string">f&quot;找到第一个大于5的数字: <span class="subst">&#123;number&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="continue-示例"><a href="#continue-示例" class="headerlink" title="continue 示例"></a><code>continue</code> 示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1到10的奇数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h3 id="3-3-初学者常见的错误或误解"><a href="#3-3-初学者常见的错误或误解" class="headerlink" title="3.3. 初学者常见的错误或误解"></a>3.3. 初学者常见的错误或误解</h3><h4 id="错误-1-在循环外使用break或continue"><a href="#错误-1-在循环外使用break或continue" class="headerlink" title="错误 1: 在循环外使用break或continue"></a>错误 1: 在循环外使用<code>break</code>或<code>continue</code></h4><ul><li><strong>避免方法</strong>: <code>break</code>和<code>continue</code>只能在循环内部使用，否则会导致语法错误。</li></ul><h4 id="错误-2-break和continue会改变循环变量的值"><a href="#错误-2-break和continue会改变循环变量的值" class="headerlink" title="错误 2: break和continue会改变循环变量的值"></a>错误 2: <code>break</code>和<code>continue</code>会改变循环变量的值</h4><ul><li><strong>避免方法</strong>: <code>break</code>会立即退出循环，<code>continue</code>会跳过当前迭代，但不会改变循环变量的值。</li></ul><h4 id="错误-3-在嵌套循环中使用break或continue只会影响最内层循环"><a href="#错误-3-在嵌套循环中使用break或continue只会影响最内层循环" class="headerlink" title="错误 3: 在嵌套循环中使用break或continue只会影响最内层循环"></a>错误 3: 在嵌套循环中使用<code>break</code>或<code>continue</code>只会影响最内层循环</h4><ul><li><strong>避免方法</strong>: 确认<code>break</code>和<code>continue</code>的作用范围，必要时使用标志变量来控制外层循环。</li></ul><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><ul><li><strong><code>break</code></strong>: 在搜索算法中，找到目标元素后立即退出循环，提高效率。</li><li><strong><code>continue</code></strong>: 在数据处理中，跳过不符合条件的数据，减少不必要的计算。</li></ul><h3 id="3-5-练习题"><a href="#3-5-练习题" class="headerlink" title="3.5. 练习题"></a>3.5. 练习题</h3><h4 id="题目-1-找到第一个负数"><a href="#题目-1-找到第一个负数" class="headerlink" title="题目 1: 找到第一个负数"></a>题目 1: 找到第一个负数</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，找到第一个负数并打印出来，然后退出循环。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-找到第一个负数">参考答案</a></p></blockquote><h4 id="题目-2-使用-while-找到奇数"><a href="#题目-2-使用-while-找到奇数" class="headerlink" title="题目 2: 使用 while 找到奇数"></a>题目 2: 使用 while 找到奇数</h4><ul><li>编写一个程序，使用<code>while</code>循环打印 1 到 20 之间的所有奇数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-使用-while-找到奇数">参考答案</a></p></blockquote><h4 id="题目-3-使用-for-找到奇数"><a href="#题目-3-使用-for-找到奇数" class="headerlink" title="题目 3: 使用 for 找到奇数"></a>题目 3: 使用 for 找到奇数</h4><ul><li>编写一个程序，使用<code>for</code>循环遍历一个列表，跳过所有偶数，打印所有奇数。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-使用-for-找到奇数">参考答案</a></p></blockquote><h3 id="3-6-深入思考的问题"><a href="#3-6-深入思考的问题" class="headerlink" title="3.6. 深入思考的问题"></a>3.6. 深入思考的问题</h3><p><code>break</code> 和 <code>continue</code> 在循环控制中非常有用，但过度使用可能会降低代码的可读性。请思考一下，如何在使用<code>break</code> 和 <code>continue</code> 时保持代码的清晰和简洁？</p><p><a href="/archives/202502214537ccef/#Day-3-4：控制流程">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个程序，判断用户输入的数字是奇数还是偶数。</li><li>编写一个程序，打印 1 到 100 的所有质数。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDnYt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="控制流程" scheme="https://www.gaotianyang.top/tags/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    
    <category term="条件语句" scheme="https://www.gaotianyang.top/tags/%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    
    <category term="循环" scheme="https://www.gaotianyang.top/tags/%E5%BE%AA%E7%8E%AF/"/>
    
    <category term="break和continue" scheme="https://www.gaotianyang.top/tags/break%E5%92%8Ccontinue/"/>
    
  </entry>
  
  <entry>
    <title>Python的基本语法</title>
    <link href="https://www.gaotianyang.top/archives/2025022423fce97e/"/>
    <id>https://www.gaotianyang.top/archives/2025022423fce97e/</id>
    <published>2025-02-24T13:34:34.000Z</published>
    <updated>2025-02-23T13:46:24.153Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDmFI.jpg" alt="首屏图"></p><a id="more"></a><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h2><h3 id="1-1-变量与数据类型的简明解释"><a href="#1-1-变量与数据类型的简明解释" class="headerlink" title="1.1. 变量与数据类型的简明解释"></a>1.1. 变量与数据类型的简明解释</h3><p><strong>变量</strong>是用于存储数据的容器，每个变量都有一个名称和一个值。<strong>数据类型</strong>是变量所存储数据的种类，决定了数据可以进行的操作。</p><h4 id="1-1-1-用途"><a href="#1-1-1-用途" class="headerlink" title="1.1.1. 用途"></a>1.1.1. 用途</h4><ul><li>变量用于存储程序运行时的数据。</li><li>数据类型定义了数据的性质（如数字、文本、布尔值等）以及可以对其执行的操作。</li></ul><h4 id="1-1-2-常见使用场景"><a href="#1-1-2-常见使用场景" class="headerlink" title="1.1.2. 常见使用场景"></a>1.1.2. 常见使用场景</h4><ul><li>存储用户输入。</li><li>在计算中保存中间结果。</li><li>表示程序的状态或配置。</li></ul><h3 id="1-2-简单代码示例"><a href="#1-2-简单代码示例" class="headerlink" title="1.2. 简单代码示例"></a>1.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量与数据类型示例</span></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span>  <span class="comment"># 字符串类型 (str)</span></span><br><span class="line">age = <span class="number">25</span>       <span class="comment"># 整数类型 (int)</span></span><br><span class="line">height = <span class="number">1.75</span>  <span class="comment"># 浮点数类型 (float)</span></span><br><span class="line">is_student = <span class="literal">True</span>  <span class="comment"># 布尔类型 (bool)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印变量及其类型</span></span><br><span class="line">print(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>, Type: <span class="subst">&#123;type(name)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Age: <span class="subst">&#123;age&#125;</span>, Type: <span class="subst">&#123;type(age)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Height: <span class="subst">&#123;height&#125;</span>, Type: <span class="subst">&#123;type(height)&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Is Student: <span class="subst">&#123;is_student&#125;</span>, Type: <span class="subst">&#123;type(is_student)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>含义解读:</p><ul><li><code>print()</code>：这是 Python 的内置函数，用于将指定的内容输出到控制台或终端。</li><li><code>f&quot;...&quot;</code>：这是一个 f-string（格式化字符串字面量），允许在字符串中嵌入表达式。f 前缀表示这是一个格式化字符串。</li><li><code>&#123;name&#125;</code>：这部分会被 name 变量的值替换。在这个例子中，name 的值是 “Alice”。</li><li><code>&#123;type(name)&#125;</code>：这部分会调用 type() 函数来获取 name 变量的数据类型，并将其结果插入到字符串中。name 是一个字符串类型 (str)，所以 <code>&#123;type(name)&#125;</code> 会输出 <code>&lt;class &#39;str&#39;&gt;</code>。</li></ul><h3 id="1-3-初学者常见的三个错误或误解"><a href="#1-3-初学者常见的三个错误或误解" class="headerlink" title="1.3. 初学者常见的三个错误或误解"></a>1.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：变量未定义直接使用"><a href="#错误-1：变量未定义直接使用" class="headerlink" title="错误 1：变量未定义直接使用"></a>错误 1：变量未定义直接使用</h4><ul><li><strong>问题</strong>：尝试使用未赋值的变量。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(undefined_variable)</span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：确保变量在使用前已赋值。</p></li></ul><h4 id="错误-2：混淆数据类型"><a href="#错误-2：混淆数据类型" class="headerlink" title="错误 2：混淆数据类型"></a>错误 2：混淆数据类型</h4><ul><li><strong>问题</strong>：对数据类型理解不清，导致操作错误。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="string">&quot;10&quot;</span> + <span class="number">5</span>  <span class="comment"># 尝试将字符串与整数相加</span></span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：明确数据类型，必要时进行类型转换（如 <code>int(&quot;10&quot;) + 5</code>）。</p></li></ul><h4 id="错误-3：变量命名不规范"><a href="#错误-3：变量命名不规范" class="headerlink" title="错误 3：变量命名不规范"></a>错误 3：变量命名不规范</h4><ul><li><strong>问题</strong>：使用不清晰的变量名，导致代码可读性差。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>  <span class="comment"># 变量名无意义</span></span><br></pre></td></tr></table></figure></li><li><p><strong>解决方法</strong>：使用描述性变量名（如 <code>age</code> 而不是 <code>a</code>）。</p></li></ul><h3 id="1-4-变量与数据类型的实际应用场景"><a href="#1-4-变量与数据类型的实际应用场景" class="headerlink" title="1.4. 变量与数据类型的实际应用场景"></a>1.4. 变量与数据类型的实际应用场景</h3><h4 id="场景-1：用户输入处理"><a href="#场景-1：用户输入处理" class="headerlink" title="场景 1：用户输入处理"></a>场景 1：用户输入处理</h4><ul><li><strong>描述</strong>：从用户输入中获取数据并存储到变量中，用于后续处理。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;Hello, <span class="subst">&#123;user_name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="场景-2：数学计算"><a href="#场景-2：数学计算" class="headerlink" title="场景 2：数学计算"></a>场景 2：数学计算</h4><ul><li><strong>描述</strong>：使用变量存储数值数据，进行数学运算。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">radius = <span class="number">5</span></span><br><span class="line">area = <span class="number">3.14</span> * radius ** <span class="number">2</span></span><br><span class="line">print(<span class="string">f&quot;Area of the circle: <span class="subst">&#123;area&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-5-练习题"><a href="#1-5-练习题" class="headerlink" title="1.5. 练习题"></a>1.5. 练习题</h3><h4 id="题目-1：基础练习"><a href="#题目-1：基础练习" class="headerlink" title="题目 1：基础练习"></a>题目 1：基础练习</h4><ul><li>编写一个程序，要求用户输入姓名和年龄，然后输出一条消息，如“你好，[姓名]！你今年[年龄]岁。”</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1：基础练习">参考答案</a></p></blockquote><h4 id="题目-2：数据类型转换"><a href="#题目-2：数据类型转换" class="headerlink" title="题目 2：数据类型转换"></a>题目 2：数据类型转换</h4><ul><li>编写一个程序，要求用户输入两个数字（字符串形式），将它们转换为整数并计算它们的和。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2：数据类型转换">参考答案</a></p></blockquote><h4 id="题目-3：复杂逻辑"><a href="#题目-3：复杂逻辑" class="headerlink" title="题目 3：复杂逻辑"></a>题目 3：复杂逻辑</h4><ul><li>编写一个程序，要求用户输入一个圆的半径（浮点数），计算并输出圆的面积和周长。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3：复杂逻辑">参考答案</a></p></blockquote><h3 id="1-6-课后思考"><a href="#1-6-课后思考" class="headerlink" title="1.6. 课后思考"></a>1.6. 课后思考</h3><p><strong>问题</strong>: 在 Python 中，变量不需要显式声明类型，而是根据赋值自动推断类型。这种动态类型系统的优点是什么？它可能带来哪些潜在问题？在实际开发中，如何平衡灵活性和代码的可靠性？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="2-输入输出"><a href="#2-输入输出" class="headerlink" title="2. 输入输出"></a>2. 输入输出</h2><h3 id="2-1-解释输入输出（print-和-input-）"><a href="#2-1-解释输入输出（print-和-input-）" class="headerlink" title="2.1. 解释输入输出（print() 和 input()）"></a>2.1. 解释输入输出（<code>print()</code> 和 <code>input()</code>）</h3><p>在 Python 中，<code>print()</code> 和 <code>input()</code> 是用于处理输入和输出的基本函数。</p><h4 id="2-1-1-用途"><a href="#2-1-1-用途" class="headerlink" title="2.1.1. 用途"></a>2.1.1. 用途</h4><ul><li><strong><code>print()</code></strong>: 用于将信息输出到控制台。它可以输出字符串、数字、变量值等。<code>print()</code> 是调试和显示程序结果的重要工具。</li><li><strong><code>input()</code></strong>: 用于从用户那里获取输入。它会暂停程序执行，等待用户输入，并将输入作为字符串返回。<code>input()</code> 常用于需要用户交互的程序中。</li></ul><h4 id="2-1-2-常见使用场景"><a href="#2-1-2-常见使用场景" class="headerlink" title="2.1.2. 常见使用场景"></a>2.1.2. 常见使用场景</h4><ul><li><code>print()</code>: 显示计算结果、调试信息、用户提示等。</li><li><code>input()</code>: 获取用户输入，如用户名、密码、选项选择等。</li></ul><h3 id="2-2-简单代码示例"><a href="#2-2-简单代码示例" class="headerlink" title="2.2. 简单代码示例"></a>2.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 input() 获取用户输入</span></span><br><span class="line">name = input(<span class="string">&quot;请输入你的名字: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 print() 输出结果</span></span><br><span class="line">print(<span class="string">&quot;你好, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-初学者常见的三个错误或误解"><a href="#2-3-初学者常见的三个错误或误解" class="headerlink" title="2.3. 初学者常见的三个错误或误解"></a>2.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：-input-返回的是字符串"><a href="#错误-1：-input-返回的是字符串" class="headerlink" title="错误 1： input() 返回的是字符串"></a>错误 1： <code>input()</code> 返回的是字符串</h4><ul><li><strong>误解</strong>: 初学者可能认为 <code>input()</code> 返回的是数字或其他类型的数据。</li><li><strong>避免方法</strong>: 如果需要数字，记得使用 <code>int()</code> 或 <code>float()</code> 进行类型转换。</li></ul><h4 id="错误-2：-print-的格式化问题"><a href="#错误-2：-print-的格式化问题" class="headerlink" title="错误 2： print() 的格式化问题"></a>错误 2： <code>print()</code> 的格式化问题</h4><ul><li><strong>误解</strong>: 初学者可能不知道如何使用 <code>print()</code> 格式化输出。</li><li><strong>避免方法</strong>: 学习使用 f-string、<code>format()</code> 或 <code>%</code> 格式化方法。</li></ul><h4 id="错误-3：-忽略-input-的提示信息"><a href="#错误-3：-忽略-input-的提示信息" class="headerlink" title="错误 3： 忽略 input() 的提示信息"></a>错误 3： 忽略 <code>input()</code> 的提示信息</h4><ul><li><strong>误解</strong>: 初学者可能忘记在 <code>input()</code> 中提供提示信息，导致用户不知道需要输入什么。</li><li><strong>避免方法</strong>: 始终在 <code>input()</code> 中包含清晰的提示信息。</li></ul><h3 id="2-4-实际应用场景"><a href="#2-4-实际应用场景" class="headerlink" title="2.4. 实际应用场景"></a>2.4. 实际应用场景</h3><h4 id="场景-1：-用户注册系统"><a href="#场景-1：-用户注册系统" class="headerlink" title="场景 1： 用户注册系统"></a>场景 1： 用户注册系统</h4><ul><li><strong>描述</strong>：使用 <code>input()</code> 获取用户的用户名和密码，使用 <code>print()</code> 显示注册成功的信息。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;Enter your name: &quot;</span>)</span><br><span class="line">user_pwd = input(<span class="string">&quot;Enter your password: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;successfully registered, <span class="subst">&#123;user_name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="场景-2：-简单的计算器"><a href="#场景-2：-简单的计算器" class="headerlink" title="场景 2： 简单的计算器"></a>场景 2： 简单的计算器</h4><ul><li><strong>描述</strong>：使用 <code>input()</code> 获取用户输入的两个数字和操作符，使用 <code>print()</code> 显示计算结果。</li><li><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_1 = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">num_2 = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">sum = int(num_1) + int(num_2)</span><br><span class="line">print(<span class="string">f&quot;两个数字和是： <span class="subst">&#123;sum&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-练习题"><a href="#2-5-练习题" class="headerlink" title="2.5. 练习题"></a>2.5. 练习题</h3><h4 id="题目-1-展示输入-初级"><a href="#题目-1-展示输入-初级" class="headerlink" title="题目 1: 展示输入(初级)"></a>题目 1: 展示输入(初级)</h4><ul><li>编写一个程序，要求用户输入他们的年龄，并输出他们出生的年份。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-展示输入-初级">参考答案</a></p></blockquote><h4 id="题目-2-计算输入-中级"><a href="#题目-2-计算输入-中级" class="headerlink" title="题目 2: 计算输入(中级)"></a>题目 2: 计算输入(中级)</h4><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-计算输入-中级">参考答案</a></p></blockquote><h4 id="题目-3-处理输入-高级"><a href="#题目-3-处理输入-高级" class="headerlink" title="题目 3: 处理输入(高级)"></a>题目 3: 处理输入(高级)</h4><ul><li>编写一个程序，要求用户输入一个字符串，并输出该字符串的反转形式。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-处理输入-高级">参考答案</a></p></blockquote><h3 id="2-6-课后思考"><a href="#2-6-课后思考" class="headerlink" title="2.6. 课后思考"></a>2.6. 课后思考</h3><p><strong>问题</strong>: 在现代应用程序中，图形用户界面（GUI）和命令行界面（CLI）都广泛使用。你认为在什么情况下使用 <code>print()</code> 和 <code>input()</code> 是最合适的？在什么情况下可能需要考虑更复杂的输入输出方式？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="3-基本运算符"><a href="#3-基本运算符" class="headerlink" title="3. 基本运算符"></a>3. 基本运算符</h2><h3 id="3-1-解释基本运算符（算术、比较、逻辑）"><a href="#3-1-解释基本运算符（算术、比较、逻辑）" class="headerlink" title="3.1. 解释基本运算符（算术、比较、逻辑）"></a>3.1. 解释基本运算符（算术、比较、逻辑）</h3><p>在 Python 中，基本运算符分为三类：</p><ul><li><strong>算术运算符</strong>: 用于执行数学运算，如加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、取整除法（<code>//</code>）、取余（<code>%</code>）和幂运算（<code>**</code>）。</li><li><strong>比较运算符</strong>: 用于比较两个值，返回布尔值（<code>True</code> 或 <code>False</code>），如等于（<code>==</code>）、不等于（<code>!=</code>）、大于（<code>&gt;</code>）、小于（<code>&lt;</code>）、大于等于（<code>&gt;=</code>）、小于等于（<code>&lt;=</code>）。</li><li><strong>逻辑运算符</strong>: 用于组合多个条件，返回布尔值，如与（<code>and</code>）、或（<code>or</code>）、非（<code>not</code>）。</li></ul><h4 id="3-1-1-常见使用场景"><a href="#3-1-1-常见使用场景" class="headerlink" title="3.1.1. 常见使用场景"></a>3.1.1. 常见使用场景</h4><ul><li><strong>算术运算符</strong>: 数学计算、数据处理。</li><li><strong>比较运算符</strong>: 条件判断、循环控制。</li><li><strong>逻辑运算符</strong>: 复杂条件组合、逻辑判断。</li></ul><h3 id="3-2-简单代码示例"><a href="#3-2-简单代码示例" class="headerlink" title="3.2. 简单代码示例"></a>3.2. 简单代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(<span class="string">&quot;加法:&quot;</span>, a + b)</span><br><span class="line">print(<span class="string">&quot;取余:&quot;</span>, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算符</span></span><br><span class="line">print(<span class="string">&quot;a 大于 b:&quot;</span>, a &gt; b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">print(<span class="string">&quot;a 大于 5 且 b 小于 5:&quot;</span>, a &gt; <span class="number">5</span> <span class="keyword">and</span> b &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="3-3-初学者常见的三个错误或误解"><a href="#3-3-初学者常见的三个错误或误解" class="headerlink" title="3.3. 初学者常见的三个错误或误解"></a>3.3. 初学者常见的三个错误或误解</h3><h4 id="错误-1：-混淆-和"><a href="#错误-1：-混淆-和" class="headerlink" title="错误 1： 混淆 = 和 =="></a>错误 1： 混淆 <code>=</code> 和 <code>==</code></h4><ul><li><strong>误解</strong>: 初学者可能将赋值运算符 <code>=</code> 和比较运算符 <code>==</code> 混淆。</li><li><strong>避免方法</strong>: 记住 <code>=</code> 用于赋值，<code>==</code> 用于比较。</li></ul><h4 id="错误-2：-忽略运算符优先级"><a href="#错误-2：-忽略运算符优先级" class="headerlink" title="错误 2： 忽略运算符优先级"></a>错误 2： 忽略运算符优先级</h4><ul><li><strong>误解</strong>: 初学者可能忽略运算符的优先级，导致计算结果错误。</li><li><strong>避免方法</strong>: 使用括号明确运算顺序，或查阅运算符优先级表。</li></ul><h4 id="错误-3：-逻辑运算符的短路行为"><a href="#错误-3：-逻辑运算符的短路行为" class="headerlink" title="错误 3： 逻辑运算符的短路行为"></a>错误 3： 逻辑运算符的短路行为</h4><ul><li><strong>误解</strong>: 初学者可能不理解 <code>and</code> 和 <code>or</code> 的短路行为（即一旦确定结果，就不再计算后续表达式）。</li><li><strong>避免方法</strong>: 学习逻辑运算符的短路特性，并在必要时利用它优化代码。</li></ul><h3 id="3-4-实际应用场景"><a href="#3-4-实际应用场景" class="headerlink" title="3.4. 实际应用场景"></a>3.4. 实际应用场景</h3><h4 id="场景-1：-计算器程序"><a href="#场景-1：-计算器程序" class="headerlink" title="场景 1： 计算器程序"></a>场景 1： 计算器程序</h4><ul><li>使用算术运算符实现基本的加减乘除运算。</li></ul><h4 id="场景-2：-用户输入验证"><a href="#场景-2：-用户输入验证" class="headerlink" title="场景 2： 用户输入验证"></a>场景 2： 用户输入验证</h4><ul><li>使用比较和逻辑运算符验证用户输入是否符合要求（如年龄在特定范围内）。</li></ul><h3 id="3-5-练习题"><a href="#3-5-练习题" class="headerlink" title="3.5. 练习题"></a>3.5. 练习题</h3><h4 id="题目-1-计算和、差、积和商-初级"><a href="#题目-1-计算和、差、积和商-初级" class="headerlink" title="题目 1: 计算和、差、积和商(初级)"></a>题目 1: 计算和、差、积和商(初级)</h4><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-1-计算和、差、积和商-初级">参考答案</a></p></blockquote><h4 id="题目-2-判断闰年-中级"><a href="#题目-2-判断闰年-中级" class="headerlink" title="题目 2: 判断闰年(中级)"></a>题目 2: 判断闰年(中级)</h4><ul><li>编写一个程序，要求用户输入一个年份，判断它是否为闰年（闰年规则：能被 4 整除但不能被 100 整除，或者能被 400 整除）。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-2-判断闰年-中级">参考答案</a></p></blockquote><h4 id="题目-3-计算极值-高级"><a href="#题目-3-计算极值-高级" class="headerlink" title="题目 3: 计算极值(高级)"></a>题目 3: 计算极值(高级)</h4><ul><li>编写一个程序，要求用户输入三个数字，并输出其中的最大值和最小值。</li></ul><blockquote><p><a href="/archives/20250223abbb24cd/#题目-3-计算极值-高级">参考答案</a></p></blockquote><h3 id="3-6-课后思考"><a href="#3-6-课后思考" class="headerlink" title="3.6. 课后思考"></a>3.6. 课后思考</h3><p><strong>问题</strong>: 在编写复杂的条件判断时，如何平衡代码的可读性和效率？你认为在什么情况下应该优先考虑可读性，什么情况下应该优先考虑效率？</p><p><a href="/archives/202502214537ccef/#Day-1-2：Python-基础语法">返回</a></p><h2 id="4-课后练习"><a href="#4-课后练习" class="headerlink" title="4. 课后练习"></a>4. 课后练习</h2><ul><li>编写一个简单的计算器程序。</li><li>编写一个程序，询问用户姓名并输出问候语。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDmFI.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="基本语法" scheme="https://www.gaotianyang.top/tags/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
    <category term="变量与数据类型" scheme="https://www.gaotianyang.top/tags/%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="输入输出" scheme="https://www.gaotianyang.top/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    
    <category term="基本运算符" scheme="https://www.gaotianyang.top/tags/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python参考答案</title>
    <link href="https://www.gaotianyang.top/archives/20250223abbb24cd/"/>
    <id>https://www.gaotianyang.top/archives/20250223abbb24cd/</id>
    <published>2025-02-23T13:12:52.000Z</published>
    <updated>2025-02-24T14:29:16.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDufP.jpg" alt="首屏图"></p><a id="more"></a><h2 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h2><h3 id="题目-1：基础练习"><a href="#题目-1：基础练习" class="headerlink" title="题目 1：基础练习"></a><a href="/archives/2025022423fce97e/#题目-1：基础练习">题目 1：基础练习</a></h3><ul><li>编写一个程序，要求用户输入姓名和年龄，然后输出一条消息，如“你好，[姓名]！你今年[年龄]岁。”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;输入你的姓名: &quot;</span>)</span><br><span class="line">user_age = input(<span class="string">&quot;输入你的年龄: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;你好，<span class="subst">&#123;user_name&#125;</span>！你今年<span class="subst">&#123;user_age&#125;</span>岁。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 isdigit() 方法检查用户输入的年龄是否为整数，避免在后续转换为整数时引发 ValueError。</li><li>如果用户输入的年龄不是整数，程序会提示用户输入有效的年龄。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_name = input(<span class="string">&quot;输入你的姓名: &quot;</span>).strip()</span><br><span class="line">user_age = input(<span class="string">&quot;输入你的年龄: &quot;</span>).strip()</span><br><span class="line"><span class="comment"># 检查年龄是否为整数</span></span><br><span class="line"><span class="keyword">if</span> user_age.isdigit():</span><br><span class="line">    user_age = int(user_age)</span><br><span class="line">    print(<span class="string">f&quot;你好，<span class="subst">&#123;user_name&#125;</span>！你今年<span class="subst">&#123;user_age&#125;</span>岁。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的年龄（整数）。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2：数据类型转换"><a href="#题目-2：数据类型转换" class="headerlink" title="题目 2：数据类型转换"></a><a href="/archives/2025022423fce97e/#题目-2：数据类型转换">题目 2：数据类型转换</a></h3><ul><li>编写一个程序，要求用户输入两个数字（字符串形式），将它们转换为整数并计算它们的和。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number_a = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">number_b = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;两数字的和是<span class="subst">&#123;int(number_a)+int(number_b)&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 isdigit() 方法检查用户输入的两个数字是否为整数，避免在后续转换为整数时引发 ValueError。使用 isdigit() 方法检查用户输入的两个数字是否为整数，避免在后续转换为整数时引发 ValueError。</li><li>如使用 try-except 块来捕获 ValueError 异常，确保程序在用户输入无效整数时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    number_a = int(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">    number_b = int(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line">    add = number_a + number_b</span><br><span class="line">    print(<span class="string">f&quot;两数字的和是<span class="subst">&#123;add&#125;</span>。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的整数。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3：复杂逻辑"><a href="#题目-3：复杂逻辑" class="headerlink" title="题目 3：复杂逻辑"></a><a href="/archives/2025022423fce97e/#题目-3：复杂逻辑">题目 3：复杂逻辑</a></h3><ul><li>编写一个程序，要求用户输入一个圆的半径（浮点数），计算并输出圆的面积和周长。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">number_r = input(<span class="string">&quot;输入圆的半径: &quot;</span>)</span><br><span class="line">area = <span class="number">3.14</span> * int(number_r) ** <span class="number">2</span></span><br><span class="line">length = <span class="number">2</span> * <span class="number">3.14</span> * int(number_r)</span><br><span class="line">print(<span class="string">f&quot;圆的面积是<span class="subst">&#123;area&#125;</span>。圆的周长是<span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>使用 strip() 方法去除用户输入的前后空格，提高输入的准确性。</li><li>使用 float() 函数将输入转换为浮点数，以便处理小数。</li><li>使用 try-except 块来捕获 ValueError 异常，确保程序在用户输入无效浮点数时不会崩溃，并给出友好的错误提示。</li><li>使用更精确的常数：使用 math.pi 来代替 3.14，提高计算精度。</li><li>使用 :.2f 格式化输出面积和周长，保留两位小数，使输出更加美观。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    number_r = float(input(<span class="string">&quot;输入圆的半径: &quot;</span>).strip())</span><br><span class="line">    area = math.pi * number_r ** <span class="number">2</span></span><br><span class="line">    length = <span class="number">2</span> * math.pi * number_r</span><br><span class="line">    print(<span class="string">f&quot;圆的面积是<span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>。圆的周长是<span class="subst">&#123;length:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">&quot;请输入有效的浮点数作为半径。&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-变量与数据类型"><a href="#2-变量与数据类型" class="headerlink" title="2. 变量与数据类型"></a>2. 变量与数据类型</h2><h3 id="题目-1-展示输入-初级"><a href="#题目-1-展示输入-初级" class="headerlink" title="题目 1: 展示输入(初级)"></a><a href="/archives/2025022423fce97e/#题目-1-展示输入-初级">题目 1: 展示输入(初级)</a></h3><ul><li>编写一个程序，要求用户输入他的年龄，并输出他出生的年份。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">user_age = input(<span class="string">&quot;输入年龄: &quot;</span>)</span><br><span class="line">current_year = datetime.now().year</span><br><span class="line">birth_year = current_year - int(user_age)</span><br><span class="line">print(<span class="string">f&quot;你的出生年份是<span class="subst">&#123;int(birth_year)&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><p>进一步完善</p><ul><li>去除不必要的类型转换：birth_year 已经是整数，不需要再次转换为整数。</li><li>添加输入验证：确保用户输入的是有效的整数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_birth_year</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        user_age = input(<span class="string">&quot;输入年龄: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> user_age.isdigit():</span><br><span class="line">            user_age = int(user_age)</span><br><span class="line">            current_year = datetime.now().year</span><br><span class="line">            birth_year = current_year - user_age</span><br><span class="line">            print(<span class="string">f&quot;你的出生年份是<span class="subst">&#123;birth_year&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的整数作为年龄。&quot;</span>)</span><br><span class="line"></span><br><span class="line">get_birth_year()</span><br></pre></td></tr></table></figure><h3 id="题目-2-计算输入-中级"><a href="#题目-2-计算输入-中级" class="headerlink" title="题目 2: 计算输入(中级)"></a><a href="/archives/2025022423fce97e/#题目-2-计算输入-中级">题目 2: 计算输入(中级)</a></h3><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_1 = input(<span class="string">&quot;输入数字1: &quot;</span>)</span><br><span class="line">num_2 = input(<span class="string">&quot;输入数字2: &quot;</span>)</span><br><span class="line">sum = int(num_1) + int(num_2)</span><br><span class="line">difference = int(num_1) - int(num_2)</span><br><span class="line">product = int(num_1) * int(num_2)</span><br><span class="line">quotient = int(num_1) / int(num_2)</span><br><span class="line">print(<span class="string">f&quot;两数的和是, <span class="subst">&#123;sum&#125;</span>；两数的差是, <span class="subst">&#123;difference&#125;</span>；两数的积是, <span class="subst">&#123;product&#125;</span>；两数的商是, <span class="subst">&#123;quotient&#125;</span>；&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>输入验证<ul><li>使用 strip() 去除用户输入的前后空格。</li><li>使用 float() 将输入转换为浮点数，以便处理小数。</li><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul></li><li>异常处理<ul><li>捕获 ValueError 异常，处理无效输入。</li><li>捕获其他异常（如除以零），并给出相应的错误提示。</li></ul></li><li>代码格式化<ul><li>使用更清晰的格式化字符串输出结果，每个结果占一行，便于阅读。</li></ul></li><li>变量命名<ul><li>避免使用内置函数名作为变量名，使用 addition、difference、product 和 quotient 作为变量名。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_operations</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num_1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">            num_2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            addition = num_1 + num_2</span><br><span class="line">            difference = num_1 - num_2</span><br><span class="line">            product = num_1 * num_2</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理除以零的情况</span></span><br><span class="line">            <span class="keyword">if</span> num_2 == <span class="number">0</span>:</span><br><span class="line">                quotient = <span class="string">&quot;未定义（除以零）&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                quotient = num_1 / num_2</span><br><span class="line"></span><br><span class="line">            print(<span class="string">f&quot;两数的和是: <span class="subst">&#123;addition&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的差是: <span class="subst">&#123;difference&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的积是: <span class="subst">&#123;product&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;两数的商是: <span class="subst">&#123;quotient&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的数字。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">calculate_operations()</span><br></pre></td></tr></table></figure><h3 id="题目-3-处理输入-高级"><a href="#题目-3-处理输入-高级" class="headerlink" title="题目 3: 处理输入(高级)"></a><a href="/archives/2025022423fce97e/#题目-3-处理输入-高级">题目 3: 处理输入(高级)</a></h3><ul><li>编写一个程序，要求用户输入一个字符串，并输出该字符串的反转形式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = <span class="string">&#x27;&#x27;</span>.join(reversed(user_input))</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用切片<ul><li>使用字符串切片，从字符串末尾开始，每次取一个字符，直到取完所有字符。</li><li>切片操作的基本语法是 start:stop:step，其中：<ul><li>start：表示切片的起始位置，默认为 0。</li><li>stop：表示切片的结束位置，默认为字符串末尾。</li><li>step：表示切片的步长，默认为 1。</li></ul></li><li>start 和 stop 都被省略，表示从字符串的开始到结束。</li><li>step 为 -1，表示从右向左遍历字符串。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = user_input[::<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> user_input:</span><br><span class="line">    reversed_string = char + reversed_string</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用递归</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">user_input = input(<span class="string">&quot;输入一个字符串: &quot;</span>)</span><br><span class="line">reversed_string = reverse_string(user_input)</span><br><span class="line">print(<span class="string">f&quot;输入字符串的反转形式是: <span class="subst">&#123;reversed_string&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-基本运算符"><a href="#3-基本运算符" class="headerlink" title="3. 基本运算符"></a>3. 基本运算符</h2><h3 id="题目-1-计算和、差、积和商-初级"><a href="#题目-1-计算和、差、积和商-初级" class="headerlink" title="题目 1: 计算和、差、积和商(初级)"></a><a href="/archives/2025022423fce97e/#题目-1-计算和、差、积和商-初级">题目 1: 计算和、差、积和商(初级)</a></h3><ul><li>编写一个程序，要求用户输入两个数字，并输出它们的和、差、积和商。</li></ul><p><a href="/archives/20250223abbb24cd/#题目-2-计算输入-中级">答案同上</a></p><h3 id="题目-2-判断闰年-中级"><a href="#题目-2-判断闰年-中级" class="headerlink" title="题目 2: 判断闰年(中级)"></a><a href="/archives/2025022423fce97e/#题目-2-判断闰年-中级">题目 2: 判断闰年(中级)</a></h3><ul><li>编写一个程序，要求用户输入一个年份，判断它是否为闰年（闰年规则：能被 4 整除但不能被 100 整除，或者能被 400 整除）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;输入年份: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理除以零的情况</span></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year %<span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    result = <span class="string">&quot;是&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = <span class="string">&quot;不是&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;result&#125;</span>闰年&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leap_year</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            year = int(input(<span class="string">&quot;输入年份: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理除以零的情况</span></span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year %<span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">                result = <span class="string">&quot;是&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = <span class="string">&quot;不是&quot;</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;result&#125;</span>闰年&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的年份。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">is_leap_year()</span><br></pre></td></tr></table></figure><h3 id="题目-3-计算极值-高级"><a href="#题目-3-计算极值-高级" class="headerlink" title="题目 3: 计算极值(高级)"></a><a href="/archives/2025022423fce97e/#题目-3-计算极值-高级">题目 3: 计算极值(高级)</a></h3><ul><li>编写一个程序，要求用户输入三个数字，并输出其中的最大值和最小值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>))</span><br><span class="line">num2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>))</span><br><span class="line">num3 = float(input(<span class="string">&quot;输入数字3: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输入的数字存储在一个列表中</span></span><br><span class="line">numbers = [num1, num2, num3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化最大值和最小值</span></span><br><span class="line">max_num = numbers[<span class="number">0</span>]</span><br><span class="line">min_num = numbers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环比较每个数字</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> num &gt; max_num:</span><br><span class="line">        max_num = num</span><br><span class="line">    <span class="keyword">if</span> num &lt; min_num:</span><br><span class="line">        min_num = num</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;最大值是: <span class="subst">&#123;max_num&#125;</span>&quot;</span>)</span><br><span class="line">print(<span class="string">f&quot;最小值是: <span class="subst">&#123;min_num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用内置函数 max() 和 min()，无需自己实现。</li><li>使用 try-except 块捕获 ValueError 异常，确保程序在用户输入无效数字时不会崩溃，并给出友好的错误提示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_extremes</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num_1 = float(input(<span class="string">&quot;输入数字1: &quot;</span>).strip())</span><br><span class="line">            num_2 = float(input(<span class="string">&quot;输入数字2: &quot;</span>).strip())</span><br><span class="line">            num_3 = float(input(<span class="string">&quot;输入数字3: &quot;</span>).strip())</span><br><span class="line"></span><br><span class="line">            max_value = max(num_1, num_2, num_3)</span><br><span class="line">            min_value = min(num_1, num_2, num_3)</span><br><span class="line">            print(<span class="string">f&quot;最大值是: <span class="subst">&#123;max_value&#125;</span>&quot;</span>)</span><br><span class="line">            print(<span class="string">f&quot;最小值是: <span class="subst">&#123;min_value&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(<span class="string">&quot;请输入有效的数字。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">calculate_extremes()</span><br></pre></td></tr></table></figure><h2 id="1-条件语句（if、elif、else）"><a href="#1-条件语句（if、elif、else）" class="headerlink" title="1. 条件语句（if、elif、else）"></a>1. 条件语句（if、elif、else）</h2><h3 id="题目-1：根据分数计算等级"><a href="#题目-1：根据分数计算等级" class="headerlink" title="题目 1：根据分数计算等级"></a><a href="/archives/20250226d92cbff1/#题目-1：根据分数计算等级">题目 1：根据分数计算等级</a></h3><ul><li>编写一个程序，根据用户输入的分数，输出相应的等级（例如，90 分以上为 A，80-89 分为 B，依此类推）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">number = int(input(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span>(number&gt;=<span class="number">90</span>):</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">80</span> <span class="keyword">and</span> number&lt;<span class="number">90</span>):</span><br><span class="line">    print(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">70</span> <span class="keyword">and</span> number&lt;<span class="number">80</span>):</span><br><span class="line">    print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(number&gt;<span class="number">60</span> <span class="keyword">and</span> number&lt;<span class="number">70</span>):</span><br><span class="line">    print(<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;E&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>变量命名：将 number 改为 score，使变量名更具描述性。</li><li>条件表达式：使用 80 &lt;= score &lt; 90 这样的链式比较，使条件判断更简洁和易读。</li><li>空格：在运算符两边添加空格，符合 PEP 8 风格指南，提高代码可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">score = int(input(<span class="string">&quot;请输入一个分数: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&quot;C&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">&quot;D&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;E&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2：判断闰年"><a href="#题目-2：判断闰年" class="headerlink" title="题目 2：判断闰年"></a><a href="/archives/20250226d92cbff1/#题目-2：判断闰年">题目 2：判断闰年</a></h3><ul><li>编写一个程序，判断一个年份是否为闰年。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;请输入一个年份: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;平年&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>逻辑表达式：在 if 条件中使用括号来明确逻辑关系，确保 year % 4 == 0 and year % 100 != 0 和 year % 400 == 0 是两个独立的条件，通过 or 连接。</li><li>空格：在运算符两边添加空格，符合 PEP 8 风格指南，提高代码可读性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">year = int(input(<span class="string">&quot;请输入一个年份: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    print(<span class="string">&quot;闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;平年&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-3：计算月份天数"><a href="#题目-3：计算月份天数" class="headerlink" title="题目 3：计算月份天数"></a><a href="/archives/20250226d92cbff1/#题目-3：计算月份天数">题目 3：计算月份天数</a></h3><ul><li>编写一个程序，根据用户输入的月份，输出该月份的天数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mouth = int(input(<span class="string">&quot;请输入月份: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span>(mouth==<span class="number">1</span> <span class="keyword">or</span> mouth==<span class="number">3</span> <span class="keyword">or</span> mouth==<span class="number">5</span> <span class="keyword">or</span> mouth==<span class="number">7</span> <span class="keyword">or</span> mouth==<span class="number">8</span> <span class="keyword">or</span> mouth==<span class="number">10</span> <span class="keyword">or</span> mouth==<span class="number">12</span>):</span><br><span class="line">    print(<span class="string">&quot;31天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span>(mouth==<span class="number">4</span> <span class="keyword">or</span> mouth==<span class="number">6</span> <span class="keyword">or</span> mouth==<span class="number">9</span> <span class="keyword">or</span> mouth==<span class="number">11</span>):</span><br><span class="line">    print(<span class="string">&quot;30天&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;28天&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>使用集合进行条件判断：使用集合 {1, 3, 5, 7, 8, 10, 12} 和 {4, 6, 9, 11} 来判断月份，使代码更简洁和易读。</li><li>处理 2 月特殊情况：虽然题目没有要求处理闰年 2 月的情况，但可以在输出中提示用户 2 月可能是 28 天或 29 天。</li><li>添加无效月份检查：增加对无效月份的检查，提高程序的健壮性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">month = int(input(<span class="string">&quot;请输入月份: &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> month <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>&#125;:</span><br><span class="line">    print(<span class="string">&quot;31天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> month <span class="keyword">in</span> &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>&#125;:</span><br><span class="line">    print(<span class="string">&quot;30天&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> month == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">&quot;28天（或29天，如果是闰年）&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;无效的月份&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h2><h3 id="题目-1-循环输出平方-初级"><a href="#题目-1-循环输出平方-初级" class="headerlink" title="题目 1: 循环输出平方(初级)"></a><a href="/archives/20250226d92cbff1/#题目-1-循环输出平方-初级">题目 1: 循环输出平方(初级)</a></h3><ul><li>编写一个程序，使用 for 循环打印 1 到 10 的平方。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    square = i * i</span><br><span class="line">    print(square)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>简化变量命名：去掉 pingfang 变量，直接在 print 语句中计算平方，减少不必要的变量。</li><li>提高可读性：使用格式化字符串 f”{i} 的平方是 {i * i}” 来输出结果，使输出更清晰易读。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span> 的平方是 <span class="subst">&#123;i * i&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="题目-2-计算累加值-中级"><a href="#题目-2-计算累加值-中级" class="headerlink" title="题目 2: 计算累加值(中级)"></a><a href="/archives/20250226d92cbff1/#题目-2-计算累加值-中级">题目 2: 计算累加值(中级)</a></h3><ul><li>编写一个程序，使用 while 循环计算 1 到 100 的和。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    sum += count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>变量命名<ul><li>将 sum 改为 total，因为 sum 是 Python 内置函数的名称，使用它作为变量名可能会导致潜在的冲突或混淆。</li><li>将 count 改为 number，使变量名更具描述性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">100</span>:</span><br><span class="line">    total += number</span><br><span class="line">    number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><h3 id="题目-3-打印列表中的偶数-高级"><a href="#题目-3-打印列表中的偶数-高级" class="headerlink" title="题目 3: 打印列表中的偶数(高级)"></a><a href="/archives/20250226d92cbff1/#题目-3-打印列表中的偶数-高级">题目 3: 打印列表中的偶数(高级)</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，并打印出列表中所有偶数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写一个程序，使用 for 循环遍历一个列表，并打印出列表中所有偶数。</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 检查数字是否为偶数</span></span><br><span class="line">        print(number)    <span class="comment"># 打印偶数</span></span><br></pre></td></tr></table></figure><h2 id="3-break-和-continue"><a href="#3-break-和-continue" class="headerlink" title="3. break 和 continue"></a>3. break 和 continue</h2><h3 id="题目-1-找到第一个负数"><a href="#题目-1-找到第一个负数" class="headerlink" title="题目 1: 找到第一个负数"></a><a href="/archives/20250226d92cbff1/#题目-1-找到第一个负数">题目 1: 找到第一个负数</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，找到第一个负数并打印出来，然后退出循环。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">6</span>, <span class="number">-7</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:  <span class="comment"># 检查数字是否为负数</span></span><br><span class="line">        print(number)  <span class="comment"># 打印第一个负数</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 退出循环</span></span><br></pre></td></tr></table></figure><h3 id="题目-2-使用-while-找到奇数"><a href="#题目-2-使用-while-找到奇数" class="headerlink" title="题目 2: 使用 while 找到奇数"></a><a href="/archives/20250226d92cbff1/#题目-2-使用-while-找到奇数">题目 2: 使用 while 找到奇数</a></h3><ul><li>编写一个程序，使用 while 循环打印 1 到 20 之间的所有奇数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(number)</span><br><span class="line">    number += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> != <span class="number">0</span>:  <span class="comment"># 检查数字是否为奇数</span></span><br><span class="line">        print(number)    <span class="comment"># 打印奇数</span></span><br><span class="line">    number += <span class="number">1</span>          <span class="comment"># 增加计数器</span></span><br></pre></td></tr></table></figure><h3 id="题目-3-使用-for-找到奇数"><a href="#题目-3-使用-for-找到奇数" class="headerlink" title="题目 3: 使用 for 找到奇数"></a><a href="/archives/20250226d92cbff1/#题目-3-使用-for-找到奇数">题目 3: 使用 for 找到奇数</a></h3><ul><li>编写一个程序，使用 for 循环遍历一个列表，跳过所有偶数，打印所有奇数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(number)</span><br></pre></td></tr></table></figure><blockquote><p>优化一下</p></blockquote><ul><li>添加注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 检查数字是否为偶数</span></span><br><span class="line">        <span class="keyword">continue</span>         <span class="comment"># 跳过偶数</span></span><br><span class="line">    print(number)        <span class="comment"># 打印奇数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDufP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
    <category term="参考答案" scheme="https://www.gaotianyang.top/tags/%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>Python基础知识</title>
    <link href="https://www.gaotianyang.top/archives/202502214537ccef/"/>
    <id>https://www.gaotianyang.top/archives/202502214537ccef/</id>
    <published>2025-02-21T12:15:14.000Z</published>
    <updated>2025-02-23T01:19:31.617Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDZTA.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Python-学习计划"><a href="#Python-学习计划" class="headerlink" title="Python 学习计划"></a>Python 学习计划</h2><h3 id="学习计划概述"><a href="#学习计划概述" class="headerlink" title="学习计划概述"></a>学习计划概述</h3><ul><li><strong>目标语言</strong>：Python</li><li><strong>学习周期</strong>：2 周</li><li><strong>学习方法</strong>：二八法则（80-20 原则），专注于 20% 的核心概念，快速掌握 Python 的基础并能够构建项目。</li></ul><h2 id="第-1-周：Python-基础核心"><a href="#第-1-周：Python-基础核心" class="headerlink" title="第 1 周：Python 基础核心"></a>第 1 周：Python 基础核心</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>掌握 Python 的基础语法和核心概念，能够编写简单的脚本。</p><h4 id="Day-1-2：Python-基础语法"><a href="#Day-1-2：Python-基础语法" class="headerlink" title="Day 1-2：Python 基础语法"></a>Day 1-2：<a href="/archives/2025022423fce97e/">Python 基础语法</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/2025022423fce97e/#1-变量与数据类型">变量与数据类型（整数、浮点数、字符串、布尔值）</a></li><li><a href="/archives/2025022423fce97e/#2-输入输出">输入输出（<code>print()</code> 和 <code>input()</code>）</a></li><li><a href="/archives/2025022423fce97e/#3-基本运算符">基本运算符（算术、比较、逻辑）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个简单的计算器程序。</li><li>编写一个程序，询问用户姓名并输出问候语。</li></ul></li></ul><h4 id="Day-3-4：控制流程"><a href="#Day-3-4：控制流程" class="headerlink" title="Day 3-4：控制流程"></a>Day 3-4：<a href="/archives/20250226d92cbff1/">控制流程</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250226d92cbff1/#1-条件语句">条件语句（<code>if</code>、<code>elif</code>、<code>else</code>）</a></li><li><a href="/archives/20250226d92cbff1/#2-循环">循环（<code>for</code> 循环、<code>while</code> 循环）</a></li><li><a href="/archives/20250226d92cbff1/#3-break-和-continue"><code>break</code> 和 <code>continue</code></a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，判断用户输入的数字是奇数还是偶数。</li><li>编写一个程序，打印 1 到 100 的所有质数。</li></ul></li></ul><h4 id="Day-5-6：函数"><a href="#Day-5-6：函数" class="headerlink" title="Day 5-6：函数"></a>Day 5-6：<a href="/archives/20250228c8f562d1/">函数</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/20250228c8f562d1/#1-定义函数">定义函数（<code>def</code>）</a></li><li><a href="/archives/20250228c8f562d1/#2-函数参数与返回值">函数参数与返回值</a></li><li><a href="/archives/20250228c8f562d1/#3-局部变量与全局变量">局部变量与全局变量</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个函数，计算两个数的最大公约数（GCD）。</li><li>编写一个函数，判断一个字符串是否是回文。</li></ul></li></ul><h4 id="Day-7：数据结构"><a href="#Day-7：数据结构" class="headerlink" title="Day 7：数据结构"></a>Day 7：<a href="/archives/2025030222c892e4/">数据结构</a></h4><ul><li><strong>主题</strong>：<ul><li><a href="/archives/2025030222c892e4/#1-列表">列表（<code>list</code>）：增删改查、切片</a></li><li><a href="/archives/2025030222c892e4/#2-字典">字典（<code>dict</code>）：键值对操作</a></li><li><a href="/archives/2025030222c892e4/#3-元组和集合">元组（<code>tuple</code>）和集合（<code>set</code>）</a></li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，统计一段文本中每个单词的出现次数。</li><li>编写一个程序，合并两个列表并去重。</li></ul></li></ul><h2 id="第-2-周：Python-进阶与项目准备"><a href="#第-2-周：Python-进阶与项目准备" class="headerlink" title="第 2 周：Python 进阶与项目准备"></a>第 2 周：Python 进阶与项目准备</h2><h3 id="进阶学习目标"><a href="#进阶学习目标" class="headerlink" title="进阶学习目标"></a>进阶学习目标</h3><p>掌握 Python 的进阶概念，能够处理文件、异常和模块化编程，为项目开发做准备。</p><h4 id="Day-1-2：文件操作与异常处理"><a href="#Day-1-2：文件操作与异常处理" class="headerlink" title="Day 1-2：文件操作与异常处理"></a>Day 1-2：文件操作与异常处理</h4><ul><li><strong>主题</strong>：<ul><li>文件读写（<code>open()</code>、<code>read()</code>、<code>write()</code>）</li><li>异常处理（<code>try</code>、<code>except</code>、<code>finally</code>）</li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，读取一个文本文件并统计行数。</li><li>编写一个程序，处理用户输入时的异常（如非数字输入）。</li></ul></li></ul><h4 id="Day-3-4：模块与库"><a href="#Day-3-4：模块与库" class="headerlink" title="Day 3-4：模块与库"></a>Day 3-4：模块与库</h4><ul><li><strong>主题</strong>：<ul><li>导入模块（<code>import</code>）</li><li>常用标准库（<code>os</code>、<code>sys</code>、<code>math</code>、<code>random</code>）</li><li>安装和使用第三方库（<code>pip</code>）</li></ul></li><li><strong>练习</strong>：<ul><li>编写一个程序，使用 <code>random</code> 模块生成随机密码。</li><li>编写一个程序，使用 <code>os</code> 模块列出当前目录下的所有文件。</li></ul></li></ul><h4 id="Day-5-6：面向对象编程（OOP）"><a href="#Day-5-6：面向对象编程（OOP）" class="headerlink" title="Day 5-6：面向对象编程（OOP）"></a>Day 5-6：面向对象编程（OOP）</h4><ul><li><strong>主题</strong>：<ul><li>类与对象</li><li>属性与方法</li><li>继承与多态</li></ul></li><li><strong>练习</strong>：<ul><li>编写一个简单的类，表示一个学生（属性：姓名、成绩；方法：计算平均分）。</li><li>编写一个类，表示一个银行账户（属性：余额；方法：存款、取款）。</li></ul></li></ul><h4 id="Day-7：项目规划与工具"><a href="#Day-7：项目规划与工具" class="headerlink" title="Day 7：项目规划与工具"></a>Day 7：项目规划与工具</h4><ul><li><strong>主题</strong>：<ul><li>项目结构规划</li><li>使用版本控制（<code>git</code>）</li><li>虚拟环境（<code>venv</code>）</li></ul></li><li><strong>练习</strong>：<ul><li>创建一个虚拟环境并安装 Flask。</li><li>初始化一个 <code>git</code> 仓库并提交代码。</li></ul></li></ul><h2 id="5-个难度递增的项目"><a href="#5-个难度递增的项目" class="headerlink" title="5 个难度递增的项目"></a>5 个难度递增的项目</h2><h3 id="项目-1：简单的待办事项列表（To-Do-List）"><a href="#项目-1：简单的待办事项列表（To-Do-List）" class="headerlink" title="项目 1：简单的待办事项列表（To-Do List）"></a>项目 1：简单的待办事项列表（To-Do List）</h3><ul><li><strong>描述</strong>：创建一个命令行待办事项列表，用户可以添加、查看和删除任务。</li><li><strong>关键概念</strong>：<ul><li>列表操作</li><li>函数封装</li><li>用户输入处理</li></ul></li></ul><h3 id="项目-2：天气查询工具"><a href="#项目-2：天气查询工具" class="headerlink" title="项目 2：天气查询工具"></a>项目 2：天气查询工具</h3><ul><li><strong>描述</strong>：使用第三方 API（如 OpenWeatherMap）获取用户输入城市的天气信息。</li><li><strong>关键概念</strong>：<ul><li>请求库（<code>requests</code>）</li><li>JSON 数据处理</li><li>异常处理</li></ul></li></ul><h3 id="项目-3：简单的博客系统（Flask）"><a href="#项目-3：简单的博客系统（Flask）" class="headerlink" title="项目 3：简单的博客系统（Flask）"></a>项目 3：简单的博客系统（Flask）</h3><ul><li><strong>描述</strong>：使用 Flask 创建一个简单的博客系统，支持发布和查看文章。</li><li><strong>关键概念</strong>：<ul><li>Flask 路由</li><li>HTML 模板渲染</li><li>表单处理</li></ul></li></ul><h3 id="项目-4：数据可视化工具"><a href="#项目-4：数据可视化工具" class="headerlink" title="项目 4：数据可视化工具"></a>项目 4：数据可视化工具</h3><ul><li><strong>描述</strong>：使用 <code>matplotlib</code> 或 <code>seaborn</code> 对 CSV 文件中的数据进行可视化。</li><li><strong>关键概念</strong>：<ul><li>文件读取</li><li>数据清洗</li><li>数据可视化</li></ul></li></ul><h3 id="项目-5：个人财务管理工具"><a href="#项目-5：个人财务管理工具" class="headerlink" title="项目 5：个人财务管理工具"></a>项目 5：个人财务管理工具</h3><ul><li><strong>描述</strong>：创建一个命令行工具，帮助用户记录收入和支出，并生成简单的财务报表。</li><li><strong>关键概念</strong>：<ul><li>面向对象编程</li><li>文件持久化</li><li>数据分析</li></ul></li></ul><h3 id="项目-6：基于-Flask-Restful-api-mysql-的后端项目，使用-docker-部署"><a href="#项目-6：基于-Flask-Restful-api-mysql-的后端项目，使用-docker-部署" class="headerlink" title="项目 6：基于 Flask + Restful api + mysql 的后端项目，使用 docker 部署"></a>项目 6：基于 Flask + Restful api + mysql 的后端项目，使用 docker 部署</h3><ul><li><strong>描述</strong>：创建一个基于 Flask 和 Restful API 的后端应用，结合 MySQL 数据库存储数据，并使用 Docker 进行部署。该应用旨在帮助用户通过 API 接口记录任务，并生成简单的任务记录。用户可以通过 API 添加、查询、更新和删除任务记录，方便用户进行任务管理。</li><li><strong>关键概念</strong>：<ul><li>Flask 框架：用于构建轻量级的 Web 应用程序，提供路由、请求处理等功能。</li><li>Restful API：遵循 REST 架构风格设计的 API，支持常见的 HTTP 方法（GET、POST、PUT、DELETE），实现与前端或其他服务的交互。</li><li>MySQL 数据库：用于持久化存储用户的任务记录，确保数据的安全性和可靠性。</li><li>Docker 容器化：使用 Docker 将应用及其依赖打包成容器，简化部署流程，确保开发环境与生产环境的一致性。</li><li>面向对象编程 (OOP)：通过定义类和对象来组织代码，提高代码的可维护性和复用性。</li><li>API 文档：编写详细的 API 文档，方便开发者和用户了解如何使用 API 进行操作。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>2 周学习计划</strong>：专注于 Python 的核心语法和常用功能，快速掌握基础知识。</li><li><strong>5 个项目</strong>：从简单到复杂，逐步提升编程能力，覆盖 Python 的核心概念和实际应用。</li><li><strong>学习方法</strong>：通过实践和项目驱动学习，培养独立解决问题的能力。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDZTA.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%90%8E%E7%AB%AF/Python/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="后端" scheme="https://www.gaotianyang.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://www.gaotianyang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AI学习Prompt</title>
    <link href="https://www.gaotianyang.top/archives/2025022044c50b8a/"/>
    <id>https://www.gaotianyang.top/archives/2025022044c50b8a/</id>
    <published>2025-02-20T12:19:14.000Z</published>
    <updated>2025-02-23T00:18:33.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/23/pElDVwd.jpg" alt="首屏图"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在快速发展的 AI 时代，掌握有效的学习方法对于技术爱好者和从业者至关重要。本指南旨在帮助您利用 AI 辅助学习，快速掌握新技术的核心概念，并通过实践项目巩固所学知识。</p><p>我参考数字游牧人的视频，提供了两个实用的学习模板，模板如下：</p><h2 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[X]是技术名称 ## [X]是Python</span><br><span class="line">[Y]是时间周期 ## [Y]是2</span><br><span class="line"></span><br><span class="line">我想学习[X]。请按照二八法则 （80-20 原则）制定一个全面的学习计划，重点关注能让我开始构建项目的 20%核心概念。请将计划按周安排，总计[Y]周，每周涵盖特定的学习主题。</span><br><span class="line">在完成这[Y]周的核心学习后，请推荐 5 个难度递增的项目（从入门到进阶），帮助我应用和拓展[X]的知识。对于每个项目，请提供简要描述并列出它将帮助强化的关键概念。</span><br><span class="line">请确保计划详细到足以让初学者跟随，同时也要有足够的挑战性来培养独立思考和解决问题的能力。</span><br></pre></td></tr></table></figure><p><a href="/archives/202502214537ccef/">使用范例</a></p><h2 id="技术各章节知识点学习"><a href="#技术各章节知识点学习" class="headerlink" title="技术各章节知识点学习"></a>技术各章节知识点学习</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[X]是技术名称 ## [X]是Python</span><br><span class="line">[Z]是知识点名称 ## [Z]是知识点名称</span><br><span class="line"></span><br><span class="line">我正在学习[X]中的[Z]。请提供：</span><br><span class="line"></span><br><span class="line">1. 简明扼要地解释[Z]，包括其用途和常见使用用场景。</span><br><span class="line">2. 一个演示[Z]的简单代码示例。</span><br><span class="line">3. 初学者关于[Z]常见的三个错误或误解，以及如何避免它们。</span><br><span class="line">4. 两个[Z]特别有用的实际应用场景或用例。</span><br><span class="line">5. 三个难度递进的练习题，帮助我练习使用[Z]。请只提供题目描述，不要提供解答。</span><br><span class="line"></span><br><span class="line">在提供以上信息后，请向我提出一个关于[Z]的发人深省的问题，引导我更深入地思考它的应用或影响。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>数字游牧人的视频：<a href="https://www.bilibili.com/video/BV1DkwYegEPS">微软码农致全地球人，0 基础 AI 编程速成指南【干货分享】</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/23/pElDVwd.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="AI" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/AI/"/>
    
    <category term="Prompt" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/AI/Prompt/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="AI" scheme="https://www.gaotianyang.top/tags/AI/"/>
    
    <category term="Prompt" scheme="https://www.gaotianyang.top/tags/Prompt/"/>
    
  </entry>
  
  <entry>
    <title>从业经历给我带来的成长与感悟</title>
    <link href="https://www.gaotianyang.top/archives/20250214ff1a378a/"/>
    <id>https://www.gaotianyang.top/archives/20250214ff1a378a/</id>
    <published>2025-02-14T01:23:57.000Z</published>
    <updated>2025-02-14T04:07:49.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/14/pEuXLff.jpg" alt="首屏图"></p><a id="more"></a><h2 id="轨道交通行业的收获：时间观念与细节意识"><a href="#轨道交通行业的收获：时间观念与细节意识" class="headerlink" title="轨道交通行业的收获：时间观念与细节意识"></a>轨道交通行业的收获：时间观念与细节意识</h2><p>在轨道交通行业，教会了我，时间就是效率，让我对时间管理有了极高的要求，个人的时间出现延误问题，就会牵一发动全身，对整个团队造成影响。以及细节决定成败，因为细节关乎安全，而安全是重中之重。这段经历，为我后续的职业转型奠定了坚实的基础。</p><h2 id="互联网行业的成长：团队、行业选择与技术市场关系"><a href="#互联网行业的成长：团队、行业选择与技术市场关系" class="headerlink" title="互联网行业的成长：团队、行业选择与技术市场关系"></a>互联网行业的成长：团队、行业选择与技术市场关系</h2><p>在后来进入互联网行业，我也收获了很多，首先是要找到一个好的团队，不论是职业素养，还是专业程度，又或者是团队氛围，都是好团队的不同标尺。再有，就是要选择一个好的行业，好的赛道。我从互联网金融，转到物联网，再到数据平台，以及医疗行业，使我逐步形成了这个概念。团队的强弱，决定了事情的下限，而行业的优劣，决定了事情的上限。</p><p>再次就是技术与市场的关系，我认为，技术与市场是相辅相成的。好的技术可以帮助产品去在竞品中获取优势，但不可过分执着于技术，而是应该把市场作为导向，由技术去辅佐达成目标。因为如果没有市场的正向反馈，产品的生命力就会大打折扣。回顾下来，其实我们也开发过不少的产品，不敢说多么优秀，但是也不应该算差的那一类。那么为什么没有成功的产品呢，我感觉还是对市场的敏感度不够强，在当下的大环境下，让投资者或者老板，去无条件的相信你的产品未来可期，是不够的。因此，我们需要站在更高的视野，对产品进行全面规划与设计。但是要以核心功能为发力点，快速迭代出一个可以落地的基础版本，避免闭门造车。这些经历让我逐渐意识到，职业发展不仅需要技术和团队的支持，更需要清晰的自我认知和规划。</p><h2 id="个人反思与未来规划：慢下来思考，尝试新的方向"><a href="#个人反思与未来规划：慢下来思考，尝试新的方向" class="headerlink" title="个人反思与未来规划：慢下来思考，尝试新的方向"></a>个人反思与未来规划：慢下来思考，尝试新的方向</h2><p>在 2024 年，我看到身边的朋友，伙伴们事业有成，家庭美满，也让我也去思考，我还有什么不足之处。有些是在公司里，做到了技术骨干的位置，有些是家庭上，添丁进口。因此，这一年我感觉我有些迷惘，感觉来到了十字路口，向左走？向右走？还是继续向前？坚持下去是对的吗？焦虑和困惑会慢慢在不经意间向我袭来，一度让我迷失了方向。因此我选择了慢下来，给自己一个充分的思考空间，不急于做决定，多看，多想，多尝试。并且也和爱人利用这宝贵的闲暇时间，一起多出去走走看看，弥补一下在一起多年来，因工作忙一直没什么机会一起出去的遗憾。在慢下来的过程中，让我逐渐找到内心的平静。</p><p>我尝试过考公考编考社区，因为经验不足，错失机会，现在看来，也许还得幸于当时自己的考试经验不足，导致的考试失利，不然也就不会有今天的事情发展，一切都是命运最好的安排。尝试过托人进国企央企，不过求人不如求己，现如今的大环境下，进入国企央企也不是那么容易轻松的事情。也尝试过继续互联网行业，做了技术的积累与沉淀，回顾自己以往用过的，接触学习当下流行的自己没用过的，从而提升自己的竞争力。</p><h2 id="未来的行动与展望：全身心投入，持续学习，共创事业"><a href="#未来的行动与展望：全身心投入，持续学习，共创事业" class="headerlink" title="未来的行动与展望：全身心投入，持续学习，共创事业"></a>未来的行动与展望：全身心投入，持续学习，共创事业</h2><p>在这个新的开始，一个更大的平台，一个当下正热门的赛道，与一批优秀的人才一起共事，使我看到了一个可能，一个把工作变成事业的可能。那么我应该如何去做呢？</p><p>首先是全身心的投入，把产品做好做优。站在本职岗位的角度上思考问题的同时，也要跳出这个位置，站在更高的角度去思考，如何让产品可以变得更好。其次是持续的学习，把握住在大平台，和这些优秀的人一起工作的机会，去充分的汲取养分，充实自己。不论是技术方面还是工作方法，不论是思维方式还是处世哲学。不拘泥于一事一物。还要善于思考，及时的总结经验，分析自己的不足与改进的方案，并积极主动与同事沟通交流。例如保证每月一次，与团队成员的深度交流。</p><p>我相信，只要全身心的投入，持续的学习，未来定将更加光明美好。谋事在人，成事在天，尽自己最大的努力，不留遗憾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/14/pEuXLff.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="年度总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="年度总结" scheme="https://www.gaotianyang.top/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>温榆河公园</title>
    <link href="https://www.gaotianyang.top/archives/20250210423ded45/"/>
    <id>https://www.gaotianyang.top/archives/20250210423ded45/</id>
    <published>2025-02-10T05:12:37.000Z</published>
    <updated>2025-02-15T11:29:14.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/15/pEK0sWF.jpg" alt="首屏图"></p><a id="more"></a><p>2025 年 2 月 10 日，农历正月初三，年味正浓。趁着难得的假期，我们决定逃离城市的喧嚣，自驾前往温榆河公园东园，感受冬日里别样的宁静与美好。下午一点，阳光正好，一路向北，车窗外的风景不断变换，高楼大厦逐渐褪去，心情也随之放松下来。</p><p>停好车后，我步行几分钟便来到了东园的入口。虽然已是午后，但冬日的阳光依然温暖，洒在身上驱散了寒意。进入公园后，我们沿着栈桥一路向东，开启了这段冬日漫步之旅。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEK0yz4.jpg" alt="温榆河公园北"></p><p>栈桥两侧是冰封的湖面，在阳光的照射下闪烁着晶莹的光芒，仿佛一块巨大的水晶。偶尔能看到几只野鸭在冰面上悠闲地散步，为这静谧的冬日增添了几分生机。</p><p>下了栈桥之后，我们被一阵阵欢快的笑声吸引。循声望去，原来是一处供儿童游玩的冰雪游乐场。孩子们在雪地里，玩得不亦乐乎。看着他们天真烂漫的笑容，我也不禁被感染，仿佛回到了童年。</p><p>继续前行，道路的尽头是一座高大的瞭望台。我登上台顶，整个公园的景色尽收眼底。远处的城市高楼林立，近处的树木银装素裹，构成了一幅美丽的冬日画卷。我深吸一口气，感受着冬日里难得的清新空气，心中充满了宁静与喜悦。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEK0rJU.jpg" alt="温榆河公园西"></p><p>两小时的游览时间很快就过去了，我依依不舍地离开了温榆河公园东园。这次冬日之旅，让我感受到了大自然的魅力，也让我对生活充满了希望。我相信，只要心中有阳光，冬天也会变得温暖而美好。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/15/pEK0sWF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="温榆河公园" scheme="https://www.gaotianyang.top/tags/%E6%B8%A9%E6%A6%86%E6%B2%B3%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>智慧分析平台</title>
    <link href="https://www.gaotianyang.top/archives/202502061425c46c/"/>
    <id>https://www.gaotianyang.top/archives/202502061425c46c/</id>
    <published>2025-02-06T02:22:39.000Z</published>
    <updated>2025-02-15T08:45:42.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/06/pEeB0p9.png" alt="首屏图"></p><a id="more"></a><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>中诚信国际智慧分析平台专为金融机构、企业和投资者设计，提供深度数据挖掘和专业信用评级服务，助力复杂金融环境下的明智决策。平台涵盖企业融资、政府公共融资、金融机构、结构融资、非标产品、主权及负债评级等领域，集成首页、主体、区域和工具四大核心功能。</p><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>主体模块深入分析企业信用状况，包括概览、股权结构、信用评级、经营和财务表现等。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEKafdf.png" alt="主体详情财务表现财务概览金额单位切换-脱敏"></p><h3 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h3><p>区域模块分析各地行业分布、经济和财政状况，揭示主体情况、政府和环境评分及研究报告。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEKa5FS.png" alt="区域首页-脱敏"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeB0p9.png" alt="区域详情企业分布"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeBD61.png" alt="区域详情研究报告"></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>工具模块包含五个子功能：主体信用评分、政府信用评分、区域环境评分、同行业对比和区域数据对比，支持多角度数据分析和精准决策。</p><p><img src="https://s21.ax1x.com/2025/02/15/pEKaho8.png" alt="主体信用评分对比数据上限-脱敏"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeB2kD.png" alt="主体信用评分对比空数据"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeBRte.png" alt="主体信用评分对比添加对比例弹框评分版本筛选"></p><p><img src="https://s21.ax1x.com/2025/02/15/pEKaOe0.png" alt="主体信用评分对比切换模型确认提示-脱敏"></p><h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="主体详情"><a href="#主体详情" class="headerlink" title="主体详情"></a>主体详情</h3><p><img src="https://s21.ax1x.com/2025/02/15/pEKafdf.png" alt="主体详情财务表现财务概览金额单位切换-脱敏"></p><ul><li>封装筛选条件组件方便在系统中复用<ul><li>封装的筛选组件使用单例模式，保证相同类型组件的唯一性</li><li>使用缓存技术，将不常变更的字典值保存起来，并添加失效时间，减少无效请求的同时，保证数据的时效性</li></ul></li><li>根据权限判断内外部数据可否调用</li><li>根据当前登录人权限控制 tab 分页内容及 code<br>并选中默认页签</li><li>内外部数据可查看的 tab 页签不一致，添加切换时默认跳转页签</li><li>切换金额单位、隐藏空行控制对比表格中数据的展示形式</li><li>同行业对比跳转传参渲染默认值</li><li>复用对比列表格组件，并扩展财务表现页面的展示样式</li></ul><h3 id="区域首页"><a href="#区域首页" class="headerlink" title="区域首页"></a>区域首页</h3><p><img src="https://s21.ax1x.com/2025/02/15/pEKa5FS.png" alt="区域首页-脱敏"></p><ul><li>解决各图表组件在 KeepAlive 挂起后图表渲染异常</li><li>地图组件<ul><li>不同行政级别的区域展示不同的区域信息</li><li>地图组件的下钻上探逻辑</li><li>地图组件的南海区域补齐</li><li>切换地图区域时的联动同页面另两个区域筛选框</li></ul></li><li>柱线图组件<ul><li>柱线图数据特殊处理<ul><li>通过数据最大值最小值动态计算数据间隔</li><li>动态计算坐标轴文本宽度</li></ul></li><li>定制化柱线图图例展示效果问题</li></ul></li><li>区域列表<ul><li>表头动态生成并分组</li><li>默认按动态生成的首列指标排序<ul><li>切换指标时需要重置排序</li><li>初始化、编辑操作时保持请求携带排序参数</li></ul></li><li>不同行政级别的区域列表展示不同的页签</li><li>区域名称列添加超长文本缩略并添加 tooltip</li></ul></li><li>选择展示指标<ul><li>动态渲染当前用户已勾选的指标</li><li>取消、重置指标逻辑</li></ul></li></ul><h3 id="区域详情"><a href="#区域详情" class="headerlink" title="区域详情"></a>区域详情</h3><h4 id="企业分布"><a href="#企业分布" class="headerlink" title="企业分布"></a>企业分布</h4><p><img src="https://s21.ax1x.com/2025/02/06/pEeB0p9.png" alt="区域详情企业分布"></p><ul><li>解决各图表组件在 KeepAlive 挂起后图表渲染异常</li><li>区域基本信息<ul><li>封装 tag 标签组件</li></ul></li><li>二级菜单<ul><li>封装组件并添加权限控制交互</li></ul></li><li>矩形树图<ul><li>矩形树图组件的下钻上探逻辑</li><li>切换数据按发行规模还是发行家数排布</li></ul></li><li>主体列表<ul><li>封装筛选组件方便在系统中复用</li></ul></li><li>柱线图组件<ul><li>数据特殊处理，到期金额在图表中展示为负值，在 tooltip 中展示为原值</li></ul></li></ul><h4 id="研究报告"><a href="#研究报告" class="headerlink" title="研究报告"></a>研究报告</h4><p><img src="https://s21.ax1x.com/2025/02/06/pEeBD61.png" alt="区域详情研究报告"></p><ul><li>封装报卡片组件，并添加交互效果</li><li>下载报告</li></ul><h3 id="对比工具"><a href="#对比工具" class="headerlink" title="对比工具"></a>对比工具</h3><p><img src="https://s21.ax1x.com/2025/02/15/pEKaho8.png" alt="主体信用评分对比数据上限-脱敏"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeB2kD.png" alt="主体信用评分对比空数据"></p><p><img src="https://s21.ax1x.com/2025/02/06/pEeBRte.png" alt="主体信用评分对比添加对比例弹框评分版本筛选"></p><p><img src="https://s21.ax1x.com/2025/02/15/pEKaOe0.png" alt="主体信用评分对比切换模型确认提示-脱敏"></p><ul><li>主体信用评分对比<ul><li>封装对比列组件<ul><li>对比列样式根据数据返回渲染<ul><li>文字加粗</li><li>文字标蓝</li><li>背景置灰</li><li>背景置蓝</li></ul></li><li>添加高亮不同项逻辑</li><li>添加隐藏空行逻辑</li><li>添加金额单位切换逻辑</li><li>添加展开至逻辑</li><li>封装头部展示数据接收参数<ul><li>根据参数控制展示内容、字段、是否特殊处理</li></ul></li><li>根据配置控制是否展示 tooltip</li><li>根据配置控制是否展示 hover</li><li>添加空数据的占位列</li><li>固定首行、首列</li><li>封装数据处理公共方法<ul><li>字符串类型<ul><li>可转化为数字类型，处理千分位符</li><li>不可转换数字类型，保持数据原样</li></ul></li><li>数字类型处理千分位符</li><li>null、undefined 显示–</li></ul></li></ul></li><li>封装树形表格组件<ul><li>自定义展开收起 icon<ul><li>一级 icon 为双箭头</li><li>其他级 icon 为加减号</li></ul></li></ul></li><li>添加、编辑数据处理逻辑<ul><li>数据列唯一性，使用 Set</li><li>控制数据列添加上限</li><li>封装筛选组件方便在系统中复用</li><li>联动控制，根据模型名称和版本控制主体下拉数据</li><li>联动控制，根据主体控制评分年份及版本下拉数据</li></ul></li><li>多表头对比方案实现<ul><li>通过表格的列合并来实现同一表格中组合不同列数<ul><li>基础多列为 6 列，因为需求存在 1、2、3 列三种情况，取最小公倍数 6。实现在不同情况下的多列均匀分割。</li></ul></li></ul></li><li>模型名称和版本<ul><li>有数据时切换需提示会清空</li><li>点击取消则恢复原模型名称和版本</li></ul></li><li>导出<ul><li>编写 api 公共方法，判断若为导出请求则创建文件流及 dom 元素，并下载文件</li></ul></li></ul></li><li>政府信用评分对比<ul><li>添加、编辑数据处理逻辑<ul><li>联动控制，根据区域控制评分年份及版本下拉数据</li></ul></li><li>其他同主体信用评分对比</li></ul></li><li>区域环境评分对比<ul><li>添加、编辑数据处理逻辑<ul><li>联动控制，根据区域控制评分年份及版本下拉数据</li></ul></li><li>其他同主体信用评分对比</li></ul></li><li>同行业对比<ul><li>添加、编辑数据处理逻辑<ul><li>联动控制，根据中诚信行业控制主体下拉数据</li><li>联动控制，根据其他选项控制财报下拉数据</li></ul></li><li>其他同主体信用评分对比</li></ul></li><li>区域数据对比<ul><li>封装对比列组件<ul><li>根据配置控制是否展示图表弹框<ul><li>通过数据最大值最小值动态计算数据间隔</li><li>动态计算坐标轴文本宽度</li></ul></li></ul></li><li>添加、编辑数据处理逻辑<ul><li>联动控制，根据区域类别控制区域下拉数据<ul><li>封装高阶组件，在不同区域类别的时候渲染不同的筛选组件</li></ul></li></ul></li><li>其他同主体信用评分对比</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/06/pEeB0p9.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="项目总结" scheme="https://www.gaotianyang.top/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>大同</title>
    <link href="https://www.gaotianyang.top/archives/2025012498366422/"/>
    <id>https://www.gaotianyang.top/archives/2025012498366422/</id>
    <published>2025-01-24T11:03:10.000Z</published>
    <updated>2025-02-23T23:36:55.320Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s21.ax1x.com/2025/02/16/pEKTohF.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><h3 id="凯鸽酒楼-华北星店"><a href="#凯鸽酒楼-华北星店" class="headerlink" title="凯鸽酒楼(华北星店)"></a>凯鸽酒楼(华北星店)</h3><h3 id="九龙壁"><a href="#九龙壁" class="headerlink" title="九龙壁"></a>九龙壁</h3><h3 id="念夏艺术中心"><a href="#念夏艺术中心" class="headerlink" title="念夏艺术中心"></a>念夏艺术中心</h3><h3 id="大同古城墙灯会"><a href="#大同古城墙灯会" class="headerlink" title="大同古城墙灯会"></a>大同古城墙灯会</h3><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h3 id="峭壁羊倌-羊杂粉"><a href="#峭壁羊倌-羊杂粉" class="headerlink" title="峭壁羊倌-羊杂粉"></a>峭壁羊倌-羊杂粉</h3><h3 id="云冈石窟"><a href="#云冈石窟" class="headerlink" title="云冈石窟"></a>云冈石窟</h3><p>云冈石窟是中国古代石刻艺术的瑰宝，位于山西省大同市西郊的武周山南麓。这里保存了大量的佛教石窟造像，展现了北魏时期的宗教艺术和文化风貌。</p><p><img src="https://s21.ax1x.com/2025/02/24/pElOA8x.jpg" alt="大佛-295"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOi5R.jpg" alt="嘿哈-305"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOCVJ.jpg" alt="扣鼻-306"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOPa9.jpg" alt="击掌-309"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOkP1.jpg" alt="Give me five-311"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOE26.jpg" alt="击掌-312"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOeKO.jpg" alt="Yea-316"></p><p><img src="https://s21.ax1x.com/2025/02/24/pElOVxK.jpg" alt="不可以-319"></p><p><img src="https://s21.ax1x.com/2025/02/22/pElaIgg.jpg" alt="户外大佛-322"></p><p><img src="https://s21.ax1x.com/2025/02/22/pEla58S.jpg" alt="户外大佛-323"></p><p><img src="https://s21.ax1x.com/2025/02/22/pElaHDs.jpg" alt="石刻佛像-326"></p><p><img src="https://s21.ax1x.com/2025/02/22/pEla4C8.jpg" alt="千佛塔-328"></p><p><img src="https://s21.ax1x.com/2025/02/22/pElaLEq.jpg" alt="博山炉-329"></p><p><img src="https://s21.ax1x.com/2025/02/22/pElaovQ.jpg" alt="艺苑先登-330"></p><p><img src="https://s21.ax1x.com/2025/02/22/pElabbn.jpg" alt="龙门石窟原始正门-332"></p><p><img src="https://s21.ax1x.com/2025/02/22/pEla7uj.jpg" alt="黑神话小西天-333"></p><p>这三尊木刻佛像雕刻精美，佛像面容慈祥，神态安详，仿佛在默默诉说着千年的故事。木刻工艺细腻，每一处细节都展现出工匠的高超技艺。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElP0rq.jpg" alt="木刻佛像-334"></p><p>这幅佛像壁画色彩鲜艳，线条流畅，描绘了众多佛像和菩萨的形象。由中央美院的师生联合完成，壁画不仅展示了当代艺术家的绘画技巧，也反映了他们对佛教信仰的思考。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPsaT.jpg" alt="佛像壁画-335"></p><p>这些供奉的佛像庄严肃穆，营造出一种宁静而神圣的氛围。游客们在这里驻足凝视，感受到心灵的宁静与平和。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPgG4.jpg" alt="供奉佛像-337"></p><p>千佛殿内供奉着无数的小佛像，密密麻麻地排列在一起，令人叹为观止。每一尊佛像都栩栩如生，仿佛在低语着古老的经文，传递着无尽的智慧与慈悲。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPBq0.jpg" alt="千佛殿-338"></p><p>这座佛塔造型独特，塔身装饰精美，层层叠叠的结构让人联想到古代建筑的辉煌。塔顶的宝珠象征着吉祥如意，为整个景区增添了神秘色彩。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPrZV.jpg" alt="佛塔-341"></p><p>这幅壁画同样描绘了众多佛像和菩萨，但风格更加写实，色彩更加柔和。画面中的每一个细节都充满了生命力，仿佛将观众带入了一个充满灵性的世界。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPyIU.jpg" alt="佛像壁画-342"></p><p>冬季的云冈石窟别有一番景致，湖面结冰，银装素裹，宛如一幅天然的水墨画。冰面上偶尔能看到一些冰裂纹，增加了画面的层次感和美感。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElPciF.jpg" alt="冰封的湖面-344"></p><p>这幅图展现了色彩斑斓的如来佛像，佛像面容慈祥，背景色彩绚丽，给人以宁静与庄严之感。金色、红色和蓝色交织在一起，营造出一种神秘而神圣的氛围。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElP2RJ.jpg" alt="佛像色彩-345"></p><p>这幅图展现了色彩斑斓的如来佛像，佛像面容慈祥，背景色彩绚丽，给人以宁静与庄严之感。<br>在佛像下方，绘制了飞天的形象。飞天是佛教艺术中常见的元素，通常描绘成轻盈飞翔的仙女，手中持着乐器或花朵，为画面增添了一种灵动和飘逸的感觉。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpXMq.jpg" alt="如来色彩-346"></p><p>这是一幅如来的素描画像，线条简洁流畅，勾勒出佛像的轮廓，展现出一种质朴而深邃的艺术风格。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpLzn.jpg" alt="如来素描-347"></p><h3 id="大同博物馆"><a href="#大同博物馆" class="headerlink" title="大同博物馆"></a>大同博物馆</h3><p>大同美术馆的建筑外观，现代且富有设计感，馆内收藏了大量艺术作品，是艺术爱好者的好去处。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpqRs.jpg" alt="大同美术馆-352"></p><p>大同市博物馆的建筑宏伟壮观，馆内陈列着丰富的历史文物和艺术品，展示了大同悠久的历史和文化底蕴。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpvLV.jpg" alt="大同市博物馆-356"></p><p>这座石雕描绘了古代商旅的情景，骆驼矗立一旁，商人抬头北望，展示出古代交通的复杂场景，生动地再现了丝绸之路的历史场景。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpjs0.jpg" alt="骆驼与商人石雕-358"></p><p>北魏平城明堂是古代重要的礼制建筑，图片展示了其古朴庄重的风貌，让人感受到古代建筑的独特魅力。</p><p><img src="https://s21.ax1x.com/2025/02/21/pElpzZT.jpg" alt="北魏平城明堂-360"></p><p>这幅漆画是大同博物馆的镇馆之宝之一，以其独特的工艺和色彩表现力著称，这幅漆画色彩鲜艳，图案精美，体现了传统工艺的高超技艺。</p><p><img src="https://s21.ax1x.com/2025/02/21/pEl9SdU.jpg" alt="漆画-362"></p><p>石雕柱基展示了古代建筑中常用的装饰元素，雕刻细腻，纹饰精美，反映了古人对美的追求和精湛的雕刻技艺。</p><p><img src="https://s21.ax1x.com/2025/02/21/pEl9poF.jpg" alt="石雕柱基-365"></p><p>大同博物馆是大同市重要的文化地标之一，馆内收藏了大量珍贵的历史文物和艺术品，展示了大同地区悠久的历史和丰富的文化遗产。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQyp4I.jpg" alt="马阵-366"></p><p>马阵展品展现了古代骑兵的壮观场景，这些陶俑马队栩栩如生，仿佛能让人听到战马的嘶鸣声，感受到古代战场的紧张气氛。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQsvHH.jpg" alt="马阵-367"></p><p>这件精美的玻璃小瓶展示了古代工匠高超的技艺，瓶身透明光洁，造型优美，令人赞叹不已。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQszEd.jpg" alt="玻璃小瓶-369"></p><p>这幅驾车出游图生动地描绘了古代贵族出行的场景，画中人物神态各异，车辆精致华丽，反映了当时社会的生活风貌。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQySUA.jpg" alt="驾车出游图-370"></p><p>牛车模型展示了古代农业社会的重要交通工具，其结构简单却实用，体现了古人对生活的智慧。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQyP8P.jpg" alt="牛车-372"></p><p>狩猎石刻刻画了古代人们狩猎的场景，线条流畅，形象逼真，展现了当时人们的狩猎生活和艺术表现力。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQyCCt.jpg" alt="狩猎石刻-374"></p><p>这些镇墓武士俑形态威武，表情严肃，象征着守护逝者安宁的力量，体现了古人对死后世界的敬畏。</p><p><img src="https://s21.ax1x.com/2025/02/20/pEQyFv8.jpg" alt="镇墓武士俑-377"></p><p><img src="https://s21.ax1x.com/2025/02/20/pEQyigf.jpg" alt="镇墓武士俑两座-378"></p><p><img src="https://s21.ax1x.com/2025/02/19/pEQA524.jpg" alt="镇墓武士俑-379"></p><p>陶俑马队与马阵类似，但更加细腻，每个陶俑的表情和动作都各具特色，展现了古代军队的雄壮气势。</p><p><img src="https://s21.ax1x.com/2025/02/19/pEQAW5T.jpg" alt="陶俑马队-380"></p><p>陶罐是古代日常生活中的常见器具，这些陶罐不仅具有实用性，还展示了古人的审美情趣。</p><p><img src="https://s21.ax1x.com/2025/02/19/pEQAhPU.jpg" alt="陶罐-381"></p><p>石雕护法力士像姿态矫健，肌肉发达，给人一种力量感，体现了古人对护法神灵的崇敬。</p><p><img src="https://s21.ax1x.com/2025/02/19/pEQAIxJ.jpg" alt="石雕护法力士像-383"></p><p>鸱吻是中国古代建筑屋顶上的装饰物，造型独特，寓意吉祥，为建筑增添了神秘色彩。</p><p><img src="https://s21.ax1x.com/2025/02/19/pEQA4GF.jpg" alt="鸱吻-384"></p><p><img src="https://s21.ax1x.com/2025/02/19/pEQATM9.jpg" alt="鸱吻-385"></p><p>琉璃犼是一种神话中的瑞兽，以其精美的琉璃工艺制作而成，色彩斑斓，栩栩如生，令人叹为观止。</p><p><img src="https://s21.ax1x.com/2025/02/19/pEQAHq1.jpg" alt="琉璃犼-386"></p><p><img src="https://s21.ax1x.com/2025/02/19/pEQA7rR.jpg" alt="琉璃犼-388"></p><p>高僧坐像庄严肃穆，面容慈祥，体现了佛教文化的深厚底蕴，让人感受到宁静与平和。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWynK.jpg" alt="高僧坐像-389"></p><p>仕女图描绘了古代女性的生活场景，画中人物服饰华丽，举止优雅，展现了当时的审美风尚。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMW60O.jpg" alt="仕女图-390"></p><p>狮子作为百兽之王，其雕像威风凛凛，象征着权力与尊严，常被用于宫殿和寺庙的装饰。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWc7D.jpg" alt="狮子-391"></p><p>僧众石雕展示了佛教徒的形象，他们或站或坐，神态各异，反映了佛教文化的广泛影响。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWrX6.jpg" alt="僧众石雕-395"></p><p>阿弥陀佛铜坐像庄严肃穆，面带微笑，给人以宁静与安详的感觉，体现了佛教慈悲为怀的精神。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWB11.jpg" alt="阿弥陀佛铜坐像-396"></p><p>弥勒佛铜坐像笑容满面，体态圆润，象征着宽容与快乐，传递出积极向上的精神。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMW0pR.jpg" alt="弥勒佛铜坐像-397"></p><p>小人偶雕像形态各异，有的手持器物，有的作揖行礼，充满了生活气息，展示了古代民间的艺术创造力。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWdh9.jpg" alt="小人偶雕像-398"></p><p>大同博物馆的这些展品不仅展示了大同地区的历史文化，也让我们更深入地了解了中国古代文明的博大精深。每一件文物背后都有着丰富的历史故事和文化内涵，值得细细品味。</p><h3 id="老柴削面"><a href="#老柴削面" class="headerlink" title="老柴削面"></a>老柴削面</h3><p>傍晚时分，我们走进了老柴削面馆。点了山西刀削面、炸鸡腿、把子肉、狮子头、卤蛋、豆腐干和特色泡菜。刀削面筋道爽滑，汤底浓郁；炸鸡腿外酥里嫩；把子肉香而不腻；狮子头鲜美多汁；卤蛋入味；豆腐干嚼劲十足；泡菜酸辣开胃。这顿晚餐让我们充分领略了大同美食的魅力。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEMWD6x.jpg" alt="老柴削面-400"></p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h3 id="华严寺"><a href="#华严寺" class="headerlink" title="华严寺"></a>华严寺</h3><p>清晨，当第一缕阳光洒向大同古城，我们踏上了寻访华严寺的旅程。这座始建于辽代的千年古刹，静静地矗立在古城一隅，仿佛一位饱经风霜的老者，向世人诉说着历史的沧桑。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2hUH.jpg" alt="钟楼-401"></p><p>在我们还未进入寺院之前，便被寺外的钟楼所吸引。这座古老的钟楼巍然屹立，飞檐翘角，雕梁画栋，尽显辽金建筑的雄浑大气。<br>我们仿佛听到了悠扬的钟声回荡在空气中，仿佛穿越千年，将我的思绪带回到那个香火鼎盛的年代。站在钟楼下，我仿佛能听到历史的回响，感受到时光的流转。</p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTohF.jpg" alt="华严寺-475"></p><p>离开钟楼，我正式踏入了华严寺。穿过古朴的山门，眼前豁然开朗。正对着山门的，是庄严肃穆的普光明殿。<br>殿宇巍峨，气势恢宏，殿内供奉着释迦摩尼佛像，佛像面容慈祥，目光深邃，仿佛能洞察世间万物。殿内墙壁上绘有精美的壁画，色彩艳丽，线条流畅，讲述着佛教故事，令人叹为观止。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2fVe.jpg" alt="普光明殿-402"></p><p><img src="https://s21.ax1x.com/2025/02/18/pEM22DO.jpg" alt="雪踏风来-407"></p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2RbD.jpg" alt="山门-415"></p><p><img src="https://s21.ax1x.com/2025/02/18/pEM26v6.jpg" alt="普光明殿-416"></p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2ygx.jpg" alt="释迦摩尼-418"></p><p>漫步在寺院中，我仿佛置身于一座艺术的殿堂。水月观音像婀娜多姿，衣袂飘飘，仿佛随时会乘风而去；观音菩萨木雕栩栩如生，神态安详，令人心生敬畏；龙纹顶上的雕刻精美绝伦，栩栩如生，仿佛下一秒就会腾空而起。</p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2s81.jpg" alt="水月观音-419"></p><p><img src="https://s21.ax1x.com/2025/02/18/pEM2gKK.jpg" alt="水月观音-420"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMl4Qf.jpg" alt="光阴-423"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMlIOS.jpg" alt="壁画-424"></p><p>在文殊阁和普贤阁，我感受到了佛教文化的博大精深。阁内供奉着文殊菩萨和普贤菩萨的塑像，两位菩萨分别象征着智慧和行愿，令人心生敬仰。</p><p><img src="https://s21.ax1x.com/2025/02/17/pEMlhSP.jpg" alt="文殊阁-426"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMl5y8.jpg" alt="文殊阁-431"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMl2FA.jpg" alt="静-433"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMlcod.jpg" alt="大雄宝殿-435"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMlRJI.jpg" alt="龙纹顶-438"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMl6dH.jpg" alt="大雄宝殿-439"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMMo1f.jpg" alt="大雄宝殿-440"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMQpcT.jpg" alt="日升之时-441"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMQS3V.jpg" alt="鸱吻与龙-442"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMML7j.jpg" alt="观音菩萨木雕-444"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMMfAA.jpg" alt="普贤阁-445"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKHC5T.jpg" alt="普贤阁-448"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKHiPU.jpg" alt="冬日-449"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKHFGF.jpg" alt="文殊阁-451"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKHk24.jpg" alt="大雄宝殿-452"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEK77Uf.jpg" alt="红墙蓝天-454"></p><p>登上华严宝塔，极目远眺，整个寺院尽收眼底。红墙金瓦，在阳光的照耀下熠熠生辉，与蓝天白云交相辉映，构成一幅绝美的画卷。微风拂过，塔檐下的风铃发出清脆的声响，仿佛在诉说着古寺的千年故事。</p><p><img src="https://s21.ax1x.com/2025/02/16/pEK7H58.jpg" alt="华严宝塔-455"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEK7qPS.jpg" alt="地宫-456"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEK7TVP.jpg" alt="释迦摩尼-458"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMMI9P.jpg" alt="妙转法轮-459"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMM4ht.jpg" alt="薄伽教藏殿-465"></p><p><img src="https://s21.ax1x.com/2025/02/17/pEMMhtI.jpg" alt="大同古城-468"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTqXR.jpg" alt="风铃-469"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTbc9.jpg" alt="释迦摩尼-470"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTH1J.jpg" alt="观音壁画-472"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKT7p4.jpg" alt="观音像-473"></p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTItU.jpg" alt="牌楼-道中容从-478"></p><p>夕阳西下，我依依不舍地离开了华严寺。回首望去，古寺在夕阳的余晖下显得格外庄严神圣。<br>这次华严寺之行，不仅让我领略了古代建筑的精美绝伦，也让我感受到了佛教文化的深厚底蕴，更让我对中华文化的博大精深有了更深的理解。</p><h3 id="凯鸽酒楼-振兴街店"><a href="#凯鸽酒楼-振兴街店" class="headerlink" title="凯鸽酒楼(振兴街店)"></a>凯鸽酒楼(振兴街店)</h3><p>在游览了历史悠久的华严寺之后，我们前往了附近的凯鸽酒楼（振兴街店）享用午餐，再次沉浸在山西大同的美食文化中。我们点了几道当地的特色菜肴：烧麦皮薄馅嫩，羊肉馅饼香气扑鼻，过油肉外酥里嫩，宫保鸡丁酸甜适口，还有清凉爽口的凉粉。每一道菜都展现了山西独特的风味和精湛的烹饪技艺，令人回味无穷。这顿午餐不仅满足了味蕾，也让我们更深入地感受到了大同的饮食文化。</p><h3 id="大同云饺子馆"><a href="#大同云饺子馆" class="headerlink" title="大同云饺子馆"></a>大同云饺子馆</h3><p>夜幕降临，我们从酒店漫步而出，寻味而至一家充满地方风情的饺子馆——大同云饺子馆。在这里，我们品尝了一顿地道的山西晚餐。首先上桌的是猪肉茴香饺子，皮薄馅足，茴香的独特香气与猪肉的鲜美完美融合，令人赞不绝口。接着是清爽的沙葱土豆丝，脆嫩可口，带着一丝淡淡的葱香。凉拌羊肚丝则以其独特的口感和调味，让人回味无穷。冬瓜丸子汤清淡鲜美，丸子滑嫩，冬瓜入口即化，为这顿晚餐增添了几分温暖。最后，店家还贴心地赠送了小米凉糕，软糯香甜，为这顿丰盛的晚餐画上了完美的句号。这顿晚餐不仅让我们品尝到了地道的山西风味，也感受到了当地人的热情与好客。</p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTh7V.jpg" alt="小米凉糕"></p><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><p>清晨，我们在酒店享用了丰盛的自助早餐。餐品种类繁多，既有地道的山西风味，也有常见的早餐选择。羊杂粉汤鲜味美，刀削面筋道爽滑，包子皮薄馅多，点心精致可口，还有几道色香味俱全的炒菜和各式熟食。特别值得一提的是自制的酸奶，口感醇厚，令人回味无穷。然而，最让我印象深刻的还是当地特色的沙棘果，小小的果实红艳诱人，入口酸甜，极具地方特色，为这顿早餐增添了一抹独特的色彩。</p><p><img src="https://s21.ax1x.com/2025/02/16/pEKTWmq.jpg" alt="沙棘果"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s21.ax1x.com/2025/02/16/pEKTohF.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="大同" scheme="https://www.gaotianyang.top/tags/%E5%A4%A7%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>枣强夜空下的烟火</title>
    <link href="https://www.gaotianyang.top/archives/202402119503df62/"/>
    <id>https://www.gaotianyang.top/archives/202402119503df62/</id>
    <published>2024-02-11T00:07:53.000Z</published>
    <updated>2024-02-20T01:10:40.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2024/02/20/pFYDZXq.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>过年了，我们一起回到老家，在夜空下，点亮夜空中最亮的烟火，笑的开心，祝愿我们新年有新的希望。</p></blockquote><p><img src="https://s11.ax1x.com/2024/02/20/pFYDitg.jpg" alt="放烟花"><br><img src="https://s11.ax1x.com/2024/02/20/pFYD978.jpg" alt="好开森"><br><img src="https://s11.ax1x.com/2024/02/20/pFYDPAS.jpg" alt="哈哈哈"><br><img src="https://s11.ax1x.com/2024/02/20/pFYD5CQ.jpg" alt="噼里啪啦"><br><img src="https://s11.ax1x.com/2024/02/20/pFYDApj.jpg" alt="新年的希望"><br><img src="https://s11.ax1x.com/2024/02/20/pFYDFhQ.jpg" alt="点亮夜空"><br><img src="https://s11.ax1x.com/2024/02/20/pFYDVcn.jpg" alt="清澈的夜空"><br><img src="https://s11.ax1x.com/2024/02/20/pFYDE1s.jpg" alt="星空"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2024/02/20/pFYDZXq.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="枣强" scheme="https://www.gaotianyang.top/tags/%E6%9E%A3%E5%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>老君堂公园2024</title>
    <link href="https://www.gaotianyang.top/archives/20240207f6a90edd/"/>
    <id>https://www.gaotianyang.top/archives/20240207f6a90edd/</id>
    <published>2024-02-07T00:08:24.000Z</published>
    <updated>2024-02-09T00:22:35.373Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2024/02/09/pF3Kidg.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>和岚泊来老君堂遛弯，我们绕着公园一共走了六公里，天气刚好，太阳晒在身上暖洋洋的。在公园入口处，还看到了一个滑雪大滑梯，不少家长带着孩子来这里玩耍。</p></blockquote><p><img src="https://s11.ax1x.com/2024/02/09/pF3KVWn.jpg" alt="暖洋洋"><br><img src="https://s11.ax1x.com/2024/02/09/pF3KZzq.jpg" alt="天气刚好"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2024/02/09/pF3Kidg.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="老君堂公园" scheme="https://www.gaotianyang.top/tags/%E8%80%81%E5%90%9B%E5%A0%82%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>官庄公园2024</title>
    <link href="https://www.gaotianyang.top/archives/20240203f8486685/"/>
    <id>https://www.gaotianyang.top/archives/20240203f8486685/</id>
    <published>2024-02-03T00:07:52.000Z</published>
    <updated>2024-02-05T23:38:52.534Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2024/02/04/pFlMIu8.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>一家人庆祝媳妇的生日，来到山河屯吃排骨铁锅炖，饭后和媳妇儿去官庄公园饭后遛弯，转了一大圈再回家，还挺累的，腿都溜细了哈哈哈~</p></blockquote><p><img src="https://s11.ax1x.com/2024/02/04/pFlKRyT.jpg" alt="山河屯铁锅炖"><br><img src="https://s11.ax1x.com/2024/02/04/pFlKgS0.jpg" alt="冰淇淋女王"><br><img src="https://s11.ax1x.com/2024/02/04/pFlK2lV.jpg" alt="干杯"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMjg0.jpg" alt="美女探头"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMbNj.jpg" alt="家长请看护好小孩~"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMHEQ.jpg" alt="凛冬将至"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMTHg.jpg" alt="你看那冰面的沟壑"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMIu8.jpg" alt="冰面的碎冰有我出的一份力"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMq4s.jpg" alt="冰洞"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMX3q.jpg" alt="跳一跳"><br><img src="https://s11.ax1x.com/2024/02/04/pFlMOCn.jpg" alt="扭一扭"><br><img src="https://s11.ax1x.com/2024/02/05/pFl4Fn1.jpg" alt="转一转"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2024/02/04/pFlMIu8.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="官庄公园" scheme="https://www.gaotianyang.top/tags/%E5%AE%98%E5%BA%84%E5%85%AC%E5%9B%AD/"/>
    
    <category term="山河屯铁锅炖" scheme="https://www.gaotianyang.top/tags/%E5%B1%B1%E6%B2%B3%E5%B1%AF%E9%93%81%E9%94%85%E7%82%96/"/>
    
  </entry>
  
  <entry>
    <title>北京城市图书馆</title>
    <link href="https://www.gaotianyang.top/archives/2024011428722ddf/"/>
    <id>https://www.gaotianyang.top/archives/2024011428722ddf/</id>
    <published>2024-01-13T23:57:25.000Z</published>
    <updated>2024-01-16T01:34:54.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2024/01/16/pFFPIYD.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>来到城东 20 公里的城市绿心森林公园，公园坐落于通州大运河河畔，毗邻城市副中心。走在城市绿心公园里，欣赏一下运河故道的美景，站在通蕖桥上，可以远眺大运河博物馆。</p></blockquote><p><img src="https://s11.ax1x.com/2024/01/15/pFiG6TU.jpg" alt="小楼饭店"><br><img src="https://s11.ax1x.com/2024/01/15/pFiGfp9.jpg" alt="白灼芥蓝"><br><img src="https://s11.ax1x.com/2024/01/15/pFiGgkF.jpg" alt="焦溜丸子"><br><img src="https://s11.ax1x.com/2024/01/15/pFiG2Y4.jpg" alt="醋溜木须"><br><img src="https://s11.ax1x.com/2024/01/15/pFiGRfJ.jpg" alt="上上码头"><br><img src="https://s11.ax1x.com/2024/01/15/pFiGhlR.jpg" alt="运河故道"><br><img src="https://s11.ax1x.com/2024/01/15/pFiG5Ox.jpg" alt="城市绿心森林公园"><br><img src="https://s11.ax1x.com/2024/01/15/pFiG461.jpg" alt="通蕖桥"></p><blockquote><p>站到大运河博物馆正门门前，可以领略气派的建筑风格，走进博物馆，首先映入眼帘的是一幅古画长卷，博物馆中陈列着和大运河相关的各类文物。镇水兽、石狮子、石刻佛像、各类石碑。还有各式各样的专题展，文物保护防震防灾、运河兴建演变由来、文创周边盖章打卡，让来客感受历史与科技的碰撞。</p></blockquote><p><img src="https://s11.ax1x.com/2024/01/15/pFiJ39J.jpg" alt="大运河博物馆"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJJj1.jpg" alt="古画长卷"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJ839.jpg" alt="镇水兽"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJQNF.jpg" alt="石刻佛像"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJlh4.jpg" alt="石狮"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJGcR.jpg" alt="远眺城市图书馆"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJNB6.jpg" alt="素描"><br><img src="https://s11.ax1x.com/2024/01/15/pFiJtnx.jpg" alt="书吧的躺椅"><br><img src="https://s11.ax1x.com/2024/01/16/pFFPofe.jpg" alt="龙年大吉"><br><img src="https://s11.ax1x.com/2024/01/16/pFFP7SH.jpg" alt="一叶扁舟"><br><img src="https://s11.ax1x.com/2024/01/16/pFFPHld.jpg" alt="景德镇窑青花御窑厂图圆瓷板"><br><img src="https://s11.ax1x.com/2024/01/16/pFFP5FO.jpg" alt="施工建设中"></p><blockquote><p>城市图书馆，造型别致，好似一颗颗大树将整个建筑托起，建筑的设计元素来源于银杏叶片和森林山谷，顶部茂密的叶片伞盖相互交叠，在建筑内部的设计则呈现出蜿蜒流畅的山体、山谷结构，将森林景观与图书阅览区融为一体，形成一个极具亲和力的公共开放空间。</p></blockquote><p><img src="https://s11.ax1x.com/2024/01/16/pFFPIYD.jpg" alt="城市图书馆"><br><img src="https://s11.ax1x.com/2024/01/16/pFFPqOI.jpg" alt="高耸的立柱"><br><img src="https://s11.ax1x.com/2024/01/16/pFFPOmt.jpg" alt="阳光正好"><br><img src="https://s11.ax1x.com/2024/01/16/pFFPb6A.jpg" alt="打卡"><br><img src="https://s11.ax1x.com/2024/01/16/pFFizHx.jpg" alt="越过山丘"><br><img src="https://s11.ax1x.com/2024/01/16/pFFiL34.jpg" alt="阅读是心灵的旅行"><br><img src="https://s11.ax1x.com/2024/01/16/pFFiH4U.jpg" alt="窗外美景"><br><img src="https://s11.ax1x.com/2024/01/16/pFFivuR.jpg" alt="书是攀登的阶梯"><br><img src="https://s11.ax1x.com/2024/01/16/pFFixD1.jpg" alt="意象银杏叶"><br><img src="https://s11.ax1x.com/2024/01/16/pFFiOgJ.jpg" alt="落日余晖"><br><img src="https://s11.ax1x.com/2024/01/16/pFFFpE6.jpg" alt="夜幕下的图书馆"><br><img src="https://s11.ax1x.com/2024/01/16/pFFiXv9.jpg" alt="擦肩而过"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2024/01/16/pFFPIYD.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="大运河博物馆" scheme="https://www.gaotianyang.top/tags/%E5%A4%A7%E8%BF%90%E6%B2%B3%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    
    <category term="城市图书馆" scheme="https://www.gaotianyang.top/tags/%E5%9F%8E%E5%B8%82%E5%9B%BE%E4%B9%A6%E9%A6%86/"/>
    
    <category term="城市绿心森林公园" scheme="https://www.gaotianyang.top/tags/%E5%9F%8E%E5%B8%82%E7%BB%BF%E5%BF%83%E6%A3%AE%E6%9E%97%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>北京温榆河公园</title>
    <link href="https://www.gaotianyang.top/archives/202401116c434ff0/"/>
    <id>https://www.gaotianyang.top/archives/202401116c434ff0/</id>
    <published>2024-01-11T04:49:13.000Z</published>
    <updated>2024-01-13T10:02:19.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2024/01/13/pFPnM9K.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>和岚泊驱车 30 公里，来到北京朝阳、顺义、昌平三区交界的温榆河公园。今天是一个冬日晴朗的好天气，温度适宜，天高气爽。不少人带着孩子在冰场上玩耍嬉戏，好不热闹。高高的水草，与低矮的山丘，相映成趣。我们二人边走边聊，欣赏美景，温榆河公园是个值的游玩的好去处。</p></blockquote><p><img src="https://s11.ax1x.com/2024/01/13/pFPeozF.jpg" alt="热闹的冰场"><br><img src="https://s11.ax1x.com/2024/01/13/pFPeIRU.jpg" alt="阳光灿烂"><br><img src="https://s11.ax1x.com/2024/01/13/pFPe7M4.jpg" alt="滴水成冰"><br><img src="https://s11.ax1x.com/2024/01/13/pFPebL9.jpg" alt="芸上梯田"><br><img src="https://s11.ax1x.com/2024/01/13/pFPeXIx.jpg" alt="高高的干草"><br><img src="https://s11.ax1x.com/2024/01/13/pFPeHsJ.jpg" alt="美不胜收"><br><img src="https://s11.ax1x.com/2024/01/13/pFPeLZR.jpg" alt="冬日暖阳"><br><img src="https://s11.ax1x.com/2024/01/13/pFPeOd1.jpg" alt="天高气爽"><br><img src="https://s11.ax1x.com/2024/01/13/pFPnM9K.jpg" alt="北京温榆河公园"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2024/01/13/pFPnM9K.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="温榆河公园" scheme="https://www.gaotianyang.top/tags/%E6%B8%A9%E6%A6%86%E6%B2%B3%E5%85%AC%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>冰城哈尔滨</title>
    <link href="https://www.gaotianyang.top/archives/202312242a32fbce/"/>
    <id>https://www.gaotianyang.top/archives/202312242a32fbce/</id>
    <published>2023-12-24T13:06:13.000Z</published>
    <updated>2025-02-06T02:15:45.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2023/12/27/pibTtTP.jpg" alt="首屏图"></p><a id="more"></a><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><blockquote><p>从北京朝阳站出发前往哈尔滨西，迎着朝阳出发奔赴雪乡。沿途漫山遍野的皑皑白雪，以及错落有致的干草垛与我们相伴。在晨雾中隐秘的远山和风机，好似害羞似的与我们躲藏。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/26/pibWfr6.jpg" alt="哈尔滨"><br><img src="https://s11.ax1x.com/2023/12/26/pibWXsP.jpg" alt="迎着朝阳奔赴雪乡"><br><img src="https://s11.ax1x.com/2023/12/26/pibW5VO.jpg" alt="电塔与我作伴"><br><img src="https://s11.ax1x.com/2023/12/26/pibWhqK.jpg" alt="雪乡"><br><img src="https://s11.ax1x.com/2023/12/26/pibWIaD.jpg" alt="雾中の远山"><br><img src="https://s11.ax1x.com/2023/12/26/pibWoIe.jpg" alt="疾驰于田野"><br><img src="https://s11.ax1x.com/2023/12/26/pibWHGd.jpg" alt="风机隐秘于晨雾"><br><img src="https://s11.ax1x.com/2023/12/26/pibW7PH.jpg" alt="错落有致的草垛"><br><img src="https://s11.ax1x.com/2023/12/27/pibTMWD.jpg" alt="白雪皑皑"></p><blockquote><p>来到哈尔滨，先品尝了地道的东北“晓宇盒饭”，实惠量大，味道也没的说，一吃一个不吱声。然后就来到了游客必打卡的圣索菲亚大教堂。当夜幕降临，月亮悄悄爬上屋头。大教堂身披着银色的月光，静静地诉说着岁月留下的痕迹。移步到教堂边的哈尔滨道里菜市场，感受了大东北早市的热闹与风味。有红肠、糖葫芦、烤冷面、粘豆包…数不尽的美食，让人们目不暇接，而它们的香味，让人们流连忘返~</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/27/pibT3yd.jpg" alt="闹市中的一瞥静"><br><img src="https://s11.ax1x.com/2023/12/27/pibT1QH.jpg" alt="披上月的银光"><br><img src="https://s11.ax1x.com/2023/12/27/pibTtTP.jpg" alt="灯光璀璨"><br><img src="https://s11.ax1x.com/2023/12/27/pibTJeI.jpg" alt="深沉的诉说着岁月留下的痕迹"><br><img src="https://s11.ax1x.com/2023/12/27/pibT8OA.jpg" alt="圣索菲亚大教堂"><br><img src="https://s11.ax1x.com/2024/01/01/piXJ1yj.jpg" alt="秋林里道斯"><br><img src="https://s11.ax1x.com/2024/01/01/piXJGmn.jpg" alt="道里菜市场"></p><blockquote><p>来到中央大街，打卡了马迭尔的冰糕、冰淇淋与酸奶。温热的小槽子面包加上美味的冰淇淋，mini 版的“面包诱惑”大功告成。吃完甜点，我们前往兆麟公园的路上，看到了“圣诞老人”，虽然因为兆麟公园的冰灯还未完工有些许的遗憾，不过有遗憾才能体现出旅途的美好，不是吗~远处的是哈尔滨中东铁路桥，虽然现在已经不再有车通行，但是为游客们提供了一个近距离接触历史的打卡地，也是极好的。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/27/pibTlSe.jpg" alt="中央大街"><br><img src="https://s11.ax1x.com/2023/12/27/pibTYwt.jpg" alt="圣诞老人来啦"><br><img src="https://s11.ax1x.com/2023/12/28/piqUsJO.jpg" alt="中东铁路桥"></p><blockquote><p>亚特兰蒂斯——失落的王国，还是王后？旁边就是哈尔滨松花江冰雪嘉年华，江面上面满满的人群，其中还有不少的“小土豆”们。最后的 happy ending 在老味烧烤。这个味道确实不错，值的我们在寒风中瑟瑟发抖的半个小时。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/28/piqUcSe.jpg" alt="失落的“王后”"><br><img src="https://s11.ax1x.com/2023/12/28/piqUyWD.jpg" alt="哈尔滨松花江冰雪嘉年华"><br><img src="https://s11.ax1x.com/2023/12/28/piqUrFK.jpg" alt="旋风“小土豆”"><br><img src="https://s11.ax1x.com/2023/12/28/piqUfeI.jpg" alt="值的在寒风中等待30分钟"><br><img src="https://s11.ax1x.com/2023/12/28/piqUgQH.jpg" alt="老味烧烤"></p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><blockquote><p>从酒店出发，跨过上冻的松花江去冰雪大世界。白天的冰雪大世界，各色冰雕让我们目不暇接，惊叹冰雕工艺师傅们的一双巧手。《冰雪之冠》、《世纪之钟》、《冰心筑梦》等等的作品真的是太棒了 👍。经过长达 5.5 小时的等待，我们终于来到了大滑梯的出发点，紧张刺激的 1 分钟转瞬即逝，虽然等待时间有些长，不过也算是圆满体验了网红项目。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/28/piqU2yd.jpg" alt="上冻的松花江"><br><img src="https://s11.ax1x.com/2023/12/28/piqUROA.jpg" alt="冰雕“空中楼阁”"><br><img src="https://s11.ax1x.com/2023/12/28/piqdRat.jpg" alt="冰雪之冠"><br><img src="https://s11.ax1x.com/2023/12/28/piqdWIP.jpg" alt="冬日晴空"><br><img src="https://s11.ax1x.com/2023/12/28/piqd5RS.jpg" alt="世纪之钟"><br><img src="https://s11.ax1x.com/2023/12/31/piOfNCD.jpg" alt="冰雪大世界全景"><br><img src="https://s11.ax1x.com/2024/01/01/piX8WE6.jpg" alt="东北F4"><br><img src="https://s11.ax1x.com/2024/01/01/piX85CD.jpg" alt="小主"><br><img src="https://s11.ax1x.com/2024/01/01/piX8fUK.jpg" alt="土地公公"><br><img src="https://s11.ax1x.com/2024/01/01/piX8ogH.jpg" alt="冰雪交融"><br><img src="https://s11.ax1x.com/2024/01/01/piX8Tvd.jpg" alt="雪绒花"><br><img src="https://s11.ax1x.com/2024/01/01/piX8HKA.jpg" alt="高耸挺拔"><br><img src="https://s11.ax1x.com/2023/12/28/piqd4G8.jpg" alt="排队大滑梯中"><br><img src="https://s11.ax1x.com/2023/12/28/piqdhPf.jpg" alt="冰心筑梦"><br><img src="https://s11.ax1x.com/2023/12/28/piqdIxg.jpg" alt="来张全景照片"><br><img src="https://s11.ax1x.com/2023/12/28/piqd7rj.jpg" alt="历经5.5h终于等到你"></p><blockquote><p>夜色降临，灯光亮起。我们一同去观看了哈冰秀，欣赏了来自外国的表演艺术家们的精彩表演，杂技、花样滑冰、舞蹈，让人看了不住的连连叫好。而后，乘坐了雪花摩天轮，一览了冰雪大世界的美丽夜景。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/28/piqdTMQ.jpg" alt="绝美夜景"><br><img src="https://s11.ax1x.com/2023/12/29/piLQMJs.jpg" alt="哈冰秀演出"><br><img src="https://s11.ax1x.com/2023/12/29/piLQ8yV.jpg" alt="雪花摩天轮"><br><img src="https://s11.ax1x.com/2023/12/29/piLQQWn.jpg" alt="天空之舞"><br><img src="https://s11.ax1x.com/2023/12/29/piLQ3Q0.jpg" alt="俯瞰夜场全景"><br><img src="https://s11.ax1x.com/2023/12/29/piLQlzq.jpg" alt="来个自拍🤳🏻"><br><img src="https://s11.ax1x.com/2023/12/29/piLQtwF.jpg" alt="我和小可爱"><br><img src="https://s11.ax1x.com/2023/12/29/piLQGLT.jpg" alt="五彩缤纷"><br><img src="https://s11.ax1x.com/2023/12/29/piLQNo4.jpg" alt="美不胜收"><br><img src="https://s11.ax1x.com/2023/12/29/piL3poF.jpg" alt="华灯出彩"><br><img src="https://s11.ax1x.com/2023/12/29/piL3Ci4.jpg" alt="(＾－＾)V"><br><img src="https://s11.ax1x.com/2023/12/29/piL3iW9.jpg" alt="哈尔滨国际冰雕比赛"><br><img src="https://s11.ax1x.com/2023/12/29/piL1zZT.jpg" alt="可可爱爱"><br><img src="https://s11.ax1x.com/2023/12/29/piL3SdU.jpg" alt="冰雪女王"><br><img src="https://s11.ax1x.com/2023/12/29/piL3PJJ.jpg" alt="LOVE"><br><img src="https://s11.ax1x.com/2023/12/29/piL3AQ1.jpg" alt="穿越城堡"><br><img src="https://s11.ax1x.com/2023/12/29/piL3FzR.jpg" alt="在冰面上出溜滑"><br><img src="https://s11.ax1x.com/2023/12/30/piO9ViD.jpg" alt="绚墨舞台"><br><img src="https://s11.ax1x.com/2023/12/30/piO9AIO.jpg" alt="窗外的世界很精彩"><br><img src="https://s11.ax1x.com/2023/12/30/piO9Pqx.jpg" alt="灯光下的冰雪之冠"><br><img src="https://s11.ax1x.com/2023/12/30/piO9kdK.jpg" alt="笔芯"><br><img src="https://s11.ax1x.com/2023/12/30/piO9FZ6.jpg" alt="贴贴"><br><img src="https://s11.ax1x.com/2023/12/30/piO9ZJe.jpg" alt="居高临下傲视群雄的赶脚"><br><img src="https://s11.ax1x.com/2023/12/30/piO9eRH.jpg" alt="小兔纸"><br><img src="https://s11.ax1x.com/2023/12/30/piO9mzd.jpg" alt="歪头杀"><br><img src="https://s11.ax1x.com/2023/12/30/piOClc9.jpg" alt="带个皇冠👑"><br><img src="https://s11.ax1x.com/2023/12/30/piOCuhF.jpg" alt="爱心墙"><br><img src="https://s11.ax1x.com/2024/01/01/piXJafU.jpg" alt="抓拍一下"><br><img src="https://s11.ax1x.com/2024/01/01/piXJNkV.jpg" alt="保持微笑"><br><img src="https://s11.ax1x.com/2024/01/01/piXJJwq.jpg" alt="最萌身高差"><br><img src="https://s11.ax1x.com/2024/01/01/piXJUYT.jpg" alt="小拳拳"><br><img src="https://s11.ax1x.com/2024/01/01/piXJYT0.jpg" alt="亭台楼阁华光出彩"><br><img src="https://s11.ax1x.com/2024/01/01/piXJwpF.jpg" alt="第二十五届哈尔滨冰雪大世界"><br><img src="https://s11.ax1x.com/2023/12/30/piOCG0x.jpg" alt="蒸花卷"><br><img src="https://s11.ax1x.com/2023/12/30/piOCQ1J.jpg" alt="铁锅炖大鹅"></p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><blockquote><p>第三天，我们先去了太阳岛冰雪节，看了看坐落在门口的“蜜雪冰城”同款大雪人，而后又来到松花江江面上，近距离接触了冬天的冰面，最后我们来到了哈尔滨极地公园，看到了可爱的小企鹅们，踩着轻快的步伐，向我们缓缓走来。其中一只还背着个小书包，甚是可爱！</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/31/piOfagH.jpg" alt="温暖雪宝儿"><br><img src="https://s11.ax1x.com/2024/01/01/piX8h4O.jpg" alt="蜜雪冰城同款雪王"><br><img src="https://s11.ax1x.com/2024/01/01/piX8I8e.jpg" alt="雪王给你ღ( ´･ᴗ･` )比个心"><br><img src="https://s11.ax1x.com/2023/12/30/piOCntU.jpg" alt="哈尔滨极地公园"><br><img src="https://s11.ax1x.com/2023/12/30/piOCMp4.jpg" alt="小企鹅"><br><img src="https://s11.ax1x.com/2023/12/30/piOC1XR.jpg" alt="淘学企鹅"><br><img src="https://s11.ax1x.com/2023/12/30/piOC8n1.jpg" alt="萌萌哒"><br><img src="https://s11.ax1x.com/2023/12/31/piOf3Hx.jpg" alt="可爱捏"><br><img src="https://s11.ax1x.com/2023/12/31/piOfGE6.jpg" alt="憨态可掬"></p><blockquote><p>来到米村拌饭吃过简餐之后，体验了一把东北老铁的最爱，搓澡！卸去一天的疲惫。在夜幕降临的时候，漫天的雪花，缓缓落下，似乎在为我们的到来，划上一个圆满的尾声。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/31/piORdiD.jpg" alt="滨果汤泉空间"><br><img src="https://s11.ax1x.com/2023/12/31/piOR0RH.jpg" alt="哈根达斯冰淇淋"></p><h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2><blockquote><p>来到大东北，怎能不品尝一下东北名菜“锅包肉”呢，去彭氏包子，吃了肠、锅巴肉、和排骨包子、虾仁包子，味道确实不错。下午整理好行囊，伴着夕阳回家，结束这充实的哈尔滨之旅。</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/31/piORceP.jpg" alt="锅巴肉"><br><img src="https://s11.ax1x.com/2023/12/31/piORyLt.jpg" alt="一品彭氏包子"><br><img src="https://s11.ax1x.com/2023/12/31/piORrQA.jpg" alt="回家喽"><br><img src="https://s11.ax1x.com/2023/12/31/piORBzd.jpg" alt="金色霞光"><br><img src="https://s11.ax1x.com/2023/12/31/piORssI.jpg" alt="远山与晚霞"><br><img src="https://s11.ax1x.com/2023/12/31/piORgdf.jpg" alt="雪"><br><img src="https://s11.ax1x.com/2023/12/31/piOfdvd.jpg" alt="速度"><br><img src="https://s11.ax1x.com/2023/12/31/piOfU8e.jpg" alt="雪原"><br><img src="https://s11.ax1x.com/2023/12/31/piOfY4O.jpg" alt="白马过隙"><br><img src="https://s11.ax1x.com/2023/12/31/piOfJUK.jpg" alt="驶过森林"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2023/12/27/pibTtTP.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="哈尔滨" scheme="https://www.gaotianyang.top/tags/%E5%93%88%E5%B0%94%E6%BB%A8/"/>
    
    <category term="索菲亚大教堂" scheme="https://www.gaotianyang.top/tags/%E7%B4%A2%E8%8F%B2%E4%BA%9A%E5%A4%A7%E6%95%99%E5%A0%82/"/>
    
    <category term="冰雪大世界" scheme="https://www.gaotianyang.top/tags/%E5%86%B0%E9%9B%AA%E5%A4%A7%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>前端面试经23</title>
    <link href="https://www.gaotianyang.top/archives/20231211b5b74555/"/>
    <id>https://www.gaotianyang.top/archives/20231211b5b74555/</id>
    <published>2023-12-11T06:56:56.000Z</published>
    <updated>2024-02-19T01:10:09.079Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg" alt="首屏图"></p><a id="more"></a><h2 id="前端面试汇总"><a href="#前端面试汇总" class="headerlink" title="前端面试汇总"></a>前端面试汇总</h2><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><h4 id="最近的工作经历及项目经验，用到了哪些技术，负责哪些工作"><a href="#最近的工作经历及项目经验，用到了哪些技术，负责哪些工作" class="headerlink" title="最近的工作经历及项目经验，用到了哪些技术，负责哪些工作"></a>最近的工作经历及项目经验，用到了哪些技术，负责哪些工作</h4><ul><li>React<ul><li>hook<ul><li>useState 是一个 React Hook，它允许你向组件添加一个状态变量。</li><li>useEffect 是一个 React Hook，它允许你将组件与外部系统同步。<ul><li>第二个可选参数为 [] 时初始化获取数据</li><li>第二个可选参数为 一个 或 多个值 时，监听这些值的变化而进行操作</li><li>使用 return 的清除机制 <a href="https://zh-hans.legacy.reactjs.org/docs/hooks-effect.html">文档传送门</a></li></ul></li><li>useRef 是一个 React Hook，它能帮助引用一个不需要渲染的值<ul><li>useRef 用于操作 DOM 元素 <code>useRef().current.reload()</code> <a href="https://zhuanlan.zhihu.com/p/609933594">文档传送门</a></li></ul></li><li>useMemo 是一个 React Hook，它在每次重新渲染的时候能够缓存计算的结果。</li></ul></li></ul></li><li>Antd<ul><li>pro-components</li><li>pro-table</li><li>pro-card</li></ul></li><li>single-spa</li><li>charts<ul><li>cloud-charts</li><li>echarts</li></ul></li><li>formilyjs</li><li>classNames 一个简单的支持动态多类名的工具库</li><li>eventemitter2 组件间进行事件的监听与传递</li><li>协同开发<ul><li>墨刀 在线原型</li><li>codesign 在线设计稿</li><li>Yapi 后端代码联调</li><li>禅道/JIRA 开发任务拆分管理</li><li>Jenkins CI/CD</li></ul></li><li>tailwindcss[‘teilˌwind] 它是一个 CSS 样式库，为我们提供了构建定制设计而无需使用自定义样式所需的所有构建块</li></ul><h4 id="遇到了什么问题及怎么处理的"><a href="#遇到了什么问题及怎么处理的" class="headerlink" title="遇到了什么问题及怎么处理的"></a>遇到了什么问题及怎么处理的</h4><ul><li>优化问题<ul><li>数据大屏仿 PPT 横向切换 react-transition-group<ul><li>使用 location 承接 trend 标记滚动方向</li><li>使用 CSSTransition 实现横向滚动特效</li><li>横屏切换加载时添加 load 效果，避免白屏</li></ul></li></ul></li><li>兼容问题<ul><li>九宫格动效低版本浏览器效果差异</li></ul></li><li>菜单定制化需求<ul><li>委员会管理的树形菜单与联动</li><li>根节点重复</li></ul></li><li>formilyjs 复杂场景<ul><li>数据联动</li><li>数据字典获取<ul><li>window.__globalData</li><li>window.__globalData.currentUser</li></ul></li><li>数据异步获取<ul><li>await window.__api.func()</li></ul></li><li>表单的动态生成</li></ul></li></ul><h3 id="CSS-相关"><a href="#CSS-相关" class="headerlink" title="CSS 相关"></a>CSS 相关</h3><h4 id="BFC-简单介绍，什么是-BFC，如何创建-BFC，BFC-的特性有什么。BFC-上下两个相邻的容器有什么特点"><a href="#BFC-简单介绍，什么是-BFC，如何创建-BFC，BFC-的特性有什么。BFC-上下两个相邻的容器有什么特点" class="headerlink" title="BFC 简单介绍，什么是 BFC，如何创建 BFC，BFC 的特性有什么。BFC 上下两个相邻的容器有什么特点"></a>BFC 简单介绍，什么是 BFC，如何创建 BFC，BFC 的特性有什么。BFC 上下两个相邻的容器有什么特点</h4><p>什么是 BFC(块级格式化上下文)：Block Formatting Context，解释为块级格式化上下文</p><p>创建方式：</p><ol><li>display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex</li><li>overflow 的值不是 visible（overflow:hidden、overflow:scroll）</li><li>float 的值不是 none。（float:left 或者 float:right）</li><li>position 的值不是 static 或者 relative。（position:absolute 或者 position:fixed）</li><li>父元素与正常文件流的子元素（非浮动子元素）自动形成一个 BFC</li></ol><p>特性：</p><ol><li>父亲管儿子(子元素浮动，父元素不再塌陷)</li><li>兄弟之间划清界限(兄弟元素其一浮动重叠，另一个元素设置 BFC 便不再重叠)</li></ol><h3 id="JS-相关"><a href="#JS-相关" class="headerlink" title="JS 相关"></a>JS 相关</h3><h4 id="null-与-undefined-的区别"><a href="#null-与-undefined-的区别" class="headerlink" title="null 与 undefined 的区别"></a>null 与 undefined 的区别</h4><p>null 表示没有对象，即该处不应该有值。<br>典型用法是:作为函数的参数，表示该函数的参数不是对象。作为对象原型链的终点。</p><p>undefined 表示缺少值，就是此处应该有一个值，但是还没有定义。<br>典型用法是:变量被声明了，但没有赋值时，就等于 undefined。</p><h4 id="typeOf-判断-null-的时候是-object-还是一个普通数据类型"><a href="#typeOf-判断-null-的时候是-object-还是一个普通数据类型" class="headerlink" title="typeOf 判断 null 的时候是 object 还是一个普通数据类型"></a>typeOf 判断 null 的时候是 object 还是一个普通数据类型</h4><p>可参考 <a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#检测变量的类型并区分数组和对象">检测变量的类型并区分数组和对象</a></p><table><thead><tr><th>值</th><th>类型</th></tr></thead><tbody><tr><td>typeof 1</td><td>“number”</td></tr><tr><td>typeof NaN</td><td>“number”</td></tr><tr><td>typeof “1”</td><td>“string”</td></tr><tr><td>typeof true</td><td>“boolean”</td></tr><tr><td>typeof undefined</td><td>“undefined”</td></tr><tr><td>typeof null</td><td>“object”</td></tr><tr><td>typeof []</td><td>“object”</td></tr><tr><td>typeof {}</td><td>“object”</td></tr></tbody></table><ul><li>如果返回 number，判断是否是 NAN，isNaN(a) ，</li><li>首先使用 typeof 判断，如果返回 object，判断是否为 null</li><li>判断数组 or 对象<ul><li>最后使用 toString 如果是”[object Object]”是对象，否则是数组。</li><li>最后使用 <code>[] instanceof Array</code> <code>&#123;&#125; instanceof Array</code>如果是 false 是对象，否则是数组。</li></ul></li></ul><p>为什么 null 的类型判断是 Object 呢？</p><table><thead><tr><th>数据类型</th><th>机器码标识</th></tr></thead><tbody><tr><td>对象(Object)</td><td>000</td></tr><tr><td>整数</td><td>1</td></tr><tr><td>浮点数</td><td>010</td></tr><tr><td>字符串</td><td>100</td></tr><tr><td>布尔</td><td>110</td></tr><tr><td>undefined</td><td>-2^31(即全为 1)</td></tr><tr><td>null</td><td>全为 0</td></tr></tbody></table><p>在判断数据类型时，是根据机器码低位标识来判断的，而 null 的机器码标识为全 0，而对象的机器码低位标识为 000。所以 typeof null 的结果被误判为 Object。</p><p><a href="https://juejin.cn/post/6844903895177805837">为什么 typeof null 的结果是 Object?</a></p><h4 id="扩展运算符是深拷贝还是浅拷贝"><a href="#扩展运算符是深拷贝还是浅拷贝" class="headerlink" title="扩展运算符是深拷贝还是浅拷贝"></a>扩展运算符是深拷贝还是浅拷贝</h4><blockquote><p>元素是简单类型是深拷贝，元素是引用类型是浅拷贝</p></blockquote><p>如果只是一层数组或是对象，其元素只是简单类型的元素，那么属于深拷贝 (就是一层拷贝，暂时就理解为深拷贝吧! ! ! ! )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = [...aa];</span><br><span class="line">bb.age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa.age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>如果数组或对象中的元素是引用类型的元素，那么就是浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  address: &#123;</span><br><span class="line">    city: <span class="string">&#x27;shanghai&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = [...aa];</span><br><span class="line">bb.address.city = <span class="string">&#x27;shenzhen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.address.city); <span class="comment">// shenzhen;</span></span><br></pre></td></tr></table></figure><p>如何使得深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aa = &#123;</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  name: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">  address: &#123;</span><br><span class="line">    city: <span class="string">&#x27;shanghai&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bb = &#123;</span><br><span class="line">  ...aa,</span><br><span class="line">  address: &#123; ...aa.address &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bb.address.city = <span class="string">&#x27;shenzhen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa.address.city); <span class="comment">// shanghai</span></span><br></pre></td></tr></table></figure><p>或者利用 JSON.parse(JSON.stringfy(xxx))来实现深拷贝<br>注意: JSON.parse(JSON.stringfy(xxx))的方法，如果变量中含有 Promise 对象，则不可以使用该方法</p><p><a href="https://blog.csdn.net/weixin_43925630/article/details/111299038">第一层深拷贝第二层浅拷贝</a></p><h4 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h4><ol><li>语法更加简洁、清晰</li><li>箭头函数不会创建自己的 this（重要！！深入理解！！）</li><li>箭头函数继承而来的 this 指向永远不变</li><li>.call()/.apply()/.bind()无法改变箭头函数中 this 的指向</li><li>箭头函数不能作为构造函数使用</li><li>箭头函数没有自己的 arguments</li><li>箭头函数没有原型 prototype</li><li>箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</li></ol><p><a href="https://juejin.cn/post/6844903805960585224">ES6 - 箭头函数、箭头函数与普通函数的区别</a></p><h4 id="箭头函数为什么不能当做构造函数"><a href="#箭头函数为什么不能当做构造函数" class="headerlink" title="箭头函数为什么不能当做构造函数"></a>箭头函数为什么不能当做构造函数</h4><ul><li>从上面的运行结果也可以看到箭头函数与构造函数相比，缺少了很多东西，比如：caller，arguments，prototype，但同时也可以看到，箭头函数是有<strong>proto</strong>属性的，所以箭头函数本身是存在原型链的，他也是有自己的构造函数的，但是原型链到箭头函数这一环就停止了，因为它自己没有 prototype 属性，没法让他的实例的<strong>proto</strong>属性指向，所以箭头函数也就无法作为构造函数。</li><li>同时我们可以看到，由于箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数，不能绑定 this，所以 call()和 apply()的第一个参数会被忽略。</li></ul><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#箭头函数能作为构造函数吗">箭头函数能作为构造函数吗</a></p><h4 id="new-的执行过程是怎样的"><a href="#new-的执行过程是怎样的" class="headerlink" title="new 的执行过程是怎样的"></a>new 的执行过程是怎样的</h4><ol><li>创建一个新对象</li><li>将新对象的<em>proto</em>指向构造函数的 prototype 对象</li><li>将构造函数的作用域赋值给新对象 （也就是 this 指向新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = &#123;&#125;;</span><br><span class="line">Obj._proto_ = Person.prototype();</span><br><span class="line">Person.call(Obj);</span><br></pre></td></tr></table></figure><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#New关键词干了什么">New 关键词干了什么</a></p><h4 id="new-操作符实例化对象时-构造函数有返回值-字符串-会怎么样"><a href="#new-操作符实例化对象时-构造函数有返回值-字符串-会怎么样" class="headerlink" title="new 操作符实例化对象时 构造函数有返回值(字符串)会怎么样"></a>new 操作符实例化对象时 构造函数有返回值(字符串)会怎么样</h4><blockquote><p>正常将对象实例化</p></blockquote><p>当构造函数返回了函数或非 null 对象时(func、[]、{})<br>执行 var x = new X()，此时只是将 X 作为普通的函数执行，<br>函数执行的返回值直接作为变量 x 的值，变量 x 不是类 X 的实例化对象，X.prototype 也不是变量 x 的原型。</p><p>其他情况（构造函数无返回值、返回值不是对象也不是函数、返回值是 null），正常将对象实例化。</p><p><a href="https://blog.csdn.net/iispring/article/details/105108178">JavaScript 中使用 new 操作符实例化对象时构造函数有返回值的情况分析</a></p><h4 id="class-和-function-的区别"><a href="#class-和-function-的区别" class="headerlink" title="class 和 function 的区别"></a>class 和 function 的区别</h4><p>相同点：</p><p>都可以成为构造函数</p><p>不同点：</p><ul><li>class 构造函数必须使用 new 操作符</li><li>class 声明不可以提升</li><li>class 不可以用 call、apply、bind 改变执行上下文</li></ul><p><a href="https://blog.csdn.net/Jack_lzx/article/details/121098261">JavaScript class 和 function 的区别</a><br><a href="https://zhuanlan.zhihu.com/p/657235691">JavaScript ES6-class 和 ES5-构造函数 function 的区别</a></p><h4 id="class-里存在-this-吗"><a href="#class-里存在-this-吗" class="headerlink" title="class 里存在 this 吗"></a>class 里存在 this 吗</h4><p>有 this 但是不可以通过 .call 的方式进行指向</p><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="浏览器解析流程"><a href="#浏览器解析流程" class="headerlink" title="浏览器解析流程"></a>浏览器解析流程</h4><ol><li>DNS 域名解析</li><li>发起 TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回响应结果</li><li>浏览器解析渲染页面</li><li>断开连接</li></ol><p>可参考<a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#输入地址后的过程">输入地址后的过程</a></p><h4 id="DNS-域名解析有哪些操作"><a href="#DNS-域名解析有哪些操作" class="headerlink" title="DNS 域名解析有哪些操作"></a>DNS 域名解析有哪些操作</h4><ol><li>查看浏览器缓存</li><li>查看系统缓存</li><li>查看路由器缓存</li><li>查看 ISP DNS 缓存</li><li>询问根域名服务器</li><li>询问顶级域名服务器</li><li>询问权威域名（主域名）服务器</li><li>保存结果至缓存</li></ol><p><a href="https://www.sfn.cn/news/technology/detail/222.html?navId=22">一文读懂 DNS 原理及解析过程</a></p><h4 id="TCP-链接过程-3-次握手-4-次挥手"><a href="#TCP-链接过程-3-次握手-4-次挥手" class="headerlink" title="TCP 链接过程 3 次握手 4 次挥手"></a>TCP 链接过程 3 次握手 4 次挥手</h4><p><a href="https://bbs.huaweicloud.com/blogs/233667">一文搞懂 TCP 的三次握手和四次挥手</a></p><h4 id="请求如果阻塞要如何处理"><a href="#请求如果阻塞要如何处理" class="headerlink" title="请求如果阻塞要如何处理"></a>请求如果阻塞要如何处理</h4><p><a href="https://blog.csdn.net/qq_34337333/article/details/131239848">前端请求队列，解决多个请求同时请求一个接口导致阻塞的问题</a></p><h4 id="是否了解-UDP-用户数据报协议-协议"><a href="#是否了解-UDP-用户数据报协议-协议" class="headerlink" title="是否了解 UDP(用户数据报协议)协议"></a>是否了解 UDP(用户数据报协议)协议</h4><p>UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。当强调传输性能而不是传输的完整性时适合使用此种协议.</p><p><a href="https://baike.baidu.com/item/UDP/571511?fr=ge_ala">UDP 协议</a></p><h4 id="浏览器如何渲染-html"><a href="#浏览器如何渲染-html" class="headerlink" title="浏览器如何渲染 html"></a>浏览器如何渲染 html</h4><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><p><a href="https://www.gaotianyang.top/archives/2021032932cd20c6/#浏览器渲染过程">浏览器渲染过程</a></p><h4 id="有哪些因素会阻塞浏览器渲染"><a href="#有哪些因素会阻塞浏览器渲染" class="headerlink" title="有哪些因素会阻塞浏览器渲染"></a>有哪些因素会阻塞浏览器渲染</h4><p>白屏时间的瓶颈主要体现在下载 CSS 文件、下载 JavaScript 文件和执行 JavaScript； 所以要想缩短白屏时长，可以有以下策略：</p><ol><li>内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了，但并不是所有的场合都适合内联。</li><li>尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。</li><li>将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 async 或者 defer。</li><li>利用媒体查询属性，在特定的场景下加载特定的 CSS 文件。</li></ol><p><a href="https://juejin.cn/post/7083752157085696014">漫漫前端路之浏览器基础——页面渲染阻塞原因分析篇</a></p><h4 id="CDN-的原理是什么"><a href="#CDN-的原理是什么" class="headerlink" title="CDN 的原理是什么"></a>CDN 的原理是什么</h4><p>CDN 的原理是: 基于分布式架构，通过将源服务器上的内容分发到多个节点服务器上，使用户能够从最近的服务器中获取所需内容。<br>这些节点服务器被称为 边缘服务器，它们通常位于不同的地理位置，并通过高速互联网连接互相交换数据。<br>用户通过接入离他们最近的 边缘服务器 来获取所需的内容，从而降低了响应时间和延迟，提高了网站的访问速度。</p><p><a href="https://www.51cto.com/article/750758.html">CDN 原理入门，你学会了吗？</a></p><h3 id="react-相关"><a href="#react-相关" class="headerlink" title="react 相关"></a>react 相关</h3><h4 id="React-函数组件和类组件的区别"><a href="#React-函数组件和类组件的区别" class="headerlink" title="React 函数组件和类组件的区别"></a>React 函数组件和类组件的区别</h4><ol><li>语法上<ol><li>函数组件它接收一个 <code>props</code> 对象返回一个 <code>react</code> 元素</li><li>类组件需要去继承 <code>React.Component</code> 并且创建 <code>render</code> 函数返回 <code>react</code> 元素</li></ol></li><li><del>状态管理</del> 使用 hooks 解决</li><li><del>生命周期钩子</del> 使用 hooks 解决</li><li>调用方式<ol><li>函数组件直接调用函数使用</li><li>类组件需要先用 <code>new</code> 操作符将其实例化，然后调用刚才生成实例的 <code>render</code> 方法</li></ol></li><li>获取渲染时的值</li></ol><ul><li>语法上</li></ul><p>函数组件是一个纯函数，它接收一个 <code>props</code> 对象返回一个 <code>react</code> 元素；<br>类组件需要去继承 <code>React.Component</code> 并且创建 <code>render</code> 函数返回 <code>react</code> 元素，虽然实现的效果相同，但需要更多的代码。</p><ul><li><del>状态管理</del></li></ul><p>因为函数组件是一个纯函数，所以不能在组件中使用 <code>setState()</code>，这也是为什么把函数组件称作为无状态组件。<br>如果要在组件中使用 <code>state</code> ，可以选择创建一个类组件或者将 <code>state</code> 提升到你的父组件中，然后通过 <code>props</code> 对象传递到子组件。</p><blockquote><p>注意：在 <code>react16.8</code> 版本中添加了 <code>hooks</code> ，使得我们可以在函数组件中使用 <code>useState</code> 钩子去管理 <code>state</code> ，使用 <code>useEffect</code> 钩子去使用生命周期函数。<br>因此，2、3 两点就不是它们的区别点。而从这个改版中我们也可以看出 React 团队更看重函数组件，而且曾提及到在 <code>react</code> 之后的版本将会对函数组件的性能方面进行提升。</p></blockquote><ul><li><del>生命周期钩子</del></li></ul><p>函数组件中不能使用生命周期钩子，原因和不能使用 <code>state</code> 一样，所有的生命周期钩子都来自于继承的 <code>React.Component</code> 中。<br>因此，如果要使用生命周期钩子，就需要使用类组件。</p><blockquote><p>注意：在 <code>react16.8</code> 版本中添加了 <code>hooks</code> ，使得我们可以在函数组件中使用 <code>useState</code> 钩子去管理 <code>state</code> ，使用 <code>useEffect</code> 钩子去使用生命周期函数。<br>因此，2、3 两点就不是它们的区别点。而从这个改版中我们也可以看出 React 团队更看重函数组件，而且曾提及到在 <code>react</code> 之后的版本将会对函数组件的性能方面进行提升。</p></blockquote><ul><li>调用方式</li></ul><p>如果 <code>SayHi</code> 是一个函数， <code>React</code> 需要调用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你的代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// React 内部</span></span><br><span class="line"><span class="keyword">const</span> result = SayHi(props); <span class="comment">// » &lt;p&gt;Hello, React&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>如果 <code>SayHi</code> 是一个类， <code>React</code> 需要先用 <code>new</code> 操作符将其实例化，然后调用刚才生成实例的 <code>render</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHi</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, React<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// React 内部</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> SayHi(props); <span class="comment">// » SayHi &#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> result = instance.render(); <span class="comment">// » &lt;p&gt;Hello, React&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>可想而知，函数组件重新渲染将重新调用组件方法返回新的 <code>react</code> 元素，类组件重新渲染将 <code>new</code> 一个新的组件实例，<br>然后调用 <code>render</code> 类方法返回 <code>react</code> 元素，这也说明为什么类组件中 <code>this</code> 是可变的。</p><ul><li>获取渲染时的值</li></ul><p>考虑以下组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserProfile</code> 组件很简单，就一个 <code>Follow</code> 按钮，该按钮使用了 <code>setTimeout</code> 模拟网络请求。<br>用户点击这个按钮之后会弹出一个警告框。如果 <code>props.user</code> 为 <code>&#39;Dan&#39;</code>，它将在三秒钟后显示 <code>&#39;Followed Dan&#39;</code>。</p><p>我们如何将其编写为类？天真的翻译可能像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage() &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + <span class="built_in">this</span>.props.user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.showMessage.bind(<span class="built_in">this</span>), <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常认为这两个代码段是等效的。人们经常在这些模式之间自由重构，而没有注意到它们的含义</p><p>但是，这两个代码段是完全不同的。</p><p>分别按下面的顺序来操作 Follow 按钮：</p><ol><li>先点击 Follow 按钮</li><li>在 3s 之前更改下拉选择项的选项</li><li>阅读弹出的警告框内容</li></ol><p>这就发现函数组件和类组件是有区别的：</p><ul><li>函数组件：按上面所列的三个步骤操作时，当用户在 3s 前更改下拉选择框的选项时，h1 的用户名会立马改变，而 3s 后弹出的警告框中的用户名并不会改变</li><li>类组件：按上面所列的三个步骤操作时，当用户在 3s 前更改下拉选择框的选项时，h1 中的用户名会立马改变，而 3s 后弹出的警告框中的用户名也会改变</li></ul><p>我们可以在类的构造函数中绑定这些方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 获取 props</span></span><br><span class="line">    cosnt props = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它们不是类方法</span></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，函数组件和类组件所达到的效果都一样了。在类组件中可以捕获渲染时的 props。效果上看上去是一样了，但看起来怪怪的。如果在类组件中的 render 中定义函数而不是使用类方法，那么还有使用类的必要性？</p><p><a href="https://cloud.tencent.com/developer/article/1843744">React 函数组件和类组件的区别</a></p><h4 id="Usememo-是否了解，原理是什么"><a href="#Usememo-是否了解，原理是什么" class="headerlink" title="Usememo 是否了解，原理是什么"></a>Usememo 是否了解，原理是什么</h4><ul><li>useMemo 是用来缓存计算属性的，它会在发现依赖未发生改变的情况下返回旧的计算属性值的地址。</li><li>useMemo 绝不是用的越多越好，缓存这项技术本身也需要成本。</li><li>useMemo 的使用场景之一是:只需要给拥有巨大计算量的计算属性缓存即可。</li><li>useMemo 的另一个使用场景是：当有计算属性被传入子组件，并且子组件使用了 react.memo 进行了缓存的时候,为了避免子组件不必要的渲染时使用</li></ul><p><a href="https://juejin.cn/post/7108278900085489671">React 性能优化篇之 useMemo 的使用场景及其深度解读</a></p><h4 id="为什么使用-hooks"><a href="#为什么使用-hooks" class="headerlink" title="为什么使用 hooks"></a>为什么使用 hooks</h4><ol><li>更容易复用代码</li><li>清爽的代码风格+代码量更少</li><li>代码可读性更强</li><li>组件树层级变浅</li><li>不用再去考虑 this 的指向问题</li></ol><p><a href="https://zhuanlan.zhihu.com/p/392191865">为什么要使用 Hooks？</a></p><ul><li>优点：<ul><li>更容易复用代码</li><li>代码量更少</li></ul></li><li>缺点：<ul><li>响应式的 useEffect</li><li>hooks 不擅长异步的代码</li><li>custom hooks 有时严重依赖参数的不可变性</li></ul></li><li>解决方案：<ul><li>不要在 useEffect 里面写太多的依赖项，划分这些依赖项成多个单一功能的 useEffect。其实这点是遵循了软件设计的“单一职责模式”。</li><li>如果你碰到状态不同步的问题，可以考虑下手动传递参数到函数。</li><li>拆分组件，细化组件的粒度。复杂业务场景中使用 hooks，应尽可能地细分组件，使得组件的功能尽可能单一，这样的 hooks 组件更好维护。</li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/88593858">谈谈 react hooks 的优缺点</a></p><h4 id="usestate-赋值操作是同步的还是异步的，多次赋值，界面会渲染几次"><a href="#usestate-赋值操作是同步的还是异步的，多次赋值，界面会渲染几次" class="headerlink" title="usestate 赋值操作是同步的还是异步的，多次赋值，界面会渲染几次"></a>usestate 赋值操作是同步的还是异步的，多次赋值，界面会渲染几次</h4><p>严格来说，不是异步也不是同步。setState 有时候不会即时更新是因为 React 的优化机制，在事件处理器中批量处理更新。<br>而在某些时候，setState 会同步更新。分别看一下这两种情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>组件只会更新一次</p><p>而在异步代码（promise、async/await、setTimeout/setInterval、fetch）中的更新，不会批量处理， 比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  callAPI().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>组件会更新两次，我们称这样的更新是 outside of react event handlers,<br>发生在 react 事件处理器之外，此时的回调在 react 执行机制完成之后进行，react 没办法批量更新。</p><p><a href="https://juejin.cn/post/6997020924205596702">关于 useState 你需要知道的一切</a></p><h4 id="为什么虚拟-dom-优于操作真实-dom"><a href="#为什么虚拟-dom-优于操作真实-dom" class="headerlink" title="为什么虚拟 dom 优于操作真实 dom"></a>为什么虚拟 dom 优于操作真实 dom</h4><ul><li>虚拟 DOM 不一定会比操作原生 DOM 更快。</li><li>虚拟 DOM 的优势在于节点进行改动的时候尽量减少开销</li><li>React 从来没说过虚拟 DOM 会比原生更快。</li><li>框架的本质是提升开发效率，让我们的注意力更集中于数据</li></ul><p><a href="https://juejin.cn/post/7130538545063657486">使用虚拟 DOM 一定会比直接操作真实 DOM 快吗？这还真不一定。</a></p><h4 id="是否了解-react-的优化算法，是如何优化的"><a href="#是否了解-react-的优化算法，是如何优化的" class="headerlink" title="是否了解 react 的优化算法，是如何优化的"></a>是否了解 react 的优化算法，是如何优化的</h4><ol><li>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。</li><li>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</li><li>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。</li></ol><p><a href="https://juejin.cn/post/7116326409961734152">「React 深入」一文吃透虚拟 DOM 和 diff 算法</a></p><h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><h4 id="全面质量管理系统"><a href="#全面质量管理系统" class="headerlink" title="全面质量管理系统"></a>全面质量管理系统</h4><ul><li>九宫格 card 动效 低版本浏览器兼容性 图片替代 css 效果</li><li>大屏横向切换 渐进渐出 白屏处理</li><li>使用 cloud-charts 展示图表信息</li><li>使用 formilyjs 渲染表单 快速搭建页面 动态生成页面 复杂场景需求 联动、全局字典</li><li>组织架构 菜单与组织架构树状图联动效果</li><li>使用了 single-spa 微服务项目架构 各个子应用间的相互引用 在基座上挂载子应用</li></ul><h4 id="如何进行的各个子应用相互间引用"><a href="#如何进行的各个子应用相互间引用" class="headerlink" title="如何进行的各个子应用相互间引用"></a>如何进行的各个子应用相互间引用</h4><p>useHistory()、useLocation()需要从外层使用应用获取并传递至引用的应用</p><h4 id="各个子应用之间的-css-样式污染"><a href="#各个子应用之间的-css-样式污染" class="headerlink" title="各个子应用之间的 css 样式污染"></a>各个子应用之间的 css 样式污染</h4><ol><li>设置 ElConfigProvider</li><li>设置 SCSS 和 CSS 变量</li><li>定义子应用的 class 包裹</li></ol><p><a href="https://juejin.cn/post/7114882453956722724">微前端基座样式，污染子应用样式的解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2022/06/06/Xwo0Mt.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试题" scheme="https://www.gaotianyang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>延寿寺</title>
    <link href="https://www.gaotianyang.top/archives/2023120927c5424/"/>
    <id>https://www.gaotianyang.top/archives/2023120927c5424/</id>
    <published>2023-12-09T10:05:22.000Z</published>
    <updated>2025-02-06T02:18:08.729Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2023/12/15/pi4eR6x.jpg" alt="首屏图"></p><a id="more"></a><blockquote><p>一行人去延寿寺 happy~</p></blockquote><p><img src="https://s11.ax1x.com/2023/12/16/pi46DtU.jpg" alt="昌平绿道"><br><img src="https://s11.ax1x.com/2023/12/15/pi4e40O.jpg" alt="烤房厨房"><br><img src="https://s11.ax1x.com/2023/12/15/pi4egpR.jpg" alt="赵总"><br><img src="https://s11.ax1x.com/2023/12/15/pi4e211.jpg" alt="牛肉汉堡"><br><img src="https://s11.ax1x.com/2023/12/15/pi4e6h9.jpg" alt="岚泊"><br><img src="https://s11.ax1x.com/2023/12/15/pi4eytJ.jpg" alt="牛肉"><br><img src="https://s11.ax1x.com/2023/12/15/pi4eWX6.jpg" alt="烤肉套餐"><br><img src="https://s11.ax1x.com/2023/12/16/pi46BkT.jpg" alt="延寿寺-大黑山主峰"><br><img src="https://s11.ax1x.com/2023/12/16/pi4c75T.jpg" alt="亲爱的小“熊”"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2023/12/15/pi4eR6x.jpg&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="游记" scheme="https://www.gaotianyang.top/tags/%E6%B8%B8%E8%AE%B0/"/>
    
    <category term="延寿寺" scheme="https://www.gaotianyang.top/tags/%E5%BB%B6%E5%AF%BF%E5%AF%BA/"/>
    
    <category term="黑山烤房" scheme="https://www.gaotianyang.top/tags/%E9%BB%91%E5%B1%B1%E7%83%A4%E6%88%BF/"/>
    
  </entry>
  
  <entry>
    <title>react个人站建站总结</title>
    <link href="https://www.gaotianyang.top/archives/202311282f46f162/"/>
    <id>https://www.gaotianyang.top/archives/202311282f46f162/</id>
    <published>2023-11-28T09:02:14.000Z</published>
    <updated>2025-02-06T02:18:24.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s11.ax1x.com/2023/11/29/piDNnQf.png" alt="首屏图"></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>基于 react-antd-admin 搭建的前端简历网站 <a href="https://me.gaotianyang.top">预览地址</a></p><h2 id="技术总结"><a href="#技术总结" class="headerlink" title="技术总结"></a>技术总结</h2><ul><li><strong>react-antd-admin-template</strong> 基于 <code>React</code> 和 <code>Ant Design</code> 的后台管理系统模板</li><li><strong>antd</strong> <code>Web</code> <code>UI</code> 组件库</li><li><strong>echarts</strong> <code>echarts-wordcloud</code> 词云库</li><li><strong>仿钉钉官网动效</strong> 基于 <code>JavaScript</code> <code>Css</code> 的滚动动效</li><li><strong>仿 antd 图片预览</strong> 基于 <code>Ant Design</code> <code>Modal</code> 的图片预览功能</li><li><strong>axios</strong> 基于 <code>promise</code> 的 <code>HTTP</code> 库</li><li><strong>mockjs</strong> 模拟数据生成器</li><li><strong>lodash</strong> <code>JavaScript</code> 实用工具库</li><li><strong>dayjs</strong> <code>JavaScript</code> 时间处理工具库</li></ul><h2 id="功能与问题"><a href="#功能与问题" class="headerlink" title="功能与问题"></a>功能与问题</h2><h3 id="Mockjs-实现数据过滤"><a href="#Mockjs-实现数据过滤" class="headerlink" title="Mockjs 实现数据过滤"></a>Mockjs 实现数据过滤</h3><p>基于 Mockjs，在<code>项目列表</code>接口请求时，实现了数据的过滤、分页等功能。</p><p><img src="https://s11.ax1x.com/2023/11/29/piDU8BD.png" alt="mockjs"></p><h3 id="仿钉钉官网动效"><a href="#仿钉钉官网动效" class="headerlink" title="仿钉钉官网动效"></a>仿钉钉官网动效</h3><p>在实现此动效的时候，遇到了一些问题。例如原 demo 为原生 <code>html</code> <code>css</code> <code>js</code> 实现的，需要对其进行 react 的迁移与改造。另外，因为在项目中的使用场景为 dashboard 页面下使用，因此原本监听页面滚动事件，触发动效将不再生效。解决方案为将滚动监听，变更为 antd layout 组件，并将监听结果挂载于 window 自定义变量中。页面根据挂载的自定义变量，进行页面的重绘。</p><p><img src="https://s11.ax1x.com/2023/11/29/piDNnQf.png" alt="dashboard"></p><h3 id="echarts-词云"><a href="#echarts-词云" class="headerlink" title="echarts 词云"></a>echarts 词云</h3><p>在使用词云效果的自定义词云形状时，会遇到因背景图加载原因，导致的首次渲染白屏的问题。解决方案为，将词云首次绘制，执行于背景图加载完毕后(<code>maskImage.onload</code>)。</p><p><img src="https://s11.ax1x.com/2023/11/29/piDUtNd.png" alt="wordcloud"></p><h3 id="仿-antd-图片预览"><a href="#仿-antd-图片预览" class="headerlink" title="仿 antd 图片预览"></a>仿 antd 图片预览</h3><p>本项目的 <code>Ant Design</code> 版本为 V3.X，尚未加入图片预览功能，因此基于 <code>Ant Design</code> 的 <code>Modal</code> 组件二次封装了图片预览组件，并基于 <code>css</code> <code>js</code> 实现了缩放、翻转、旋转这些功能。</p><p><img src="https://s11.ax1x.com/2023/11/29/piDUGHe.png" alt="imagePreview"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/NLRX-WJC/react-antd-admin-template">react-antd-admin-template</a></li><li><a href="https://www.bilibili.com/video/BV12z4y1s7nE/?vd_source=2e6014e07f90a9d8b3424eb1c055a867">复刻钉钉官网滚动动画</a></li><li><a href="https://gitee.com/vary-space/hello-world/tree/12z4y1s7nE">代码仓库-复刻钉钉官网滚动动画</a></li><li><a href="https://www.npmjs.com/package/echarts-wordcloud">echarts-wordcloud npm 词云</a></li><li><a href="https://www.cnblogs.com/art-poet/p/13936076.html">react 项目使用 echarts-wordcloud（文字云）</a></li><li><a href="https://blog.csdn.net/Zeng__Yi/article/details/106197891">react+typeScript 框架 config-overrides 中设置 Alias 路径 报错的解决方法</a></li><li><a href="https://blog.csdn.net/m0_47670683/article/details/124025972">最优雅解决 typescript 报错：“元素隐式具有 “any“ 类型，因为类型为 “string“ 的表达式不能用于索引类型”</a></li><li><a href="https://cloud.tencent.com/developer/article/2233289">react antd 实现图片自定义预览</a></li><li><a href="https://github.com/liuguanhua/liuguanhua.github.io">刘关化的前端简历 参考</a></li><li><a href="https://github.com/sunniejs/sunniejs.github.io">宋楠的前端简历 参考</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s11.ax1x.com/2023/11/29/piDNnQf.png&quot; alt=&quot;首屏图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="技术积累" scheme="https://www.gaotianyang.top/tags/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="前端" scheme="https://www.gaotianyang.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://www.gaotianyang.top/tags/React/"/>
    
  </entry>
  
</feed>
